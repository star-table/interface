// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: officeapi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfficeApiClient is the client API for OfficeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficeApiClient interface {
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetWopiFileInfoEditable(ctx context.Context, in *WOPIRequest, opts ...grpc.CallOption) (*WOPIEditableResp, error)
}

type officeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficeApiClient(cc grpc.ClientConnInterface) OfficeApiClient {
	return &officeApiClient{cc}
}

func (c *officeApiClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/officeapi.v1.OfficeApi/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeApiClient) GetWopiFileInfoEditable(ctx context.Context, in *WOPIRequest, opts ...grpc.CallOption) (*WOPIEditableResp, error) {
	out := new(WOPIEditableResp)
	err := c.cc.Invoke(ctx, "/officeapi.v1.OfficeApi/GetWopiFileInfoEditable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficeApiServer is the server API for OfficeApi service.
// All implementations must embed UnimplementedOfficeApiServer
// for forward compatibility
type OfficeApiServer interface {
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetWopiFileInfoEditable(context.Context, *WOPIRequest) (*WOPIEditableResp, error)
	mustEmbedUnimplementedOfficeApiServer()
}

// UnimplementedOfficeApiServer must be embedded to have forward compatible implementations.
type UnimplementedOfficeApiServer struct {
}

func (UnimplementedOfficeApiServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedOfficeApiServer) GetWopiFileInfoEditable(context.Context, *WOPIRequest) (*WOPIEditableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWopiFileInfoEditable not implemented")
}
func (UnimplementedOfficeApiServer) mustEmbedUnimplementedOfficeApiServer() {}

// UnsafeOfficeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficeApiServer will
// result in compilation errors.
type UnsafeOfficeApiServer interface {
	mustEmbedUnimplementedOfficeApiServer()
}

func RegisterOfficeApiServer(s grpc.ServiceRegistrar, srv OfficeApiServer) {
	s.RegisterService(&OfficeApi_ServiceDesc, srv)
}

func _OfficeApi_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeApiServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/officeapi.v1.OfficeApi/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeApiServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeApi_GetWopiFileInfoEditable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WOPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeApiServer).GetWopiFileInfoEditable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/officeapi.v1.OfficeApi/GetWopiFileInfoEditable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeApiServer).GetWopiFileInfoEditable(ctx, req.(*WOPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficeApi_ServiceDesc is the grpc.ServiceDesc for OfficeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "officeapi.v1.OfficeApi",
	HandlerType: (*OfficeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _OfficeApi_GetConfig_Handler,
		},
		{
			MethodName: "GetWopiFileInfoEditable",
			Handler:    _OfficeApi_GetWopiFileInfoEditable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "officeapi.proto",
}
