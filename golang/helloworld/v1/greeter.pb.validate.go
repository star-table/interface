// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: greeter.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HelloRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloRequestMultiError, or
// nil if none found.
func (m *HelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HelloRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HelloRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HelloRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetListValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HelloRequestValidationError{
						field:  fmt.Sprintf("ListValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HelloRequestValidationError{
						field:  fmt.Sprintf("ListValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HelloRequestValidationError{
					field:  fmt.Sprintf("ListValue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMyValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HelloRequestValidationError{
					field:  "MyValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HelloRequestValidationError{
					field:  "MyValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMyValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HelloRequestValidationError{
				field:  "MyValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FieldType

	// no validation rules for Id

	if len(errors) > 0 {
		return HelloRequestMultiError(errors)
	}

	return nil
}

// HelloRequestMultiError is an error wrapping multiple validation errors
// returned by HelloRequest.ValidateAll() if the designated constraints aren't met.
type HelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloRequestMultiError) AllErrors() []error { return m }

// HelloRequestValidationError is the validation error returned by
// HelloRequest.Validate if the designated constraints aren't met.
type HelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloRequestValidationError) ErrorName() string { return "HelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e HelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloRequestValidationError{}

// Validate checks the field values on HelloReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReplyMultiError, or
// nil if none found.
func (m *HelloReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageMsg

	if len(errors) > 0 {
		return HelloReplyMultiError(errors)
	}

	return nil
}

// HelloReplyMultiError is an error wrapping multiple validation errors
// returned by HelloReply.ValidateAll() if the designated constraints aren't met.
type HelloReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReplyMultiError) AllErrors() []error { return m }

// HelloReplyValidationError is the validation error returned by
// HelloReply.Validate if the designated constraints aren't met.
type HelloReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReplyValidationError) ErrorName() string { return "HelloReplyValidationError" }

// Error satisfies the builtin error interface
func (e HelloReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReplyValidationError{}

// Validate checks the field values on TransInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransInRequestMultiError,
// or nil if none found.
func (m *TransInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransInRequestMultiError(errors)
	}

	return nil
}

// TransInRequestMultiError is an error wrapping multiple validation errors
// returned by TransInRequest.ValidateAll() if the designated constraints
// aren't met.
type TransInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransInRequestMultiError) AllErrors() []error { return m }

// TransInRequestValidationError is the validation error returned by
// TransInRequest.Validate if the designated constraints aren't met.
type TransInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransInRequestValidationError) ErrorName() string { return "TransInRequestValidationError" }

// Error satisfies the builtin error interface
func (e TransInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransInRequestValidationError{}

// Validate checks the field values on TransInReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransInReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransInReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransInReplyMultiError, or
// nil if none found.
func (m *TransInReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TransInReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransInReplyMultiError(errors)
	}

	return nil
}

// TransInReplyMultiError is an error wrapping multiple validation errors
// returned by TransInReply.ValidateAll() if the designated constraints aren't met.
type TransInReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransInReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransInReplyMultiError) AllErrors() []error { return m }

// TransInReplyValidationError is the validation error returned by
// TransInReply.Validate if the designated constraints aren't met.
type TransInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransInReplyValidationError) ErrorName() string { return "TransInReplyValidationError" }

// Error satisfies the builtin error interface
func (e TransInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransInReplyValidationError{}

// Validate checks the field values on TransOutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransOutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransOutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransOutRequestMultiError, or nil if none found.
func (m *TransOutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransOutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransOutRequestMultiError(errors)
	}

	return nil
}

// TransOutRequestMultiError is an error wrapping multiple validation errors
// returned by TransOutRequest.ValidateAll() if the designated constraints
// aren't met.
type TransOutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransOutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransOutRequestMultiError) AllErrors() []error { return m }

// TransOutRequestValidationError is the validation error returned by
// TransOutRequest.Validate if the designated constraints aren't met.
type TransOutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransOutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransOutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransOutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransOutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransOutRequestValidationError) ErrorName() string { return "TransOutRequestValidationError" }

// Error satisfies the builtin error interface
func (e TransOutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransOutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransOutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransOutRequestValidationError{}

// Validate checks the field values on TransOutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransOutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransOutReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransOutReplyMultiError, or
// nil if none found.
func (m *TransOutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TransOutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransOutReplyMultiError(errors)
	}

	return nil
}

// TransOutReplyMultiError is an error wrapping multiple validation errors
// returned by TransOutReply.ValidateAll() if the designated constraints
// aren't met.
type TransOutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransOutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransOutReplyMultiError) AllErrors() []error { return m }

// TransOutReplyValidationError is the validation error returned by
// TransOutReply.Validate if the designated constraints aren't met.
type TransOutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransOutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransOutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransOutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransOutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransOutReplyValidationError) ErrorName() string { return "TransOutReplyValidationError" }

// Error satisfies the builtin error interface
func (e TransOutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransOutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransOutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransOutReplyValidationError{}
