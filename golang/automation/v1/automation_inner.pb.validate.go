// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: automation_inner.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ApplyTemplateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyTemplateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyTemplateReqMultiError, or nil if none found.
func (m *ApplyTemplateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyTemplateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsCreate

	if all {
		switch v := interface{}(m.GetOrgIdMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyTemplateReqValidationError{
					field:  "OrgIdMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyTemplateReqValidationError{
					field:  "OrgIdMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrgIdMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyTemplateReqValidationError{
				field:  "OrgIdMapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAppIdMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyTemplateReqValidationError{
					field:  "AppIdMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyTemplateReqValidationError{
					field:  "AppIdMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppIdMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyTemplateReqValidationError{
				field:  "AppIdMapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTableIdMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyTemplateReqValidationError{
						field:  fmt.Sprintf("TableIdMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyTemplateReqValidationError{
						field:  fmt.Sprintf("TableIdMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyTemplateReqValidationError{
					field:  fmt.Sprintf("TableIdMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIterationIdMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyTemplateReqValidationError{
						field:  fmt.Sprintf("IterationIdMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyTemplateReqValidationError{
						field:  fmt.Sprintf("IterationIdMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyTemplateReqValidationError{
					field:  fmt.Sprintf("IterationIdMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplyTemplateReqMultiError(errors)
	}

	return nil
}

// ApplyTemplateReqMultiError is an error wrapping multiple validation errors
// returned by ApplyTemplateReq.ValidateAll() if the designated constraints
// aren't met.
type ApplyTemplateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyTemplateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyTemplateReqMultiError) AllErrors() []error { return m }

// ApplyTemplateReqValidationError is the validation error returned by
// ApplyTemplateReq.Validate if the designated constraints aren't met.
type ApplyTemplateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyTemplateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyTemplateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyTemplateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyTemplateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyTemplateReqValidationError) ErrorName() string { return "ApplyTemplateReqValidationError" }

// Error satisfies the builtin error interface
func (e ApplyTemplateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyTemplateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyTemplateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyTemplateReqValidationError{}

// Validate checks the field values on ApplyTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyTemplateReplyMultiError, or nil if none found.
func (m *ApplyTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApplyTemplateReplyMultiError(errors)
	}

	return nil
}

// ApplyTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by ApplyTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type ApplyTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyTemplateReplyMultiError) AllErrors() []error { return m }

// ApplyTemplateReplyValidationError is the validation error returned by
// ApplyTemplateReply.Validate if the designated constraints aren't met.
type ApplyTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyTemplateReplyValidationError) ErrorName() string {
	return "ApplyTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyTemplateReplyValidationError{}

// Validate checks the field values on HandleWorkflowExecuteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleWorkflowExecuteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleWorkflowExecuteReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleWorkflowExecuteReqMultiError, or nil if none found.
func (m *HandleWorkflowExecuteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleWorkflowExecuteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for WorkflowId

	// no validation rules for ExecutionId

	// no validation rules for TriggerResult

	if len(errors) > 0 {
		return HandleWorkflowExecuteReqMultiError(errors)
	}

	return nil
}

// HandleWorkflowExecuteReqMultiError is an error wrapping multiple validation
// errors returned by HandleWorkflowExecuteReq.ValidateAll() if the designated
// constraints aren't met.
type HandleWorkflowExecuteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleWorkflowExecuteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleWorkflowExecuteReqMultiError) AllErrors() []error { return m }

// HandleWorkflowExecuteReqValidationError is the validation error returned by
// HandleWorkflowExecuteReq.Validate if the designated constraints aren't met.
type HandleWorkflowExecuteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleWorkflowExecuteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleWorkflowExecuteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleWorkflowExecuteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleWorkflowExecuteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleWorkflowExecuteReqValidationError) ErrorName() string {
	return "HandleWorkflowExecuteReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandleWorkflowExecuteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleWorkflowExecuteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleWorkflowExecuteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleWorkflowExecuteReqValidationError{}

// Validate checks the field values on HandleWorkflowExecuteReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleWorkflowExecuteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleWorkflowExecuteReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleWorkflowExecuteReplyMultiError, or nil if none found.
func (m *HandleWorkflowExecuteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleWorkflowExecuteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HandleWorkflowExecuteReplyMultiError(errors)
	}

	return nil
}

// HandleWorkflowExecuteReplyMultiError is an error wrapping multiple
// validation errors returned by HandleWorkflowExecuteReply.ValidateAll() if
// the designated constraints aren't met.
type HandleWorkflowExecuteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleWorkflowExecuteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleWorkflowExecuteReplyMultiError) AllErrors() []error { return m }

// HandleWorkflowExecuteReplyValidationError is the validation error returned
// by HandleWorkflowExecuteReply.Validate if the designated constraints aren't met.
type HandleWorkflowExecuteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleWorkflowExecuteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleWorkflowExecuteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleWorkflowExecuteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleWorkflowExecuteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleWorkflowExecuteReplyValidationError) ErrorName() string {
	return "HandleWorkflowExecuteReplyValidationError"
}

// Error satisfies the builtin error interface
func (e HandleWorkflowExecuteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleWorkflowExecuteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleWorkflowExecuteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleWorkflowExecuteReplyValidationError{}

// Validate checks the field values on HandleWorkflowErrorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleWorkflowErrorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleWorkflowErrorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleWorkflowErrorReqMultiError, or nil if none found.
func (m *HandleWorkflowErrorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleWorkflowErrorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for ExecutionId

	if len(errors) > 0 {
		return HandleWorkflowErrorReqMultiError(errors)
	}

	return nil
}

// HandleWorkflowErrorReqMultiError is an error wrapping multiple validation
// errors returned by HandleWorkflowErrorReq.ValidateAll() if the designated
// constraints aren't met.
type HandleWorkflowErrorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleWorkflowErrorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleWorkflowErrorReqMultiError) AllErrors() []error { return m }

// HandleWorkflowErrorReqValidationError is the validation error returned by
// HandleWorkflowErrorReq.Validate if the designated constraints aren't met.
type HandleWorkflowErrorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleWorkflowErrorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleWorkflowErrorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleWorkflowErrorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleWorkflowErrorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleWorkflowErrorReqValidationError) ErrorName() string {
	return "HandleWorkflowErrorReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandleWorkflowErrorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleWorkflowErrorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleWorkflowErrorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleWorkflowErrorReqValidationError{}

// Validate checks the field values on HandleWorkflowErrorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleWorkflowErrorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleWorkflowErrorReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleWorkflowErrorReplyMultiError, or nil if none found.
func (m *HandleWorkflowErrorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleWorkflowErrorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HandleWorkflowErrorReplyMultiError(errors)
	}

	return nil
}

// HandleWorkflowErrorReplyMultiError is an error wrapping multiple validation
// errors returned by HandleWorkflowErrorReply.ValidateAll() if the designated
// constraints aren't met.
type HandleWorkflowErrorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleWorkflowErrorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleWorkflowErrorReplyMultiError) AllErrors() []error { return m }

// HandleWorkflowErrorReplyValidationError is the validation error returned by
// HandleWorkflowErrorReply.Validate if the designated constraints aren't met.
type HandleWorkflowErrorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleWorkflowErrorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleWorkflowErrorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleWorkflowErrorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleWorkflowErrorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleWorkflowErrorReplyValidationError) ErrorName() string {
	return "HandleWorkflowErrorReplyValidationError"
}

// Error satisfies the builtin error interface
func (e HandleWorkflowErrorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleWorkflowErrorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleWorkflowErrorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleWorkflowErrorReplyValidationError{}

// Validate checks the field values on BatchRebuildActiveReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchRebuildActiveReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchRebuildActiveReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchRebuildActiveReqMultiError, or nil if none found.
func (m *BatchRebuildActiveReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchRebuildActiveReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if len(errors) > 0 {
		return BatchRebuildActiveReqMultiError(errors)
	}

	return nil
}

// BatchRebuildActiveReqMultiError is an error wrapping multiple validation
// errors returned by BatchRebuildActiveReq.ValidateAll() if the designated
// constraints aren't met.
type BatchRebuildActiveReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchRebuildActiveReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchRebuildActiveReqMultiError) AllErrors() []error { return m }

// BatchRebuildActiveReqValidationError is the validation error returned by
// BatchRebuildActiveReq.Validate if the designated constraints aren't met.
type BatchRebuildActiveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchRebuildActiveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchRebuildActiveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchRebuildActiveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchRebuildActiveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchRebuildActiveReqValidationError) ErrorName() string {
	return "BatchRebuildActiveReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchRebuildActiveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchRebuildActiveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchRebuildActiveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchRebuildActiveReqValidationError{}

// Validate checks the field values on BatchRebuildActiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchRebuildActiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchRebuildActiveReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchRebuildActiveReplyMultiError, or nil if none found.
func (m *BatchRebuildActiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchRebuildActiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchRebuildActiveReplyMultiError(errors)
	}

	return nil
}

// BatchRebuildActiveReplyMultiError is an error wrapping multiple validation
// errors returned by BatchRebuildActiveReply.ValidateAll() if the designated
// constraints aren't met.
type BatchRebuildActiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchRebuildActiveReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchRebuildActiveReplyMultiError) AllErrors() []error { return m }

// BatchRebuildActiveReplyValidationError is the validation error returned by
// BatchRebuildActiveReply.Validate if the designated constraints aren't met.
type BatchRebuildActiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchRebuildActiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchRebuildActiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchRebuildActiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchRebuildActiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchRebuildActiveReplyValidationError) ErrorName() string {
	return "BatchRebuildActiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchRebuildActiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchRebuildActiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchRebuildActiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchRebuildActiveReplyValidationError{}

// Validate checks the field values on GlobalSwitchOffReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalSwitchOffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalSwitchOffReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalSwitchOffReqMultiError, or nil if none found.
func (m *GlobalSwitchOffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalSwitchOffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GlobalSwitchOffReqMultiError(errors)
	}

	return nil
}

// GlobalSwitchOffReqMultiError is an error wrapping multiple validation errors
// returned by GlobalSwitchOffReq.ValidateAll() if the designated constraints
// aren't met.
type GlobalSwitchOffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalSwitchOffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalSwitchOffReqMultiError) AllErrors() []error { return m }

// GlobalSwitchOffReqValidationError is the validation error returned by
// GlobalSwitchOffReq.Validate if the designated constraints aren't met.
type GlobalSwitchOffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalSwitchOffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalSwitchOffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalSwitchOffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalSwitchOffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalSwitchOffReqValidationError) ErrorName() string {
	return "GlobalSwitchOffReqValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalSwitchOffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalSwitchOffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalSwitchOffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalSwitchOffReqValidationError{}

// Validate checks the field values on GlobalSwitchOffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalSwitchOffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalSwitchOffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalSwitchOffReplyMultiError, or nil if none found.
func (m *GlobalSwitchOffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalSwitchOffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GlobalSwitchOffReplyMultiError(errors)
	}

	return nil
}

// GlobalSwitchOffReplyMultiError is an error wrapping multiple validation
// errors returned by GlobalSwitchOffReply.ValidateAll() if the designated
// constraints aren't met.
type GlobalSwitchOffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalSwitchOffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalSwitchOffReplyMultiError) AllErrors() []error { return m }

// GlobalSwitchOffReplyValidationError is the validation error returned by
// GlobalSwitchOffReply.Validate if the designated constraints aren't met.
type GlobalSwitchOffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalSwitchOffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalSwitchOffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalSwitchOffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalSwitchOffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalSwitchOffReplyValidationError) ErrorName() string {
	return "GlobalSwitchOffReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalSwitchOffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalSwitchOffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalSwitchOffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalSwitchOffReplyValidationError{}

// Validate checks the field values on CreateTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTodoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTodoReqMultiError, or
// nil if none found.
func (m *CreateTodoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTriggerBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTodoReqValidationError{
					field:  "TriggerBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTodoReqValidationError{
					field:  "TriggerBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggerBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTodoReqValidationError{
				field:  "TriggerBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOrgId() <= 0 {
		err := CreateTodoReqValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 20 {
		err := CreateTodoReqValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTableId()); l < 1 || l > 20 {
		err := CreateTodoReqValidationError{
			field:  "TableId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIssueId() <= 0 {
		err := CreateTodoReqValidationError{
			field:  "IssueId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTriggerUserId() <= 0 {
		err := CreateTodoReqValidationError{
			field:  "TriggerUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AllowWithdrawByTrigger

	// no validation rules for AllowUrgeByTrigger

	// no validation rules for Type

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTodoReqValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTodoReqValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTodoReqValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AuditFlowName

	// no validation rules for AuditFlowId

	// no validation rules for IssueTitle

	switch m.Parameters.(type) {

	case *CreateTodoReq_TodoAudit:

		if all {
			switch v := interface{}(m.GetTodoAudit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTodoReqValidationError{
						field:  "TodoAudit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTodoReqValidationError{
						field:  "TodoAudit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTodoAudit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTodoReqValidationError{
					field:  "TodoAudit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateTodoReq_TodoFillIn:

		if all {
			switch v := interface{}(m.GetTodoFillIn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTodoReqValidationError{
						field:  "TodoFillIn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTodoReqValidationError{
						field:  "TodoFillIn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTodoFillIn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTodoReqValidationError{
					field:  "TodoFillIn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTodoReqMultiError(errors)
	}

	return nil
}

// CreateTodoReqMultiError is an error wrapping multiple validation errors
// returned by CreateTodoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoReqMultiError) AllErrors() []error { return m }

// CreateTodoReqValidationError is the validation error returned by
// CreateTodoReq.Validate if the designated constraints aren't met.
type CreateTodoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoReqValidationError) ErrorName() string { return "CreateTodoReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTodoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoReqValidationError{}

// Validate checks the field values on CreateTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoReplyMultiError, or nil if none found.
func (m *CreateTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTodoReplyMultiError(errors)
	}

	return nil
}

// CreateTodoReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTodoReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoReplyMultiError) AllErrors() []error { return m }

// CreateTodoReplyValidationError is the validation error returned by
// CreateTodoReply.Validate if the designated constraints aren't met.
type CreateTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoReplyValidationError) ErrorName() string { return "CreateTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoReplyValidationError{}

// Validate checks the field values on UpdateTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateTodoReqMultiError, or
// nil if none found.
func (m *UpdateTodoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 20 {
		err := UpdateTodoReqValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Op

	// no validation rules for Msg

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTodoReqMultiError(errors)
	}

	return nil
}

// UpdateTodoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateTodoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateTodoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoReqMultiError) AllErrors() []error { return m }

// UpdateTodoReqValidationError is the validation error returned by
// UpdateTodoReq.Validate if the designated constraints aren't met.
type UpdateTodoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoReqValidationError) ErrorName() string { return "UpdateTodoReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTodoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoReqValidationError{}

// Validate checks the field values on UpdateTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTodoReplyMultiError, or nil if none found.
func (m *UpdateTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTodoReplyMultiError(errors)
	}

	return nil
}

// UpdateTodoReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateTodoReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoReplyMultiError) AllErrors() []error { return m }

// UpdateTodoReplyValidationError is the validation error returned by
// UpdateTodoReply.Validate if the designated constraints aren't met.
type UpdateTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoReplyValidationError) ErrorName() string { return "UpdateTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoReplyValidationError{}
