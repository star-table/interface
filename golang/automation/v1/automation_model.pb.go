// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: automation_model.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TodoType int32

const (
	TodoType_Audit  TodoType = 0 // 审批
	TodoType_FillIn TodoType = 1 // 填写
)

// Enum value maps for TodoType.
var (
	TodoType_name = map[int32]string{
		0: "Audit",
		1: "FillIn",
	}
	TodoType_value = map[string]int32{
		"Audit":  0,
		"FillIn": 1,
	}
)

func (x TodoType) Enum() *TodoType {
	p := new(TodoType)
	*p = x
	return p
}

func (x TodoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TodoType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[0].Descriptor()
}

func (TodoType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[0]
}

func (x TodoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TodoType.Descriptor instead.
func (TodoType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{0}
}

type TodoOp int32

const (
	TodoOp_OpInit     TodoOp = 0 // 初始状态
	TodoOp_OpPass     TodoOp = 1 // 通过
	TodoOp_OpReject   TodoOp = 2 // 否决
	TodoOp_OpWithdraw TodoOp = 3 // 撤回
)

// Enum value maps for TodoOp.
var (
	TodoOp_name = map[int32]string{
		0: "OpInit",
		1: "OpPass",
		2: "OpReject",
		3: "OpWithdraw",
	}
	TodoOp_value = map[string]int32{
		"OpInit":     0,
		"OpPass":     1,
		"OpReject":   2,
		"OpWithdraw": 3,
	}
)

func (x TodoOp) Enum() *TodoOp {
	p := new(TodoOp)
	*p = x
	return p
}

func (x TodoOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TodoOp) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[1].Descriptor()
}

func (TodoOp) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[1]
}

func (x TodoOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TodoOp.Descriptor instead.
func (TodoOp) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{1}
}

type TodoStatus int32

const (
	TodoStatus_SUnFinished       TodoStatus = 0 // 未完成
	TodoStatus_SFinishedPassed   TodoStatus = 1 // 已完成 - 通过
	TodoStatus_SFinishedRejected TodoStatus = 2 // 已完成 - 否决
	TodoStatus_SWithdrew         TodoStatus = 3 // 已撤回
	TodoStatus_STimeout          TodoStatus = 4 // 已超时
)

// Enum value maps for TodoStatus.
var (
	TodoStatus_name = map[int32]string{
		0: "SUnFinished",
		1: "SFinishedPassed",
		2: "SFinishedRejected",
		3: "SWithdrew",
		4: "STimeout",
	}
	TodoStatus_value = map[string]int32{
		"SUnFinished":       0,
		"SFinishedPassed":   1,
		"SFinishedRejected": 2,
		"SWithdrew":         3,
		"STimeout":          4,
	}
)

func (x TodoStatus) Enum() *TodoStatus {
	p := new(TodoStatus)
	*p = x
	return p
}

func (x TodoStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TodoStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[2].Descriptor()
}

func (TodoStatus) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[2]
}

func (x TodoStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TodoStatus.Descriptor instead.
func (TodoStatus) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{2}
}

type TodoFilterType int32

const (
	TodoFilterType_FtWaitingAudit  TodoFilterType = 0 // 待审批
	TodoFilterType_FtWaitingFillIn TodoFilterType = 1 // 待填写
	TodoFilterType_FtTriggeredByMe TodoFilterType = 2 // 我发起的
	TodoFilterType_FtFinished      TodoFilterType = 3 // 已完成
)

// Enum value maps for TodoFilterType.
var (
	TodoFilterType_name = map[int32]string{
		0: "FtWaitingAudit",
		1: "FtWaitingFillIn",
		2: "FtTriggeredByMe",
		3: "FtFinished",
	}
	TodoFilterType_value = map[string]int32{
		"FtWaitingAudit":  0,
		"FtWaitingFillIn": 1,
		"FtTriggeredByMe": 2,
		"FtFinished":      3,
	}
)

func (x TodoFilterType) Enum() *TodoFilterType {
	p := new(TodoFilterType)
	*p = x
	return p
}

func (x TodoFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TodoFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[3].Descriptor()
}

func (TodoFilterType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[3]
}

func (x TodoFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TodoFilterType.Descriptor instead.
func (TodoFilterType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{3}
}

type SignMode int32

const (
	SignMode_Or         SignMode = 0 // 或签（一票通过+一票否决）
	SignMode_AndAllPass SignMode = 1 // 会签（全部通过+一票否决）
	SignMode_AndOnePass SignMode = 2 // 会签（一票通过+全部否决）
)

// Enum value maps for SignMode.
var (
	SignMode_name = map[int32]string{
		0: "Or",
		1: "AndAllPass",
		2: "AndOnePass",
	}
	SignMode_value = map[string]int32{
		"Or":         0,
		"AndAllPass": 1,
		"AndOnePass": 2,
	}
)

func (x SignMode) Enum() *SignMode {
	p := new(SignMode)
	*p = x
	return p
}

func (x SignMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignMode) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[4].Descriptor()
}

func (SignMode) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[4]
}

func (x SignMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignMode.Descriptor instead.
func (SignMode) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{4}
}

type WorkflowFilterType int32

const (
	WorkflowFilterType_All      WorkflowFilterType = 0 // 所有流程
	WorkflowFilterType_Active   WorkflowFilterType = 1 // 已启用流程
	WorkflowFilterType_Inactive WorkflowFilterType = 2 // 未启用流程
)

// Enum value maps for WorkflowFilterType.
var (
	WorkflowFilterType_name = map[int32]string{
		0: "All",
		1: "Active",
		2: "Inactive",
	}
	WorkflowFilterType_value = map[string]int32{
		"All":      0,
		"Active":   1,
		"Inactive": 2,
	}
)

func (x WorkflowFilterType) Enum() *WorkflowFilterType {
	p := new(WorkflowFilterType)
	*p = x
	return p
}

func (x WorkflowFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[5].Descriptor()
}

func (WorkflowFilterType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[5]
}

func (x WorkflowFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowFilterType.Descriptor instead.
func (WorkflowFilterType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{5}
}

type NodeType int32

const (
	NodeType_TriggerCron            NodeType = 0    // 触发器：定时
	NodeType_TriggerDataEvent       NodeType = 1    // 触发器：数据事件
	NodeType_TriggerWebhook         NodeType = 2    // 触发器：Webhook
	NodeType_TriggerOrgEvent        NodeType = 3    // 触发器：组织事件
	NodeType_TriggerDateColumnCron  NodeType = 4    // 触发器：日期字段定时
	NodeType_TriggerUserEvent       NodeType = 5    // 触发器：用户事件
	NodeType_ActionCreateData       NodeType = 10   // 动作：创建数据
	NodeType_ActionUpdateData       NodeType = 11   // 动作：修改数据
	NodeType_ActionListData         NodeType = 12   // 动作：查询多条数据
	NodeType_ActionFork             NodeType = 13   // 动作：分支
	NodeType_ActionNoOperation      NodeType = 14   // 动作：无动作
	NodeType_ActionMerge            NodeType = 15   // 动作：合并
	NodeType_ActionAudit            NodeType = 16   // 动作：审批
	NodeType_ActionFillIn           NodeType = 17   // 动作：填写
	NodeType_ActionCode             NodeType = 18   // 动作：指定代码段
	NodeType_ActionFindData         NodeType = 19   // 动作：查询单条数据
	NodeType_ActionMysql            NodeType = 20   // 动作：MYSQL
	NodeType_ActionPostgres         NodeType = 21   // 动作：POSTGRES
	NodeType_ActionCopyData         NodeType = 22   // 动作：复制数据
	NodeType_ActionSendEmail        NodeType = 23   // 动作：发送Email
	NodeType_ActionSendCardFeishu   NodeType = 24   // 动作：发送卡片(飞书)
	NodeType_ActionSendCardDingTalk NodeType = 25   // 动作：发送卡片(钉钉)
	NodeType_ActionSendCardWeCom    NodeType = 26   // 动作：发送卡片(企微)
	NodeType_ActionGroupAuditFlow   NodeType = 1000 // 动作组：发起审批
	NodeType_ActionGroupLoop        NodeType = 1001 // 动作组：循环
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0:    "TriggerCron",
		1:    "TriggerDataEvent",
		2:    "TriggerWebhook",
		3:    "TriggerOrgEvent",
		4:    "TriggerDateColumnCron",
		5:    "TriggerUserEvent",
		10:   "ActionCreateData",
		11:   "ActionUpdateData",
		12:   "ActionListData",
		13:   "ActionFork",
		14:   "ActionNoOperation",
		15:   "ActionMerge",
		16:   "ActionAudit",
		17:   "ActionFillIn",
		18:   "ActionCode",
		19:   "ActionFindData",
		20:   "ActionMysql",
		21:   "ActionPostgres",
		22:   "ActionCopyData",
		23:   "ActionSendEmail",
		24:   "ActionSendCardFeishu",
		25:   "ActionSendCardDingTalk",
		26:   "ActionSendCardWeCom",
		1000: "ActionGroupAuditFlow",
		1001: "ActionGroupLoop",
	}
	NodeType_value = map[string]int32{
		"TriggerCron":            0,
		"TriggerDataEvent":       1,
		"TriggerWebhook":         2,
		"TriggerOrgEvent":        3,
		"TriggerDateColumnCron":  4,
		"TriggerUserEvent":       5,
		"ActionCreateData":       10,
		"ActionUpdateData":       11,
		"ActionListData":         12,
		"ActionFork":             13,
		"ActionNoOperation":      14,
		"ActionMerge":            15,
		"ActionAudit":            16,
		"ActionFillIn":           17,
		"ActionCode":             18,
		"ActionFindData":         19,
		"ActionMysql":            20,
		"ActionPostgres":         21,
		"ActionCopyData":         22,
		"ActionSendEmail":        23,
		"ActionSendCardFeishu":   24,
		"ActionSendCardDingTalk": 25,
		"ActionSendCardWeCom":    26,
		"ActionGroupAuditFlow":   1000,
		"ActionGroupLoop":        1001,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[6].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[6]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{6}
}

type DataEventType int32

const (
	DataEventType_DataCreatedOrUpdated DataEventType = 0
	DataEventType_DataCreated          DataEventType = 1
	DataEventType_DataUpdated          DataEventType = 2
	DataEventType_DataDeleted          DataEventType = 3
)

// Enum value maps for DataEventType.
var (
	DataEventType_name = map[int32]string{
		0: "DataCreatedOrUpdated",
		1: "DataCreated",
		2: "DataUpdated",
		3: "DataDeleted",
	}
	DataEventType_value = map[string]int32{
		"DataCreatedOrUpdated": 0,
		"DataCreated":          1,
		"DataUpdated":          2,
		"DataDeleted":          3,
	}
)

func (x DataEventType) Enum() *DataEventType {
	p := new(DataEventType)
	*p = x
	return p
}

func (x DataEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[7].Descriptor()
}

func (DataEventType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[7]
}

func (x DataEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataEventType.Descriptor instead.
func (DataEventType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{7}
}

type OrgEventType int32

const (
	OrgEventType_OrgInited OrgEventType = 0
)

// Enum value maps for OrgEventType.
var (
	OrgEventType_name = map[int32]string{
		0: "OrgInited",
	}
	OrgEventType_value = map[string]int32{
		"OrgInited": 0,
	}
)

func (x OrgEventType) Enum() *OrgEventType {
	p := new(OrgEventType)
	*p = x
	return p
}

func (x OrgEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[8].Descriptor()
}

func (OrgEventType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[8]
}

func (x OrgEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgEventType.Descriptor instead.
func (OrgEventType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{8}
}

type UserEventType int32

const (
	UserEventType_UserBindMobile UserEventType = 0
)

// Enum value maps for UserEventType.
var (
	UserEventType_name = map[int32]string{
		0: "UserBindMobile",
	}
	UserEventType_value = map[string]int32{
		"UserBindMobile": 0,
	}
)

func (x UserEventType) Enum() *UserEventType {
	p := new(UserEventType)
	*p = x
	return p
}

func (x UserEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[9].Descriptor()
}

func (UserEventType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[9]
}

func (x UserEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserEventType.Descriptor instead.
func (UserEventType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{9}
}

type PeopleType int32

const (
	PeopleType_User PeopleType = 0 // 用户
	PeopleType_Dept PeopleType = 1 // 部门
)

// Enum value maps for PeopleType.
var (
	PeopleType_name = map[int32]string{
		0: "User",
		1: "Dept",
	}
	PeopleType_value = map[string]int32{
		"User": 0,
		"Dept": 1,
	}
)

func (x PeopleType) Enum() *PeopleType {
	p := new(PeopleType)
	*p = x
	return p
}

func (x PeopleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeopleType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[10].Descriptor()
}

func (PeopleType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[10]
}

func (x PeopleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeopleType.Descriptor instead.
func (PeopleType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{10}
}

type ForkType int32

const (
	ForkType_Comprehensive ForkType = 0 // 包容分支
	ForkType_Exclusive     ForkType = 1 // 唯一分支
)

// Enum value maps for ForkType.
var (
	ForkType_name = map[int32]string{
		0: "Comprehensive",
		1: "Exclusive",
	}
	ForkType_value = map[string]int32{
		"Comprehensive": 0,
		"Exclusive":     1,
	}
)

func (x ForkType) Enum() *ForkType {
	p := new(ForkType)
	*p = x
	return p
}

func (x ForkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForkType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[11].Descriptor()
}

func (ForkType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[11]
}

func (x ForkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForkType.Descriptor instead.
func (ForkType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{11}
}

type CronType int32

const (
	CronType_Days   CronType = 0
	CronType_Weeks  CronType = 1
	CronType_Months CronType = 2
)

// Enum value maps for CronType.
var (
	CronType_name = map[int32]string{
		0: "Days",
		1: "Weeks",
		2: "Months",
	}
	CronType_value = map[string]int32{
		"Days":   0,
		"Weeks":  1,
		"Months": 2,
	}
)

func (x CronType) Enum() *CronType {
	p := new(CronType)
	*p = x
	return p
}

func (x CronType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CronType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[12].Descriptor()
}

func (CronType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[12]
}

func (x CronType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CronType.Descriptor instead.
func (CronType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{12}
}

type CronStartType int32

const (
	CronStartType_At     CronStartType = 0 // 在此日期日
	CronStartType_Before CronStartType = 1 // 在此日期之前
	CronStartType_After  CronStartType = 2 // 在此日期之后
)

// Enum value maps for CronStartType.
var (
	CronStartType_name = map[int32]string{
		0: "At",
		1: "Before",
		2: "After",
	}
	CronStartType_value = map[string]int32{
		"At":     0,
		"Before": 1,
		"After":  2,
	}
)

func (x CronStartType) Enum() *CronStartType {
	p := new(CronStartType)
	*p = x
	return p
}

func (x CronStartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CronStartType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[13].Descriptor()
}

func (CronStartType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[13]
}

func (x CronStartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CronStartType.Descriptor instead.
func (CronStartType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{13}
}

type TimeUnit int32

const (
	TimeUnit_Minute TimeUnit = 0
	TimeUnit_Hour   TimeUnit = 1
	TimeUnit_Day    TimeUnit = 2
)

// Enum value maps for TimeUnit.
var (
	TimeUnit_name = map[int32]string{
		0: "Minute",
		1: "Hour",
		2: "Day",
	}
	TimeUnit_value = map[string]int32{
		"Minute": 0,
		"Hour":   1,
		"Day":    2,
	}
)

func (x TimeUnit) Enum() *TimeUnit {
	p := new(TimeUnit)
	*p = x
	return p
}

func (x TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[14].Descriptor()
}

func (TimeUnit) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[14]
}

func (x TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnit.Descriptor instead.
func (TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{14}
}

type ActivateErrorType int32

const (
	// Node相关
	ActivateErrorType_NodeParamRequired ActivateErrorType = 0 // 节点参数缺失
	ActivateErrorType_NodeParamInvalid  ActivateErrorType = 1 // 节点参数非法
)

// Enum value maps for ActivateErrorType.
var (
	ActivateErrorType_name = map[int32]string{
		0: "NodeParamRequired",
		1: "NodeParamInvalid",
	}
	ActivateErrorType_value = map[string]int32{
		"NodeParamRequired": 0,
		"NodeParamInvalid":  1,
	}
)

func (x ActivateErrorType) Enum() *ActivateErrorType {
	p := new(ActivateErrorType)
	*p = x
	return p
}

func (x ActivateErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivateErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[15].Descriptor()
}

func (ActivateErrorType) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[15]
}

func (x ActivateErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivateErrorType.Descriptor instead.
func (ActivateErrorType) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{15}
}

type DbOperation int32

const (
	DbOperation_Query  DbOperation = 0
	DbOperation_Insert DbOperation = 1
	DbOperation_Update DbOperation = 2
)

// Enum value maps for DbOperation.
var (
	DbOperation_name = map[int32]string{
		0: "Query",
		1: "Insert",
		2: "Update",
	}
	DbOperation_value = map[string]int32{
		"Query":  0,
		"Insert": 1,
		"Update": 2,
	}
)

func (x DbOperation) Enum() *DbOperation {
	p := new(DbOperation)
	*p = x
	return p
}

func (x DbOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[16].Descriptor()
}

func (DbOperation) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[16]
}

func (x DbOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbOperation.Descriptor instead.
func (DbOperation) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{16}
}

type EmailFormat int32

const (
	EmailFormat_Text EmailFormat = 0
	EmailFormat_Html EmailFormat = 1
)

// Enum value maps for EmailFormat.
var (
	EmailFormat_name = map[int32]string{
		0: "Text",
		1: "Html",
	}
	EmailFormat_value = map[string]int32{
		"Text": 0,
		"Html": 1,
	}
)

func (x EmailFormat) Enum() *EmailFormat {
	p := new(EmailFormat)
	*p = x
	return p
}

func (x EmailFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[17].Descriptor()
}

func (EmailFormat) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[17]
}

func (x EmailFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailFormat.Descriptor instead.
func (EmailFormat) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{17}
}

type Platform int32

const (
	Platform_Feishu   Platform = 0
	Platform_DingTalk Platform = 1
	Platform_WeCom    Platform = 2
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "Feishu",
		1: "DingTalk",
		2: "WeCom",
	}
	Platform_value = map[string]int32{
		"Feishu":   0,
		"DingTalk": 1,
		"WeCom":    2,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[18].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[18]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{18}
}

type SystemValue int32

const (
	SystemValue_Now SystemValue = 0 // 当前时间
)

// Enum value maps for SystemValue.
var (
	SystemValue_name = map[int32]string{
		0: "Now",
	}
	SystemValue_value = map[string]int32{
		"Now": 0,
	}
)

func (x SystemValue) Enum() *SystemValue {
	p := new(SystemValue)
	*p = x
	return p
}

func (x SystemValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemValue) Descriptor() protoreflect.EnumDescriptor {
	return file_automation_model_proto_enumTypes[19].Descriptor()
}

func (SystemValue) Type() protoreflect.EnumType {
	return &file_automation_model_proto_enumTypes[19]
}

func (x SystemValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemValue.Descriptor instead.
func (SystemValue) EnumDescriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{19}
}

type ActivateErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*ActivateError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ActivateErrors) Reset() {
	*x = ActivateErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateErrors) ProtoMessage() {}

func (x *ActivateErrors) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateErrors.ProtoReflect.Descriptor instead.
func (*ActivateErrors) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{0}
}

func (x *ActivateErrors) GetErrors() []*ActivateError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ActivateError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ActivateErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.ActivateErrorType" json:"type,omitempty"`
	Node string            `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Desc string            `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ActivateError) Reset() {
	*x = ActivateError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateError) ProtoMessage() {}

func (x *ActivateError) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateError.ProtoReflect.Descriptor instead.
func (*ActivateError) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{1}
}

func (x *ActivateError) GetType() ActivateErrorType {
	if x != nil {
		return x.Type
	}
	return ActivateErrorType_NodeParamRequired
}

func (x *ActivateError) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ActivateError) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type DataFromNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *DataFromNode) Reset() {
	*x = DataFromNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFromNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFromNode) ProtoMessage() {}

func (x *DataFromNode) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFromNode.ProtoReflect.Descriptor instead.
func (*DataFromNode) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{2}
}

func (x *DataFromNode) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *DataFromNode) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type DynamicValueFromNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Index   int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	KeyPath string `protobuf:"bytes,3,opt,name=keyPath,proto3" json:"keyPath,omitempty"`
}

func (x *DynamicValueFromNode) Reset() {
	*x = DynamicValueFromNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicValueFromNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicValueFromNode) ProtoMessage() {}

func (x *DynamicValueFromNode) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicValueFromNode.ProtoReflect.Descriptor instead.
func (*DynamicValueFromNode) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicValueFromNode) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *DynamicValueFromNode) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DynamicValueFromNode) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

type DynamicValueElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*DynamicValueElement_Text
	//	*DynamicValueElement_Value
	Data isDynamicValueElement_Data `protobuf_oneof:"data"`
}

func (x *DynamicValueElement) Reset() {
	*x = DynamicValueElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicValueElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicValueElement) ProtoMessage() {}

func (x *DynamicValueElement) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicValueElement.ProtoReflect.Descriptor instead.
func (*DynamicValueElement) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{4}
}

func (m *DynamicValueElement) GetData() isDynamicValueElement_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DynamicValueElement) GetText() string {
	if x, ok := x.GetData().(*DynamicValueElement_Text); ok {
		return x.Text
	}
	return ""
}

func (x *DynamicValueElement) GetValue() *DynamicValueFromNode {
	if x, ok := x.GetData().(*DynamicValueElement_Value); ok {
		return x.Value
	}
	return nil
}

type isDynamicValueElement_Data interface {
	isDynamicValueElement_Data()
}

type DynamicValueElement_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type DynamicValueElement_Value struct {
	Value *DynamicValueFromNode `protobuf:"bytes,2,opt,name=value,proto3,oneof"`
}

func (*DynamicValueElement_Text) isDynamicValueElement_Data() {}

func (*DynamicValueElement_Value) isDynamicValueElement_Data() {}

type DynamicValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element []*DynamicValueElement `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *DynamicValue) Reset() {
	*x = DynamicValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicValue) ProtoMessage() {}

func (x *DynamicValue) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicValue.ProtoReflect.Descriptor instead.
func (*DynamicValue) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{5}
}

func (x *DynamicValue) GetElement() []*DynamicValueElement {
	if x != nil {
		return x.Element
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayJson string `protobuf:"bytes,1,opt,name=displayJson,proto3" json:"displayJson,omitempty"`
	// Types that are assignable to Value:
	//	*Value_Json
	//	*Value_Dynamic
	//	*Value_Expression
	//	*Value_System
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{6}
}

func (x *Value) GetDisplayJson() string {
	if x != nil {
		return x.DisplayJson
	}
	return ""
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetJson() string {
	if x, ok := x.GetValue().(*Value_Json); ok {
		return x.Json
	}
	return ""
}

func (x *Value) GetDynamic() *DynamicValue {
	if x, ok := x.GetValue().(*Value_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *Value) GetExpression() string {
	if x, ok := x.GetValue().(*Value_Expression); ok {
		return x.Expression
	}
	return ""
}

func (x *Value) GetSystem() SystemValue {
	if x, ok := x.GetValue().(*Value_System); ok {
		return x.System
	}
	return SystemValue_Now
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Json struct {
	Json string `protobuf:"bytes,2,opt,name=json,proto3,oneof"` // 裸json
}

type Value_Dynamic struct {
	Dynamic *DynamicValue `protobuf:"bytes,3,opt,name=dynamic,proto3,oneof"` // 动态值
}

type Value_Expression struct {
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3,oneof"` // 表达式
}

type Value_System struct {
	System SystemValue `protobuf:"varint,5,opt,name=system,proto3,enum=automation.v1.SystemValue,oneof"` // 系统内置
}

func (*Value_Json) isValue_Value() {}

func (*Value_Dynamic) isValue_Value() {}

func (*Value_Expression) isValue_Value() {}

func (*Value_System) isValue_Value() {}

type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*StringValue_Dynamic
	//	*StringValue_Expression
	//	*StringValue_Text
	//	*StringValue_Json
	Value isStringValue_Value `protobuf_oneof:"value"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{7}
}

func (m *StringValue) GetValue() isStringValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StringValue) GetDynamic() *DynamicValue {
	if x, ok := x.GetValue().(*StringValue_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *StringValue) GetExpression() string {
	if x, ok := x.GetValue().(*StringValue_Expression); ok {
		return x.Expression
	}
	return ""
}

func (x *StringValue) GetText() string {
	if x, ok := x.GetValue().(*StringValue_Text); ok {
		return x.Text
	}
	return ""
}

func (x *StringValue) GetJson() string {
	if x, ok := x.GetValue().(*StringValue_Json); ok {
		return x.Json
	}
	return ""
}

type isStringValue_Value interface {
	isStringValue_Value()
}

type StringValue_Dynamic struct {
	Dynamic *DynamicValue `protobuf:"bytes,1,opt,name=dynamic,proto3,oneof"` // 动态值
}

type StringValue_Expression struct {
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3,oneof"` // 表达式
}

type StringValue_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"` // 字符串
}

type StringValue_Json struct {
	Json string `protobuf:"bytes,4,opt,name=json,proto3,oneof"` // 裸json
}

func (*StringValue_Dynamic) isStringValue_Value() {}

func (*StringValue_Expression) isStringValue_Value() {}

func (*StringValue_Text) isStringValue_Value() {}

func (*StringValue_Json) isStringValue_Value() {}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{8}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type People struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  PeopleType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.PeopleType" json:"type,omitempty"`
	Value *Value     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *People) Reset() {
	*x = People{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *People) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*People) ProtoMessage() {}

func (x *People) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use People.ProtoReflect.Descriptor instead.
func (*People) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{9}
}

func (x *People) GetType() PeopleType {
	if x != nil {
		return x.Type
	}
	return PeopleType_User
}

func (x *People) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PeopleByIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    PeopleType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.PeopleType" json:"type,omitempty"`
	IdsJson string     `protobuf:"bytes,2,opt,name=idsJson,proto3" json:"idsJson,omitempty"`
}

func (x *PeopleByIds) Reset() {
	*x = PeopleByIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeopleByIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeopleByIds) ProtoMessage() {}

func (x *PeopleByIds) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeopleByIds.ProtoReflect.Descriptor instead.
func (*PeopleByIds) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{10}
}

func (x *PeopleByIds) GetType() PeopleType {
	if x != nil {
		return x.Type
	}
	return PeopleType_User
}

func (x *PeopleByIds) GetIdsJson() string {
	if x != nil {
		return x.IdsJson
	}
	return ""
}

type TodoOperatorResultsById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[int64]*TodoResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TodoOperatorResultsById) Reset() {
	*x = TodoOperatorResultsById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoOperatorResultsById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoOperatorResultsById) ProtoMessage() {}

func (x *TodoOperatorResultsById) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoOperatorResultsById.ProtoReflect.Descriptor instead.
func (*TodoOperatorResultsById) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{11}
}

func (x *TodoOperatorResultsById) GetResults() map[int64]*TodoResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FormSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId string `protobuf:"bytes,1,opt,name=columnId,proto3" json:"columnId,omitempty"`
	CanRead  bool   `protobuf:"varint,2,opt,name=canRead,proto3" json:"canRead,omitempty"`
	CanWrite bool   `protobuf:"varint,3,opt,name=canWrite,proto3" json:"canWrite,omitempty"`
	Required bool   `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *FormSetting) Reset() {
	*x = FormSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormSetting) ProtoMessage() {}

func (x *FormSetting) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormSetting.ProtoReflect.Descriptor instead.
func (*FormSetting) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{12}
}

func (x *FormSetting) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *FormSetting) GetCanRead() bool {
	if x != nil {
		return x.CanRead
	}
	return false
}

func (x *FormSetting) GetCanWrite() bool {
	if x != nil {
		return x.CanWrite
	}
	return false
}

func (x *FormSetting) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type FilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *DataFromNode      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"` // 数据源
	ColumnId  string             `protobuf:"bytes,2,opt,name=columnId,proto3" json:"columnId,omitempty"`
	FieldType string             `protobuf:"bytes,3,opt,name=fieldType,proto3" json:"fieldType,omitempty"`
	Type      string             `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Props     *structpb.Struct   `protobuf:"bytes,5,opt,name=props,proto3" json:"props,omitempty"`
	Value     *Value             `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Conds     []*FilterCondition `protobuf:"bytes,7,rep,name=conds,proto3" json:"conds,omitempty"`
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{13}
}

func (x *FilterCondition) GetSource() *DataFromNode {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FilterCondition) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *FilterCondition) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *FilterCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FilterCondition) GetProps() *structpb.Struct {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *FilterCondition) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FilterCondition) GetConds() []*FilterCondition {
	if x != nil {
		return x.Conds
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Condition *FilterCondition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"` // 筛选条件
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{14}
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetCondition() *FilterCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId string `protobuf:"bytes,1,opt,name=columnId,proto3" json:"columnId,omitempty"`
	Asc      bool   `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{15}
}

func (x *Order) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *Order) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

type StringMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old string `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New string `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *StringMapping) Reset() {
	*x = StringMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMapping) ProtoMessage() {}

func (x *StringMapping) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMapping.ProtoReflect.Descriptor instead.
func (*StringMapping) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{16}
}

func (x *StringMapping) GetOld() string {
	if x != nil {
		return x.Old
	}
	return ""
}

func (x *StringMapping) GetNew() string {
	if x != nil {
		return x.New
	}
	return ""
}

type NumberMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old int64 `protobuf:"varint,1,opt,name=old,proto3" json:"old,omitempty"`
	New int64 `protobuf:"varint,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *NumberMapping) Reset() {
	*x = NumberMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberMapping) ProtoMessage() {}

func (x *NumberMapping) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberMapping.ProtoReflect.Descriptor instead.
func (*NumberMapping) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{17}
}

func (x *NumberMapping) GetOld() int64 {
	if x != nil {
		return x.Old
	}
	return 0
}

func (x *NumberMapping) GetNew() int64 {
	if x != nil {
		return x.New
	}
	return 0
}

type TriggerBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerBy    string `protobuf:"bytes,1,opt,name=triggerBy,proto3" json:"triggerBy,omitempty"`
	WorkflowId   string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflowName,proto3" json:"workflowName,omitempty"`
	ExecutionId  int64  `protobuf:"varint,4,opt,name=executionId,proto3" json:"executionId,omitempty"`
}

func (x *TriggerBy) Reset() {
	*x = TriggerBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerBy) ProtoMessage() {}

func (x *TriggerBy) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerBy.ProtoReflect.Descriptor instead.
func (*TriggerBy) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{18}
}

func (x *TriggerBy) GetTriggerBy() string {
	if x != nil {
		return x.TriggerBy
	}
	return ""
}

func (x *TriggerBy) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TriggerBy) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *TriggerBy) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type NodeType `protobuf:"varint,3,opt,name=type,proto3,enum=automation.v1.NodeType" json:"type,omitempty"`
	// Types that are assignable to Parameters:
	//	*Node_ActionAudit
	//	*Node_ActionCreateData
	//	*Node_ActionFillIn
	//	*Node_ActionFork
	//	*Node_ActionGroupAuditFlow
	//	*Node_ActionListData
	//	*Node_ActionMerge
	//	*Node_ActionUpdateData
	//	*Node_ActionCode
	//	*Node_TriggerCron
	//	*Node_TriggerDataEvent
	//	*Node_TriggerOrgEvent
	//	*Node_TriggerWebhook
	//	*Node_ActionFindData
	//	*Node_TriggerDateColumnCron
	//	*Node_TriggerUserEvent
	//	*Node_ActionMysql
	//	*Node_ActionPostgres
	//	*Node_ActionCopyData
	//	*Node_ActionSendEmail
	//	*Node_ActionSendCardFeishu
	//	*Node_ActionSendCardDingTalk
	//	*Node_ActionSendCardWeCom
	//	*Node_ActionGroupLoop
	Parameters isNode_Parameters `protobuf_oneof:"parameters"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{19}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_TriggerCron
}

func (m *Node) GetParameters() isNode_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *Node) GetActionAudit() *ParameterActionAudit {
	if x, ok := x.GetParameters().(*Node_ActionAudit); ok {
		return x.ActionAudit
	}
	return nil
}

func (x *Node) GetActionCreateData() *ParameterActionCreateData {
	if x, ok := x.GetParameters().(*Node_ActionCreateData); ok {
		return x.ActionCreateData
	}
	return nil
}

func (x *Node) GetActionFillIn() *ParameterActionFillIn {
	if x, ok := x.GetParameters().(*Node_ActionFillIn); ok {
		return x.ActionFillIn
	}
	return nil
}

func (x *Node) GetActionFork() *ParameterActionFork {
	if x, ok := x.GetParameters().(*Node_ActionFork); ok {
		return x.ActionFork
	}
	return nil
}

func (x *Node) GetActionGroupAuditFlow() *ParameterActionGroupAuditFlow {
	if x, ok := x.GetParameters().(*Node_ActionGroupAuditFlow); ok {
		return x.ActionGroupAuditFlow
	}
	return nil
}

func (x *Node) GetActionListData() *ParameterActionListData {
	if x, ok := x.GetParameters().(*Node_ActionListData); ok {
		return x.ActionListData
	}
	return nil
}

func (x *Node) GetActionMerge() *ParameterActionMerge {
	if x, ok := x.GetParameters().(*Node_ActionMerge); ok {
		return x.ActionMerge
	}
	return nil
}

func (x *Node) GetActionUpdateData() *ParameterActionUpdateData {
	if x, ok := x.GetParameters().(*Node_ActionUpdateData); ok {
		return x.ActionUpdateData
	}
	return nil
}

func (x *Node) GetActionCode() *ParameterActionCode {
	if x, ok := x.GetParameters().(*Node_ActionCode); ok {
		return x.ActionCode
	}
	return nil
}

func (x *Node) GetTriggerCron() *ParameterTriggerCron {
	if x, ok := x.GetParameters().(*Node_TriggerCron); ok {
		return x.TriggerCron
	}
	return nil
}

func (x *Node) GetTriggerDataEvent() *ParameterTriggerDataEvent {
	if x, ok := x.GetParameters().(*Node_TriggerDataEvent); ok {
		return x.TriggerDataEvent
	}
	return nil
}

func (x *Node) GetTriggerOrgEvent() *ParameterTriggerOrgEvent {
	if x, ok := x.GetParameters().(*Node_TriggerOrgEvent); ok {
		return x.TriggerOrgEvent
	}
	return nil
}

func (x *Node) GetTriggerWebhook() *ParameterTriggerWebhook {
	if x, ok := x.GetParameters().(*Node_TriggerWebhook); ok {
		return x.TriggerWebhook
	}
	return nil
}

func (x *Node) GetActionFindData() *ParameterActionFindData {
	if x, ok := x.GetParameters().(*Node_ActionFindData); ok {
		return x.ActionFindData
	}
	return nil
}

func (x *Node) GetTriggerDateColumnCron() *ParameterTriggerDateColumnCron {
	if x, ok := x.GetParameters().(*Node_TriggerDateColumnCron); ok {
		return x.TriggerDateColumnCron
	}
	return nil
}

func (x *Node) GetTriggerUserEvent() *ParameterTriggerUserEvent {
	if x, ok := x.GetParameters().(*Node_TriggerUserEvent); ok {
		return x.TriggerUserEvent
	}
	return nil
}

func (x *Node) GetActionMysql() *ParameterActionMysql {
	if x, ok := x.GetParameters().(*Node_ActionMysql); ok {
		return x.ActionMysql
	}
	return nil
}

func (x *Node) GetActionPostgres() *ParameterActionPostgres {
	if x, ok := x.GetParameters().(*Node_ActionPostgres); ok {
		return x.ActionPostgres
	}
	return nil
}

func (x *Node) GetActionCopyData() *ParameterActionCopyData {
	if x, ok := x.GetParameters().(*Node_ActionCopyData); ok {
		return x.ActionCopyData
	}
	return nil
}

func (x *Node) GetActionSendEmail() *ParameterActionSendEmail {
	if x, ok := x.GetParameters().(*Node_ActionSendEmail); ok {
		return x.ActionSendEmail
	}
	return nil
}

func (x *Node) GetActionSendCardFeishu() *ParameterActionSendCardFeishu {
	if x, ok := x.GetParameters().(*Node_ActionSendCardFeishu); ok {
		return x.ActionSendCardFeishu
	}
	return nil
}

func (x *Node) GetActionSendCardDingTalk() *ParameterActionSendCardDingTalk {
	if x, ok := x.GetParameters().(*Node_ActionSendCardDingTalk); ok {
		return x.ActionSendCardDingTalk
	}
	return nil
}

func (x *Node) GetActionSendCardWeCom() *ParameterActionSendCardWeCom {
	if x, ok := x.GetParameters().(*Node_ActionSendCardWeCom); ok {
		return x.ActionSendCardWeCom
	}
	return nil
}

func (x *Node) GetActionGroupLoop() *ParameterActionGroupLoop {
	if x, ok := x.GetParameters().(*Node_ActionGroupLoop); ok {
		return x.ActionGroupLoop
	}
	return nil
}

type isNode_Parameters interface {
	isNode_Parameters()
}

type Node_ActionAudit struct {
	ActionAudit *ParameterActionAudit `protobuf:"bytes,4,opt,name=actionAudit,proto3,oneof"`
}

type Node_ActionCreateData struct {
	ActionCreateData *ParameterActionCreateData `protobuf:"bytes,5,opt,name=actionCreateData,proto3,oneof"`
}

type Node_ActionFillIn struct {
	ActionFillIn *ParameterActionFillIn `protobuf:"bytes,6,opt,name=actionFillIn,proto3,oneof"`
}

type Node_ActionFork struct {
	ActionFork *ParameterActionFork `protobuf:"bytes,7,opt,name=actionFork,proto3,oneof"`
}

type Node_ActionGroupAuditFlow struct {
	ActionGroupAuditFlow *ParameterActionGroupAuditFlow `protobuf:"bytes,8,opt,name=actionGroupAuditFlow,proto3,oneof"`
}

type Node_ActionListData struct {
	ActionListData *ParameterActionListData `protobuf:"bytes,9,opt,name=actionListData,proto3,oneof"`
}

type Node_ActionMerge struct {
	ActionMerge *ParameterActionMerge `protobuf:"bytes,10,opt,name=actionMerge,proto3,oneof"`
}

type Node_ActionUpdateData struct {
	ActionUpdateData *ParameterActionUpdateData `protobuf:"bytes,11,opt,name=actionUpdateData,proto3,oneof"`
}

type Node_ActionCode struct {
	ActionCode *ParameterActionCode `protobuf:"bytes,12,opt,name=actionCode,proto3,oneof"`
}

type Node_TriggerCron struct {
	TriggerCron *ParameterTriggerCron `protobuf:"bytes,13,opt,name=triggerCron,proto3,oneof"`
}

type Node_TriggerDataEvent struct {
	TriggerDataEvent *ParameterTriggerDataEvent `protobuf:"bytes,14,opt,name=triggerDataEvent,proto3,oneof"`
}

type Node_TriggerOrgEvent struct {
	TriggerOrgEvent *ParameterTriggerOrgEvent `protobuf:"bytes,15,opt,name=triggerOrgEvent,proto3,oneof"`
}

type Node_TriggerWebhook struct {
	TriggerWebhook *ParameterTriggerWebhook `protobuf:"bytes,16,opt,name=triggerWebhook,proto3,oneof"`
}

type Node_ActionFindData struct {
	ActionFindData *ParameterActionFindData `protobuf:"bytes,17,opt,name=actionFindData,proto3,oneof"`
}

type Node_TriggerDateColumnCron struct {
	TriggerDateColumnCron *ParameterTriggerDateColumnCron `protobuf:"bytes,18,opt,name=triggerDateColumnCron,proto3,oneof"`
}

type Node_TriggerUserEvent struct {
	TriggerUserEvent *ParameterTriggerUserEvent `protobuf:"bytes,19,opt,name=triggerUserEvent,proto3,oneof"`
}

type Node_ActionMysql struct {
	ActionMysql *ParameterActionMysql `protobuf:"bytes,20,opt,name=actionMysql,proto3,oneof"`
}

type Node_ActionPostgres struct {
	ActionPostgres *ParameterActionPostgres `protobuf:"bytes,21,opt,name=actionPostgres,proto3,oneof"`
}

type Node_ActionCopyData struct {
	ActionCopyData *ParameterActionCopyData `protobuf:"bytes,22,opt,name=actionCopyData,proto3,oneof"`
}

type Node_ActionSendEmail struct {
	ActionSendEmail *ParameterActionSendEmail `protobuf:"bytes,23,opt,name=actionSendEmail,proto3,oneof"`
}

type Node_ActionSendCardFeishu struct {
	ActionSendCardFeishu *ParameterActionSendCardFeishu `protobuf:"bytes,24,opt,name=actionSendCardFeishu,proto3,oneof"`
}

type Node_ActionSendCardDingTalk struct {
	ActionSendCardDingTalk *ParameterActionSendCardDingTalk `protobuf:"bytes,25,opt,name=actionSendCardDingTalk,proto3,oneof"`
}

type Node_ActionSendCardWeCom struct {
	ActionSendCardWeCom *ParameterActionSendCardWeCom `protobuf:"bytes,26,opt,name=actionSendCardWeCom,proto3,oneof"`
}

type Node_ActionGroupLoop struct {
	ActionGroupLoop *ParameterActionGroupLoop `protobuf:"bytes,27,opt,name=actionGroupLoop,proto3,oneof"`
}

func (*Node_ActionAudit) isNode_Parameters() {}

func (*Node_ActionCreateData) isNode_Parameters() {}

func (*Node_ActionFillIn) isNode_Parameters() {}

func (*Node_ActionFork) isNode_Parameters() {}

func (*Node_ActionGroupAuditFlow) isNode_Parameters() {}

func (*Node_ActionListData) isNode_Parameters() {}

func (*Node_ActionMerge) isNode_Parameters() {}

func (*Node_ActionUpdateData) isNode_Parameters() {}

func (*Node_ActionCode) isNode_Parameters() {}

func (*Node_TriggerCron) isNode_Parameters() {}

func (*Node_TriggerDataEvent) isNode_Parameters() {}

func (*Node_TriggerOrgEvent) isNode_Parameters() {}

func (*Node_TriggerWebhook) isNode_Parameters() {}

func (*Node_ActionFindData) isNode_Parameters() {}

func (*Node_TriggerDateColumnCron) isNode_Parameters() {}

func (*Node_TriggerUserEvent) isNode_Parameters() {}

func (*Node_ActionMysql) isNode_Parameters() {}

func (*Node_ActionPostgres) isNode_Parameters() {}

func (*Node_ActionCopyData) isNode_Parameters() {}

func (*Node_ActionSendEmail) isNode_Parameters() {}

func (*Node_ActionSendCardFeishu) isNode_Parameters() {}

func (*Node_ActionSendCardDingTalk) isNode_Parameters() {}

func (*Node_ActionSendCardWeCom) isNode_Parameters() {}

func (*Node_ActionGroupLoop) isNode_Parameters() {}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{20}
}

func (x *Nodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId    string `protobuf:"bytes,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromIndex int32  `protobuf:"varint,2,opt,name=fromIndex,proto3" json:"fromIndex,omitempty"`
	ToId      string `protobuf:"bytes,3,opt,name=toId,proto3" json:"toId,omitempty"`
	ToIndex   int32  `protobuf:"varint,4,opt,name=toIndex,proto3" json:"toIndex,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{21}
}

func (x *Connection) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *Connection) GetFromIndex() int32 {
	if x != nil {
		return x.FromIndex
	}
	return 0
}

func (x *Connection) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *Connection) GetToIndex() int32 {
	if x != nil {
		return x.ToIndex
	}
	return 0
}

type Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *Connections) Reset() {
	*x = Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connections) ProtoMessage() {}

func (x *Connections) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connections.ProtoReflect.Descriptor instead.
func (*Connections) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{22}
}

func (x *Connections) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type WorkflowMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId           int64    `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AppId           string   `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	Name            string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Desc            string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Active          bool     `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	ActiveVersionId string   `protobuf:"bytes,7,opt,name=activeVersionId,proto3" json:"activeVersionId,omitempty"`
	VersionId       string   `protobuf:"bytes,8,opt,name=versionId,proto3" json:"versionId,omitempty"`
	TriggerType     NodeType `protobuf:"varint,9,opt,name=triggerType,proto3,enum=automation.v1.NodeType" json:"triggerType,omitempty"`
	FailedTimes     int64    `protobuf:"varint,10,opt,name=failedTimes,proto3" json:"failedTimes,omitempty"`
	Creator         int64    `protobuf:"varint,11,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater         int64    `protobuf:"varint,12,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatedAt       int64    `protobuf:"varint,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       int64    `protobuf:"varint,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatorName     string   `protobuf:"bytes,15,opt,name=creatorName,proto3" json:"creatorName,omitempty"`
	UpdaterName     string   `protobuf:"bytes,16,opt,name=updaterName,proto3" json:"updaterName,omitempty"`
}

func (x *WorkflowMeta) Reset() {
	*x = WorkflowMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowMeta) ProtoMessage() {}

func (x *WorkflowMeta) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowMeta.ProtoReflect.Descriptor instead.
func (*WorkflowMeta) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{23}
}

func (x *WorkflowMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowMeta) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *WorkflowMeta) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WorkflowMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowMeta) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WorkflowMeta) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *WorkflowMeta) GetActiveVersionId() string {
	if x != nil {
		return x.ActiveVersionId
	}
	return ""
}

func (x *WorkflowMeta) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *WorkflowMeta) GetTriggerType() NodeType {
	if x != nil {
		return x.TriggerType
	}
	return NodeType_TriggerCron
}

func (x *WorkflowMeta) GetFailedTimes() int64 {
	if x != nil {
		return x.FailedTimes
	}
	return 0
}

func (x *WorkflowMeta) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *WorkflowMeta) GetUpdater() int64 {
	if x != nil {
		return x.Updater
	}
	return 0
}

func (x *WorkflowMeta) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WorkflowMeta) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *WorkflowMeta) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *WorkflowMeta) GetUpdaterName() string {
	if x != nil {
		return x.UpdaterName
	}
	return ""
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId           int64         `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AppId           string        `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	Name            string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Desc            string        `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Active          bool          `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	ActiveVersionId string        `protobuf:"bytes,7,opt,name=activeVersionId,proto3" json:"activeVersionId,omitempty"`
	VersionId       string        `protobuf:"bytes,8,opt,name=versionId,proto3" json:"versionId,omitempty"`
	TriggerType     NodeType      `protobuf:"varint,9,opt,name=triggerType,proto3,enum=automation.v1.NodeType" json:"triggerType,omitempty"`
	FailedTimes     int64         `protobuf:"varint,10,opt,name=failedTimes,proto3" json:"failedTimes,omitempty"`
	Creator         int64         `protobuf:"varint,11,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater         int64         `protobuf:"varint,12,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatedAt       int64         `protobuf:"varint,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       int64         `protobuf:"varint,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatorName     string        `protobuf:"bytes,15,opt,name=creatorName,proto3" json:"creatorName,omitempty"`
	UpdaterName     string        `protobuf:"bytes,16,opt,name=updaterName,proto3" json:"updaterName,omitempty"`
	Nodes           []*Node       `protobuf:"bytes,17,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Connections     []*Connection `protobuf:"bytes,18,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{24}
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *Workflow) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Workflow) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Workflow) GetActiveVersionId() string {
	if x != nil {
		return x.ActiveVersionId
	}
	return ""
}

func (x *Workflow) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *Workflow) GetTriggerType() NodeType {
	if x != nil {
		return x.TriggerType
	}
	return NodeType_TriggerCron
}

func (x *Workflow) GetFailedTimes() int64 {
	if x != nil {
		return x.FailedTimes
	}
	return 0
}

func (x *Workflow) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *Workflow) GetUpdater() int64 {
	if x != nil {
		return x.Updater
	}
	return 0
}

func (x *Workflow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Workflow) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Workflow) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *Workflow) GetUpdaterName() string {
	if x != nil {
		return x.UpdaterName
	}
	return ""
}

func (x *Workflow) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Workflow) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type WorkflowInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string        `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Nodes       []*Node       `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Connections []*Connection `protobuf:"bytes,4,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *WorkflowInput) Reset() {
	*x = WorkflowInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowInput) ProtoMessage() {}

func (x *WorkflowInput) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowInput.ProtoReflect.Descriptor instead.
func (*WorkflowInput) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{25}
}

func (x *WorkflowInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowInput) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WorkflowInput) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *WorkflowInput) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ExecutionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowId string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	Succeed    bool   `protobuf:"varint,3,opt,name=succeed,proto3" json:"succeed,omitempty"`
	StartedAt  int64  `protobuf:"varint,4,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	StoppedAt  int64  `protobuf:"varint,5,opt,name=stoppedAt,proto3" json:"stoppedAt,omitempty"`
	Finished   bool   `protobuf:"varint,6,opt,name=finished,proto3" json:"finished,omitempty"`
	Status     string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ExecutionMeta) Reset() {
	*x = ExecutionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionMeta) ProtoMessage() {}

func (x *ExecutionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionMeta.ProtoReflect.Descriptor instead.
func (*ExecutionMeta) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{26}
}

func (x *ExecutionMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecutionMeta) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ExecutionMeta) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *ExecutionMeta) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *ExecutionMeta) GetStoppedAt() int64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *ExecutionMeta) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *ExecutionMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowId    string           `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	Succeed       bool             `protobuf:"varint,3,opt,name=succeed,proto3" json:"succeed,omitempty"`
	StartedAt     int64            `protobuf:"varint,4,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	StoppedAt     int64            `protobuf:"varint,5,opt,name=stoppedAt,proto3" json:"stoppedAt,omitempty"`
	Nodes         []*NodeExecution `protobuf:"bytes,6,rep,name=nodes,proto3" json:"nodes,omitempty"`
	WorkflowNodes []*Node          `protobuf:"bytes,7,rep,name=workflowNodes,proto3" json:"workflowNodes,omitempty"`
	Finished      bool             `protobuf:"varint,8,opt,name=finished,proto3" json:"finished,omitempty"`
	Status        string           `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{27}
}

func (x *Execution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Execution) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *Execution) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *Execution) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Execution) GetStoppedAt() int64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *Execution) GetNodes() []*NodeExecution {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Execution) GetWorkflowNodes() []*Node {
	if x != nil {
		return x.WorkflowNodes
	}
	return nil
}

func (x *Execution) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *Execution) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type NodeExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Succeed        bool             `protobuf:"varint,2,opt,name=succeed,proto3" json:"succeed,omitempty"`
	ExecutionTime  int64            `protobuf:"varint,3,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	Data           *structpb.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	PreviousId     string           `protobuf:"bytes,5,opt,name=previousId,proto3" json:"previousId,omitempty"`
	PreviousRunIdx int32            `protobuf:"varint,6,opt,name=previousRunIdx,proto3" json:"previousRunIdx,omitempty"`
	StartTime      int64            `protobuf:"varint,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	RunIdx         int32            `protobuf:"varint,8,opt,name=runIdx,proto3" json:"runIdx,omitempty"`
	Finished       bool             `protobuf:"varint,9,opt,name=finished,proto3" json:"finished,omitempty"`
	Waiting        bool             `protobuf:"varint,10,opt,name=waiting,proto3" json:"waiting,omitempty"`
}

func (x *NodeExecution) Reset() {
	*x = NodeExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeExecution) ProtoMessage() {}

func (x *NodeExecution) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeExecution.ProtoReflect.Descriptor instead.
func (*NodeExecution) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{28}
}

func (x *NodeExecution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeExecution) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *NodeExecution) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *NodeExecution) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NodeExecution) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *NodeExecution) GetPreviousRunIdx() int32 {
	if x != nil {
		return x.PreviousRunIdx
	}
	return 0
}

func (x *NodeExecution) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *NodeExecution) GetRunIdx() int32 {
	if x != nil {
		return x.RunIdx
	}
	return 0
}

func (x *NodeExecution) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *NodeExecution) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

type Todo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId                  int64      `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AppId                  string     `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId                string     `protobuf:"bytes,4,opt,name=tableId,proto3" json:"tableId,omitempty"`
	IssueId                int64      `protobuf:"varint,5,opt,name=issueId,proto3" json:"issueId,omitempty"`
	WorkflowId             string     `protobuf:"bytes,6,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowName           string     `protobuf:"bytes,7,opt,name=workflowName,proto3" json:"workflowName,omitempty"`
	AuditFlowName          string     `protobuf:"bytes,8,opt,name=auditFlowName,proto3" json:"auditFlowName,omitempty"`
	ExecutionId            int64      `protobuf:"varint,9,opt,name=executionId,proto3" json:"executionId,omitempty"`
	TriggerUserId          int64      `protobuf:"varint,10,opt,name=triggerUserId,proto3" json:"triggerUserId,omitempty"`
	AllowWithdrawByTrigger bool       `protobuf:"varint,11,opt,name=allowWithdrawByTrigger,proto3" json:"allowWithdrawByTrigger,omitempty"`
	AllowUrgeByTrigger     bool       `protobuf:"varint,12,opt,name=allowUrgeByTrigger,proto3" json:"allowUrgeByTrigger,omitempty"`
	Type                   TodoType   `protobuf:"varint,13,opt,name=type,proto3,enum=automation.v1.TodoType" json:"type,omitempty"`
	Status                 TodoStatus `protobuf:"varint,14,opt,name=status,proto3,enum=automation.v1.TodoStatus" json:"status,omitempty"`
	// Types that are assignable to Parameters:
	//	*Todo_TodoAudit
	//	*Todo_TodoFillIn
	Parameters  isTodo_Parameters     `protobuf_oneof:"parameters"`
	Operators   map[int64]*TodoResult `protobuf:"bytes,17,rep,name=operators,proto3" json:"operators,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator     int64                 `protobuf:"varint,18,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater     int64                 `protobuf:"varint,19,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatedAt   int64                 `protobuf:"varint,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   int64                 `protobuf:"varint,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AuditFlowId string                `protobuf:"bytes,22,opt,name=auditFlowId,proto3" json:"auditFlowId,omitempty"`
	IssueTitle  string                `protobuf:"bytes,23,opt,name=issueTitle,proto3" json:"issueTitle,omitempty"`
}

func (x *Todo) Reset() {
	*x = Todo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Todo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Todo) ProtoMessage() {}

func (x *Todo) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Todo.ProtoReflect.Descriptor instead.
func (*Todo) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{29}
}

func (x *Todo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Todo) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *Todo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Todo) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *Todo) GetIssueId() int64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *Todo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *Todo) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *Todo) GetAuditFlowName() string {
	if x != nil {
		return x.AuditFlowName
	}
	return ""
}

func (x *Todo) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

func (x *Todo) GetTriggerUserId() int64 {
	if x != nil {
		return x.TriggerUserId
	}
	return 0
}

func (x *Todo) GetAllowWithdrawByTrigger() bool {
	if x != nil {
		return x.AllowWithdrawByTrigger
	}
	return false
}

func (x *Todo) GetAllowUrgeByTrigger() bool {
	if x != nil {
		return x.AllowUrgeByTrigger
	}
	return false
}

func (x *Todo) GetType() TodoType {
	if x != nil {
		return x.Type
	}
	return TodoType_Audit
}

func (x *Todo) GetStatus() TodoStatus {
	if x != nil {
		return x.Status
	}
	return TodoStatus_SUnFinished
}

func (m *Todo) GetParameters() isTodo_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *Todo) GetTodoAudit() *ParameterTodoAudit {
	if x, ok := x.GetParameters().(*Todo_TodoAudit); ok {
		return x.TodoAudit
	}
	return nil
}

func (x *Todo) GetTodoFillIn() *ParameterTodoFillIn {
	if x, ok := x.GetParameters().(*Todo_TodoFillIn); ok {
		return x.TodoFillIn
	}
	return nil
}

func (x *Todo) GetOperators() map[int64]*TodoResult {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *Todo) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *Todo) GetUpdater() int64 {
	if x != nil {
		return x.Updater
	}
	return 0
}

func (x *Todo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Todo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Todo) GetAuditFlowId() string {
	if x != nil {
		return x.AuditFlowId
	}
	return ""
}

func (x *Todo) GetIssueTitle() string {
	if x != nil {
		return x.IssueTitle
	}
	return ""
}

type isTodo_Parameters interface {
	isTodo_Parameters()
}

type Todo_TodoAudit struct {
	TodoAudit *ParameterTodoAudit `protobuf:"bytes,15,opt,name=todoAudit,proto3,oneof"`
}

type Todo_TodoFillIn struct {
	TodoFillIn *ParameterTodoFillIn `protobuf:"bytes,16,opt,name=todoFillIn,proto3,oneof"`
}

func (*Todo_TodoAudit) isTodo_Parameters() {}

func (*Todo_TodoFillIn) isTodo_Parameters() {}

type TodoStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  TodoFilterType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.TodoFilterType" json:"type,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TodoStat) Reset() {
	*x = TodoStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoStat) ProtoMessage() {}

func (x *TodoStat) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoStat.ProtoReflect.Descriptor instead.
func (*TodoStat) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{30}
}

func (x *TodoStat) GetType() TodoFilterType {
	if x != nil {
		return x.Type
	}
	return TodoFilterType_FtWaitingAudit
}

func (x *TodoStat) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TodoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   TodoOp `protobuf:"varint,1,opt,name=op,proto3,enum=automation.v1.TodoOp" json:"op,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	OpAt int64  `protobuf:"varint,3,opt,name=opAt,proto3" json:"opAt,omitempty"`
}

func (x *TodoResult) Reset() {
	*x = TodoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoResult) ProtoMessage() {}

func (x *TodoResult) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoResult.ProtoReflect.Descriptor instead.
func (*TodoResult) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{31}
}

func (x *TodoResult) GetOp() TodoOp {
	if x != nil {
		return x.Op
	}
	return TodoOp_OpInit
}

func (x *TodoResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TodoResult) GetOpAt() int64 {
	if x != nil {
		return x.OpAt
	}
	return 0
}

type ParameterTodoAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignMode     SignMode       `protobuf:"varint,1,opt,name=signMode,proto3,enum=automation.v1.SignMode" json:"signMode,omitempty"`
	FormSettings []*FormSetting `protobuf:"bytes,2,rep,name=formSettings,proto3" json:"formSettings,omitempty"`
}

func (x *ParameterTodoAudit) Reset() {
	*x = ParameterTodoAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTodoAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTodoAudit) ProtoMessage() {}

func (x *ParameterTodoAudit) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTodoAudit.ProtoReflect.Descriptor instead.
func (*ParameterTodoAudit) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{32}
}

func (x *ParameterTodoAudit) GetSignMode() SignMode {
	if x != nil {
		return x.SignMode
	}
	return SignMode_Or
}

func (x *ParameterTodoAudit) GetFormSettings() []*FormSetting {
	if x != nil {
		return x.FormSettings
	}
	return nil
}

type ParameterTodoFillIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormSettings []*FormSetting `protobuf:"bytes,1,rep,name=formSettings,proto3" json:"formSettings,omitempty"`
}

func (x *ParameterTodoFillIn) Reset() {
	*x = ParameterTodoFillIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTodoFillIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTodoFillIn) ProtoMessage() {}

func (x *ParameterTodoFillIn) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTodoFillIn.ProtoReflect.Descriptor instead.
func (*ParameterTodoFillIn) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{33}
}

func (x *ParameterTodoFillIn) GetFormSettings() []*FormSetting {
	if x != nil {
		return x.FormSettings
	}
	return nil
}

type ParameterActionCreateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string      `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId   string      `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	KeyValues []*KeyValue `protobuf:"bytes,3,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
}

func (x *ParameterActionCreateData) Reset() {
	*x = ParameterActionCreateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionCreateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionCreateData) ProtoMessage() {}

func (x *ParameterActionCreateData) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionCreateData.ProtoReflect.Descriptor instead.
func (*ParameterActionCreateData) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{34}
}

func (x *ParameterActionCreateData) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParameterActionCreateData) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ParameterActionCreateData) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type ParameterActionCopyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string        `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId    string        `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Source     *DataFromNode `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	KeyValues  []*KeyValue   `protobuf:"bytes,4,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
	StaticCopy bool          `protobuf:"varint,5,opt,name=staticCopy,proto3" json:"staticCopy,omitempty"`
}

func (x *ParameterActionCopyData) Reset() {
	*x = ParameterActionCopyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionCopyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionCopyData) ProtoMessage() {}

func (x *ParameterActionCopyData) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionCopyData.ProtoReflect.Descriptor instead.
func (*ParameterActionCopyData) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{35}
}

func (x *ParameterActionCopyData) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParameterActionCopyData) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ParameterActionCopyData) GetSource() *DataFromNode {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ParameterActionCopyData) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

func (x *ParameterActionCopyData) GetStaticCopy() bool {
	if x != nil {
		return x.StaticCopy
	}
	return false
}

type ParameterActionUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *DataFromNode `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	KeyValues []*KeyValue   `protobuf:"bytes,2,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
}

func (x *ParameterActionUpdateData) Reset() {
	*x = ParameterActionUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionUpdateData) ProtoMessage() {}

func (x *ParameterActionUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionUpdateData.ProtoReflect.Descriptor instead.
func (*ParameterActionUpdateData) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{36}
}

func (x *ParameterActionUpdateData) GetSource() *DataFromNode {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ParameterActionUpdateData) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type ParameterActionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string           `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId         string           `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Condition       *FilterCondition `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	ColumnIds       []string         `protobuf:"bytes,4,rep,name=columnIds,proto3" json:"columnIds,omitempty"`
	Orders          []*Order         `protobuf:"bytes,5,rep,name=orders,proto3" json:"orders,omitempty"`
	IncludeChildren bool             `protobuf:"varint,6,opt,name=includeChildren,proto3" json:"includeChildren,omitempty"`
	Limit           int32            `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ParameterActionListData) Reset() {
	*x = ParameterActionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionListData) ProtoMessage() {}

func (x *ParameterActionListData) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionListData.ProtoReflect.Descriptor instead.
func (*ParameterActionListData) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{37}
}

func (x *ParameterActionListData) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParameterActionListData) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ParameterActionListData) GetCondition() *FilterCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ParameterActionListData) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *ParameterActionListData) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ParameterActionListData) GetIncludeChildren() bool {
	if x != nil {
		return x.IncludeChildren
	}
	return false
}

func (x *ParameterActionListData) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ParameterActionFindData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string           `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId   string           `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Condition *FilterCondition `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	ColumnIds []string         `protobuf:"bytes,4,rep,name=columnIds,proto3" json:"columnIds,omitempty"`
	Orders    []*Order         `protobuf:"bytes,5,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *ParameterActionFindData) Reset() {
	*x = ParameterActionFindData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionFindData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionFindData) ProtoMessage() {}

func (x *ParameterActionFindData) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionFindData.ProtoReflect.Descriptor instead.
func (*ParameterActionFindData) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{38}
}

func (x *ParameterActionFindData) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParameterActionFindData) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ParameterActionFindData) GetCondition() *FilterCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ParameterActionFindData) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *ParameterActionFindData) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type ParameterActionAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators    []*People      `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
	SignMode     SignMode       `protobuf:"varint,2,opt,name=signMode,proto3,enum=automation.v1.SignMode" json:"signMode,omitempty"`
	FormSettings []*FormSetting `protobuf:"bytes,3,rep,name=formSettings,proto3" json:"formSettings,omitempty"`
}

func (x *ParameterActionAudit) Reset() {
	*x = ParameterActionAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionAudit) ProtoMessage() {}

func (x *ParameterActionAudit) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionAudit.ProtoReflect.Descriptor instead.
func (*ParameterActionAudit) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{39}
}

func (x *ParameterActionAudit) GetOperators() []*People {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *ParameterActionAudit) GetSignMode() SignMode {
	if x != nil {
		return x.SignMode
	}
	return SignMode_Or
}

func (x *ParameterActionAudit) GetFormSettings() []*FormSetting {
	if x != nil {
		return x.FormSettings
	}
	return nil
}

type ParameterActionFillIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators    []*People      `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
	FormSettings []*FormSetting `protobuf:"bytes,2,rep,name=formSettings,proto3" json:"formSettings,omitempty"`
}

func (x *ParameterActionFillIn) Reset() {
	*x = ParameterActionFillIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionFillIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionFillIn) ProtoMessage() {}

func (x *ParameterActionFillIn) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionFillIn.ProtoReflect.Descriptor instead.
func (*ParameterActionFillIn) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{40}
}

func (x *ParameterActionFillIn) GetOperators() []*People {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *ParameterActionFillIn) GetFormSettings() []*FormSetting {
	if x != nil {
		return x.FormSettings
	}
	return nil
}

type ParameterActionFork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ForkType  `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.ForkType" json:"type,omitempty"`
	Filters []*Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ParameterActionFork) Reset() {
	*x = ParameterActionFork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionFork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionFork) ProtoMessage() {}

func (x *ParameterActionFork) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionFork.ProtoReflect.Descriptor instead.
func (*ParameterActionFork) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{41}
}

func (x *ParameterActionFork) GetType() ForkType {
	if x != nil {
		return x.Type
	}
	return ForkType_Comprehensive
}

func (x *ParameterActionFork) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ParameterActionGroupAuditFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes       []*Node                               `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Connections []*Connection                         `protobuf:"bytes,2,rep,name=connections,proto3" json:"connections,omitempty"`
	Setting     *ParameterActionGroupSettingAuditFlow `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *ParameterActionGroupAuditFlow) Reset() {
	*x = ParameterActionGroupAuditFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionGroupAuditFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionGroupAuditFlow) ProtoMessage() {}

func (x *ParameterActionGroupAuditFlow) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionGroupAuditFlow.ProtoReflect.Descriptor instead.
func (*ParameterActionGroupAuditFlow) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{42}
}

func (x *ParameterActionGroupAuditFlow) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ParameterActionGroupAuditFlow) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ParameterActionGroupAuditFlow) GetSetting() *ParameterActionGroupSettingAuditFlow {
	if x != nil {
		return x.Setting
	}
	return nil
}

type ParameterActionGroupSettingAuditFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source                 *DataFromNode `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Trigger                *Value        `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	AllowWithdrawByTrigger bool          `protobuf:"varint,4,opt,name=allowWithdrawByTrigger,proto3" json:"allowWithdrawByTrigger,omitempty"`
	AllowUrgeByTrigger     bool          `protobuf:"varint,5,opt,name=allowUrgeByTrigger,proto3" json:"allowUrgeByTrigger,omitempty"`
}

func (x *ParameterActionGroupSettingAuditFlow) Reset() {
	*x = ParameterActionGroupSettingAuditFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionGroupSettingAuditFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionGroupSettingAuditFlow) ProtoMessage() {}

func (x *ParameterActionGroupSettingAuditFlow) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionGroupSettingAuditFlow.ProtoReflect.Descriptor instead.
func (*ParameterActionGroupSettingAuditFlow) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{43}
}

func (x *ParameterActionGroupSettingAuditFlow) GetSource() *DataFromNode {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ParameterActionGroupSettingAuditFlow) GetTrigger() *Value {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *ParameterActionGroupSettingAuditFlow) GetAllowWithdrawByTrigger() bool {
	if x != nil {
		return x.AllowWithdrawByTrigger
	}
	return false
}

func (x *ParameterActionGroupSettingAuditFlow) GetAllowUrgeByTrigger() bool {
	if x != nil {
		return x.AllowUrgeByTrigger
	}
	return false
}

type ParameterActionGroupLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes       []*Node       `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Connections []*Connection `protobuf:"bytes,2,rep,name=connections,proto3" json:"connections,omitempty"`
	Source      *DataFromNode `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // 数据源
}

func (x *ParameterActionGroupLoop) Reset() {
	*x = ParameterActionGroupLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionGroupLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionGroupLoop) ProtoMessage() {}

func (x *ParameterActionGroupLoop) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionGroupLoop.ProtoReflect.Descriptor instead.
func (*ParameterActionGroupLoop) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{44}
}

func (x *ParameterActionGroupLoop) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ParameterActionGroupLoop) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ParameterActionGroupLoop) GetSource() *DataFromNode {
	if x != nil {
		return x.Source
	}
	return nil
}

type ParameterActionMerge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForkNode string `protobuf:"bytes,1,opt,name=forkNode,proto3" json:"forkNode,omitempty"`
}

func (x *ParameterActionMerge) Reset() {
	*x = ParameterActionMerge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionMerge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionMerge) ProtoMessage() {}

func (x *ParameterActionMerge) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionMerge.ProtoReflect.Descriptor instead.
func (*ParameterActionMerge) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{45}
}

func (x *ParameterActionMerge) GetForkNode() string {
	if x != nil {
		return x.ForkNode
	}
	return ""
}

type ParameterActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *StringValue `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ParameterActionCode) Reset() {
	*x = ParameterActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionCode) ProtoMessage() {}

func (x *ParameterActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionCode.ProtoReflect.Descriptor instead.
func (*ParameterActionCode) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{46}
}

func (x *ParameterActionCode) GetCode() *StringValue {
	if x != nil {
		return x.Code
	}
	return nil
}

type ParameterTriggerCron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CronType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.CronType" json:"type,omitempty"`
	// Types that are assignable to Parameters:
	//	*ParameterTriggerCron_Minutes
	//	*ParameterTriggerCron_Hours
	//	*ParameterTriggerCron_Days
	//	*ParameterTriggerCron_Weeks
	//	*ParameterTriggerCron_Months
	//	*ParameterTriggerCron_NoRepeat
	Parameters isParameterTriggerCron_Parameters `protobuf_oneof:"parameters"`
}

func (x *ParameterTriggerCron) Reset() {
	*x = ParameterTriggerCron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCron) ProtoMessage() {}

func (x *ParameterTriggerCron) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCron.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCron) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{47}
}

func (x *ParameterTriggerCron) GetType() CronType {
	if x != nil {
		return x.Type
	}
	return CronType_Days
}

func (m *ParameterTriggerCron) GetParameters() isParameterTriggerCron_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *ParameterTriggerCron) GetMinutes() *ParameterTriggerCronMinutes {
	if x, ok := x.GetParameters().(*ParameterTriggerCron_Minutes); ok {
		return x.Minutes
	}
	return nil
}

func (x *ParameterTriggerCron) GetHours() *ParameterTriggerCronHours {
	if x, ok := x.GetParameters().(*ParameterTriggerCron_Hours); ok {
		return x.Hours
	}
	return nil
}

func (x *ParameterTriggerCron) GetDays() *ParameterTriggerCronDays {
	if x, ok := x.GetParameters().(*ParameterTriggerCron_Days); ok {
		return x.Days
	}
	return nil
}

func (x *ParameterTriggerCron) GetWeeks() *ParameterTriggerCronWeeks {
	if x, ok := x.GetParameters().(*ParameterTriggerCron_Weeks); ok {
		return x.Weeks
	}
	return nil
}

func (x *ParameterTriggerCron) GetMonths() *ParameterTriggerCronMonths {
	if x, ok := x.GetParameters().(*ParameterTriggerCron_Months); ok {
		return x.Months
	}
	return nil
}

func (x *ParameterTriggerCron) GetNoRepeat() *ParameterTriggerCronNoRepeat {
	if x, ok := x.GetParameters().(*ParameterTriggerCron_NoRepeat); ok {
		return x.NoRepeat
	}
	return nil
}

type isParameterTriggerCron_Parameters interface {
	isParameterTriggerCron_Parameters()
}

type ParameterTriggerCron_Minutes struct {
	Minutes *ParameterTriggerCronMinutes `protobuf:"bytes,2,opt,name=minutes,proto3,oneof"`
}

type ParameterTriggerCron_Hours struct {
	Hours *ParameterTriggerCronHours `protobuf:"bytes,3,opt,name=hours,proto3,oneof"`
}

type ParameterTriggerCron_Days struct {
	Days *ParameterTriggerCronDays `protobuf:"bytes,4,opt,name=days,proto3,oneof"`
}

type ParameterTriggerCron_Weeks struct {
	Weeks *ParameterTriggerCronWeeks `protobuf:"bytes,5,opt,name=weeks,proto3,oneof"`
}

type ParameterTriggerCron_Months struct {
	Months *ParameterTriggerCronMonths `protobuf:"bytes,6,opt,name=months,proto3,oneof"`
}

type ParameterTriggerCron_NoRepeat struct {
	NoRepeat *ParameterTriggerCronNoRepeat `protobuf:"bytes,7,opt,name=noRepeat,proto3,oneof"`
}

func (*ParameterTriggerCron_Minutes) isParameterTriggerCron_Parameters() {}

func (*ParameterTriggerCron_Hours) isParameterTriggerCron_Parameters() {}

func (*ParameterTriggerCron_Days) isParameterTriggerCron_Parameters() {}

func (*ParameterTriggerCron_Weeks) isParameterTriggerCron_Parameters() {}

func (*ParameterTriggerCron_Months) isParameterTriggerCron_Parameters() {}

func (*ParameterTriggerCron_NoRepeat) isParameterTriggerCron_Parameters() {}

type ParameterTriggerCronMinutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParameterTriggerCronMinutes) Reset() {
	*x = ParameterTriggerCronMinutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCronMinutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCronMinutes) ProtoMessage() {}

func (x *ParameterTriggerCronMinutes) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCronMinutes.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCronMinutes) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{48}
}

type ParameterTriggerCronHours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minute int32 `protobuf:"varint,1,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ParameterTriggerCronHours) Reset() {
	*x = ParameterTriggerCronHours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCronHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCronHours) ProtoMessage() {}

func (x *ParameterTriggerCronHours) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCronHours.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCronHours) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{49}
}

func (x *ParameterTriggerCronHours) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type ParameterTriggerCronDays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ParameterTriggerCronDays) Reset() {
	*x = ParameterTriggerCronDays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCronDays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCronDays) ProtoMessage() {}

func (x *ParameterTriggerCronDays) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCronDays.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCronDays) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{50}
}

func (x *ParameterTriggerCronDays) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ParameterTriggerCronDays) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type ParameterTriggerCronWeeks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekday []int32 `protobuf:"varint,1,rep,packed,name=weekday,proto3" json:"weekday,omitempty"`
	Hour    int32   `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute  int32   `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ParameterTriggerCronWeeks) Reset() {
	*x = ParameterTriggerCronWeeks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCronWeeks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCronWeeks) ProtoMessage() {}

func (x *ParameterTriggerCronWeeks) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCronWeeks.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCronWeeks) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{51}
}

func (x *ParameterTriggerCronWeeks) GetWeekday() []int32 {
	if x != nil {
		return x.Weekday
	}
	return nil
}

func (x *ParameterTriggerCronWeeks) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ParameterTriggerCronWeeks) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type ParameterTriggerCronMonths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayOfMonth []int32 `protobuf:"varint,1,rep,packed,name=dayOfMonth,proto3" json:"dayOfMonth,omitempty"`
	Hour       int32   `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute     int32   `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ParameterTriggerCronMonths) Reset() {
	*x = ParameterTriggerCronMonths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCronMonths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCronMonths) ProtoMessage() {}

func (x *ParameterTriggerCronMonths) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCronMonths.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCronMonths) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{52}
}

func (x *ParameterTriggerCronMonths) GetDayOfMonth() []int32 {
	if x != nil {
		return x.DayOfMonth
	}
	return nil
}

func (x *ParameterTriggerCronMonths) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ParameterTriggerCronMonths) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type ParameterTriggerCronNoRepeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year   int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month  int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day    int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Hour   int32 `protobuf:"varint,4,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,5,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ParameterTriggerCronNoRepeat) Reset() {
	*x = ParameterTriggerCronNoRepeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerCronNoRepeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerCronNoRepeat) ProtoMessage() {}

func (x *ParameterTriggerCronNoRepeat) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerCronNoRepeat.ProtoReflect.Descriptor instead.
func (*ParameterTriggerCronNoRepeat) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{53}
}

func (x *ParameterTriggerCronNoRepeat) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ParameterTriggerCronNoRepeat) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ParameterTriggerCronNoRepeat) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ParameterTriggerCronNoRepeat) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ParameterTriggerCronNoRepeat) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type ParameterTriggerDataEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            string           `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId          string           `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Type             DataEventType    `protobuf:"varint,3,opt,name=type,proto3,enum=automation.v1.DataEventType" json:"type,omitempty"`
	UpdatedColumnIds []string         `protobuf:"bytes,4,rep,name=updatedColumnIds,proto3" json:"updatedColumnIds,omitempty"`
	FilterCondition  *FilterCondition `protobuf:"bytes,5,opt,name=filterCondition,proto3" json:"filterCondition,omitempty"`
}

func (x *ParameterTriggerDataEvent) Reset() {
	*x = ParameterTriggerDataEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerDataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerDataEvent) ProtoMessage() {}

func (x *ParameterTriggerDataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerDataEvent.ProtoReflect.Descriptor instead.
func (*ParameterTriggerDataEvent) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{54}
}

func (x *ParameterTriggerDataEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParameterTriggerDataEvent) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ParameterTriggerDataEvent) GetType() DataEventType {
	if x != nil {
		return x.Type
	}
	return DataEventType_DataCreatedOrUpdated
}

func (x *ParameterTriggerDataEvent) GetUpdatedColumnIds() []string {
	if x != nil {
		return x.UpdatedColumnIds
	}
	return nil
}

func (x *ParameterTriggerDataEvent) GetFilterCondition() *FilterCondition {
	if x != nil {
		return x.FilterCondition
	}
	return nil
}

type ParameterTriggerDateColumnCron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string           `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId         string           `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ColumnId        string           `protobuf:"bytes,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
	StartType       CronStartType    `protobuf:"varint,4,opt,name=startType,proto3,enum=automation.v1.CronStartType" json:"startType,omitempty"`
	DeltaTime       int32            `protobuf:"varint,5,opt,name=deltaTime,proto3" json:"deltaTime,omitempty"`
	DeltaTimeUnit   TimeUnit         `protobuf:"varint,6,opt,name=deltaTimeUnit,proto3,enum=automation.v1.TimeUnit" json:"deltaTimeUnit,omitempty"`
	FilterCondition *FilterCondition `protobuf:"bytes,7,opt,name=filterCondition,proto3" json:"filterCondition,omitempty"`
}

func (x *ParameterTriggerDateColumnCron) Reset() {
	*x = ParameterTriggerDateColumnCron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerDateColumnCron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerDateColumnCron) ProtoMessage() {}

func (x *ParameterTriggerDateColumnCron) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerDateColumnCron.ProtoReflect.Descriptor instead.
func (*ParameterTriggerDateColumnCron) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{55}
}

func (x *ParameterTriggerDateColumnCron) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParameterTriggerDateColumnCron) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ParameterTriggerDateColumnCron) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *ParameterTriggerDateColumnCron) GetStartType() CronStartType {
	if x != nil {
		return x.StartType
	}
	return CronStartType_At
}

func (x *ParameterTriggerDateColumnCron) GetDeltaTime() int32 {
	if x != nil {
		return x.DeltaTime
	}
	return 0
}

func (x *ParameterTriggerDateColumnCron) GetDeltaTimeUnit() TimeUnit {
	if x != nil {
		return x.DeltaTimeUnit
	}
	return TimeUnit_Minute
}

func (x *ParameterTriggerDateColumnCron) GetFilterCondition() *FilterCondition {
	if x != nil {
		return x.FilterCondition
	}
	return nil
}

type ParameterTriggerOrgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type OrgEventType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.OrgEventType" json:"type,omitempty"`
}

func (x *ParameterTriggerOrgEvent) Reset() {
	*x = ParameterTriggerOrgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerOrgEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerOrgEvent) ProtoMessage() {}

func (x *ParameterTriggerOrgEvent) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerOrgEvent.ProtoReflect.Descriptor instead.
func (*ParameterTriggerOrgEvent) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{56}
}

func (x *ParameterTriggerOrgEvent) GetType() OrgEventType {
	if x != nil {
		return x.Type
	}
	return OrgEventType_OrgInited
}

type ParameterTriggerUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type UserEventType `protobuf:"varint,1,opt,name=type,proto3,enum=automation.v1.UserEventType" json:"type,omitempty"`
}

func (x *ParameterTriggerUserEvent) Reset() {
	*x = ParameterTriggerUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerUserEvent) ProtoMessage() {}

func (x *ParameterTriggerUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerUserEvent.ProtoReflect.Descriptor instead.
func (*ParameterTriggerUserEvent) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{57}
}

func (x *ParameterTriggerUserEvent) GetType() UserEventType {
	if x != nil {
		return x.Type
	}
	return UserEventType_UserBindMobile
}

type ParameterTriggerWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ParameterTriggerWebhook) Reset() {
	*x = ParameterTriggerWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTriggerWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTriggerWebhook) ProtoMessage() {}

func (x *ParameterTriggerWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTriggerWebhook.ProtoReflect.Descriptor instead.
func (*ParameterTriggerWebhook) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{58}
}

func (x *ParameterTriggerWebhook) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ParameterActionMysql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegrationId string       `protobuf:"bytes,1,opt,name=integrationId,proto3" json:"integrationId,omitempty"`
	Operation     DbOperation  `protobuf:"varint,2,opt,name=operation,proto3,enum=automation.v1.DbOperation" json:"operation,omitempty"`
	Sql           *StringValue `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *ParameterActionMysql) Reset() {
	*x = ParameterActionMysql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionMysql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionMysql) ProtoMessage() {}

func (x *ParameterActionMysql) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionMysql.ProtoReflect.Descriptor instead.
func (*ParameterActionMysql) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{59}
}

func (x *ParameterActionMysql) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *ParameterActionMysql) GetOperation() DbOperation {
	if x != nil {
		return x.Operation
	}
	return DbOperation_Query
}

func (x *ParameterActionMysql) GetSql() *StringValue {
	if x != nil {
		return x.Sql
	}
	return nil
}

type ParameterActionPostgres struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegrationId string       `protobuf:"bytes,1,opt,name=integrationId,proto3" json:"integrationId,omitempty"`
	Operation     DbOperation  `protobuf:"varint,2,opt,name=operation,proto3,enum=automation.v1.DbOperation" json:"operation,omitempty"`
	Sql           *StringValue `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *ParameterActionPostgres) Reset() {
	*x = ParameterActionPostgres{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionPostgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionPostgres) ProtoMessage() {}

func (x *ParameterActionPostgres) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionPostgres.ProtoReflect.Descriptor instead.
func (*ParameterActionPostgres) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{60}
}

func (x *ParameterActionPostgres) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *ParameterActionPostgres) GetOperation() DbOperation {
	if x != nil {
		return x.Operation
	}
	return DbOperation_Query
}

func (x *ParameterActionPostgres) GetSql() *StringValue {
	if x != nil {
		return x.Sql
	}
	return nil
}

type ParameterActionSendEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegrationId string       `protobuf:"bytes,1,opt,name=integrationId,proto3" json:"integrationId,omitempty"`
	FromName      *StringValue `protobuf:"bytes,2,opt,name=fromName,proto3" json:"fromName,omitempty"`
	FromEmail     *StringValue `protobuf:"bytes,3,opt,name=fromEmail,proto3" json:"fromEmail,omitempty"`
	ToEmail       *StringValue `protobuf:"bytes,4,opt,name=toEmail,proto3" json:"toEmail,omitempty"`
	CcEmail       *StringValue `protobuf:"bytes,5,opt,name=ccEmail,proto3" json:"ccEmail,omitempty"`
	ReplyToEmail  *StringValue `protobuf:"bytes,6,opt,name=replyToEmail,proto3" json:"replyToEmail,omitempty"`
	Subject       *StringValue `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	EmailFormat   EmailFormat  `protobuf:"varint,8,opt,name=emailFormat,proto3,enum=automation.v1.EmailFormat" json:"emailFormat,omitempty"`
	Content       *StringValue `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ParameterActionSendEmail) Reset() {
	*x = ParameterActionSendEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionSendEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionSendEmail) ProtoMessage() {}

func (x *ParameterActionSendEmail) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionSendEmail.ProtoReflect.Descriptor instead.
func (*ParameterActionSendEmail) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{61}
}

func (x *ParameterActionSendEmail) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *ParameterActionSendEmail) GetFromName() *StringValue {
	if x != nil {
		return x.FromName
	}
	return nil
}

func (x *ParameterActionSendEmail) GetFromEmail() *StringValue {
	if x != nil {
		return x.FromEmail
	}
	return nil
}

func (x *ParameterActionSendEmail) GetToEmail() *StringValue {
	if x != nil {
		return x.ToEmail
	}
	return nil
}

func (x *ParameterActionSendEmail) GetCcEmail() *StringValue {
	if x != nil {
		return x.CcEmail
	}
	return nil
}

func (x *ParameterActionSendEmail) GetReplyToEmail() *StringValue {
	if x != nil {
		return x.ReplyToEmail
	}
	return nil
}

func (x *ParameterActionSendEmail) GetSubject() *StringValue {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ParameterActionSendEmail) GetEmailFormat() EmailFormat {
	if x != nil {
		return x.EmailFormat
	}
	return EmailFormat_Text
}

func (x *ParameterActionSendEmail) GetContent() *StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

type ParameterActionSendCardFeishu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     *Value       `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	Title   *StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content *StringValue `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ParameterActionSendCardFeishu) Reset() {
	*x = ParameterActionSendCardFeishu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionSendCardFeishu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionSendCardFeishu) ProtoMessage() {}

func (x *ParameterActionSendCardFeishu) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionSendCardFeishu.ProtoReflect.Descriptor instead.
func (*ParameterActionSendCardFeishu) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{62}
}

func (x *ParameterActionSendCardFeishu) GetIds() *Value {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ParameterActionSendCardFeishu) GetTitle() *StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ParameterActionSendCardFeishu) GetContent() *StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

type ParameterActionSendCardDingTalk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     *Value       `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	Title   *StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content *StringValue `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ParameterActionSendCardDingTalk) Reset() {
	*x = ParameterActionSendCardDingTalk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionSendCardDingTalk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionSendCardDingTalk) ProtoMessage() {}

func (x *ParameterActionSendCardDingTalk) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionSendCardDingTalk.ProtoReflect.Descriptor instead.
func (*ParameterActionSendCardDingTalk) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{63}
}

func (x *ParameterActionSendCardDingTalk) GetIds() *Value {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ParameterActionSendCardDingTalk) GetTitle() *StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ParameterActionSendCardDingTalk) GetContent() *StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

type ParameterActionSendCardWeCom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     *Value       `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	Title   *StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content *StringValue `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ParameterActionSendCardWeCom) Reset() {
	*x = ParameterActionSendCardWeCom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_automation_model_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterActionSendCardWeCom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterActionSendCardWeCom) ProtoMessage() {}

func (x *ParameterActionSendCardWeCom) ProtoReflect() protoreflect.Message {
	mi := &file_automation_model_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterActionSendCardWeCom.ProtoReflect.Descriptor instead.
func (*ParameterActionSendCardWeCom) Descriptor() ([]byte, []int) {
	return file_automation_model_proto_rawDescGZIP(), []int{64}
}

func (x *ParameterActionSendCardWeCom) GetIds() *Value {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ParameterActionSendCardWeCom) GetTitle() *StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ParameterActionSendCardWeCom) GetContent() *StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_automation_model_proto protoreflect.FileDescriptor

var file_automation_model_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x34, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x3a, 0x1a,
	0x92, 0x41, 0x17, 0x0a, 0x15, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x5b, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07,
	0xd2, 0x01, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x24, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7c, 0x0a,
	0x13, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x50, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x0c, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x50, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x50, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x2c, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x50, 0x48, 0x00, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x50, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x50, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x13,
	0x92, 0x41, 0x10, 0x0a, 0x0e, 0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0xd2, 0x01, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x79, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2,
	0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e,
	0x0a, 0x0b, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x64, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x64, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x69, 0x64, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xd0,
	0x01, 0x0a, 0x17, 0x54, 0x6f, 0x64, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x55, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x30, 0x92, 0x41, 0x2d,
	0x0a, 0x2b, 0xd2, 0x01, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x07,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0xd2, 0x01, 0x08, 0x63, 0x61, 0x6e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0xd2, 0x01, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd5, 0x02,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x00, 0x18, 0x80, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18, 0x20, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0c, 0x92,
	0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0x80, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x3a, 0x16,
	0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0xd2, 0x01, 0x03, 0x61, 0x73, 0x63, 0x22, 0x46, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x3a, 0x11, 0x92, 0x41, 0x0e,
	0x0a, 0x0c, 0xd2, 0x01, 0x03, 0x6f, 0x6c, 0x64, 0xd2, 0x01, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x46,
	0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x6c,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x65, 0x77, 0x3a, 0x11, 0x92, 0x41, 0x0e, 0x0a, 0x0c, 0xd2, 0x01, 0x03, 0x6f, 0x6c, 0x64,
	0xd2, 0x01, 0x03, 0x6e, 0x65, 0x77, 0x22, 0xf5, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x42, 0x79, 0xd2, 0x01, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0xd2, 0x01, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0xd2, 0x01, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x86,
	0x11, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x47, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x12, 0x44, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6b, 0x12, 0x62, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x15, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43,
	0x72, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x72, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x62, 0x0a, 0x14, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x46, 0x65, 0x69,
	0x73, 0x68, 0x75, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x12,
	0x68, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x48,
	0x00, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x5f, 0x0a, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x57, 0x65, 0x43, 0x6f, 0x6d,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x57, 0x65,
	0x43, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x57, 0x65, 0x43, 0x6f, 0x6d, 0x12, 0x53, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x6f, 0x70, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x6f, 0x70, 0x3a,
	0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e,
	0x0a, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0xd2, 0x01, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0xd2, 0x01, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x13, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0xd2, 0x01, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x06, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18,
	0x14, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0xb5, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x0a, 0xae, 0x01, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2,
	0x01, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0xd2,
	0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x65, 0x73, 0x63, 0xd2, 0x01, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0xd2, 0x01, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0xd2, 0x01, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0xd2, 0x01, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x07, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18, 0x14, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x25, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0xcb, 0x01,
	0x92, 0x41, 0xc7, 0x01, 0x0a, 0xc4, 0x01, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0xd2, 0x01, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x65, 0x73, 0x63, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0xd2, 0x01, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0xd2, 0x01, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0xd2,
	0x01, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0xd2, 0x01, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0xd2, 0x01, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xd2, 0x01, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x33, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x65, 0x73, 0x63, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xd2, 0x01, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x4d, 0x92, 0x41,
	0x4a, 0x0a, 0x48, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0xd2,
	0x01, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x09,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0xd2, 0x01, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0xd2, 0x01, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0xd2, 0x01, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0xd2, 0x01, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x03, 0x0a, 0x0d, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x0a, 0x6e, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0xd2, 0x01, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49,
	0x64, 0xd2, 0x01, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x78, 0xd2, 0x01, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0xd2, 0x01,
	0x06, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x78, 0xd2, 0x01, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0xd2, 0x01, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xea, 0x0a, 0x0a,
	0x04, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x00, 0x18, 0x80, 0x01, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x20, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x42, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x72, 0x67, 0x65, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x67, 0x65, 0x42, 0x79,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x6f, 0x64, 0x6f, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x64, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x6f, 0x64, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x6f,
	0x64, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x64, 0x6f, 0x46, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x64, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x25, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x1a, 0x57, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xfb, 0x01,
	0x92, 0x41, 0xf7, 0x01, 0x0a, 0xf4, 0x01, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64,
	0xd2, 0x01, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0xd2, 0x01, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x0d, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x16, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0xd2, 0x01, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x67, 0x65, 0x42,
	0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2,
	0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xd2, 0x01, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0xd2, 0x01,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0xd2, 0x01, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0xd2, 0x01, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0xd2, 0x01,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x08, 0x54, 0x6f, 0x64,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01,
	0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x80, 0x01,
	0x0a, 0x0a, 0x54, 0x6f, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x4f, 0x70, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x1b, 0x0a, 0x04, 0x6f, 0x70, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x41, 0x74, 0x3a, 0x10,
	0x92, 0x41, 0x0d, 0x0a, 0x0b, 0xd2, 0x01, 0x02, 0x6f, 0x70, 0xd2, 0x01, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0xaa, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x64, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x1f, 0x92, 0x41,
	0x1c, 0x0a, 0x1a, 0xd2, 0x01, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6b, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x64, 0x6f, 0x46, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01, 0x0c, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a,
	0x23, 0x92, 0x41, 0x20, 0x0a, 0x1e, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0xd2, 0x01,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x70, 0x79, 0x3a, 0x39, 0x92, 0x41,
	0x36, 0x0a, 0x34, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd2, 0x01,
	0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xd2, 0x01, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x70, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x3a, 0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0xd2, 0x01, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0xd2, 0x01, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xde, 0x02,
	0x0a, 0x17, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x40, 0x92, 0x41,
	0x3d, 0x0a, 0x3b, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xd2, 0x01, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0xd2, 0x01, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0xd2, 0x01, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d,
	0x02, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0xd2, 0x01, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x73, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xed,
	0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0xd2, 0x01, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0xd2, 0x01, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x20, 0x92,
	0x41, 0x1d, 0x0a, 0x1b, 0xd2, 0x01, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0xd2, 0x01, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x8b, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x04, 0x74,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x87, 0x02,
	0x0a, 0x1d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xd2,
	0x01, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xbb, 0x02, 0x0a, 0x24, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x67, 0x65, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x72, 0x67, 0x65, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x3a, 0x46, 0x92,
	0x41, 0x43, 0x0a, 0x41, 0xd2, 0x01, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd2, 0x01, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0xd2, 0x01, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0xd2, 0x01, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x67, 0x65, 0x42, 0x79, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f,
	0x6f, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f,
	0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xd2, 0x01, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x50, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x3a,
	0x10, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0xd2, 0x01, 0x08, 0x66, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x53, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfa, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x48, 0x00,
	0x52, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x49, 0x0a, 0x08,
	0x6e, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x72, 0x6f, 0x6e, 0x4e, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x4e, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x3b, 0x28, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x22, 0x73, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1d,
	0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x17, 0x28, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x18, 0x3b, 0x28, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0xd2, 0x01, 0x04, 0x68, 0x6f, 0x75, 0x72, 0xd2, 0x01,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e,
	0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x20, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x1a, 0x02, 0x18, 0x06,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61,
	0x79, 0x12, 0x1d, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x17, 0x28, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x21, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x3b, 0x28, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0xd2, 0x01, 0x07, 0x77, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0xd2, 0x01, 0x04, 0x68, 0x6f, 0x75, 0x72, 0xd2, 0x01, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x29, 0xfa, 0x42, 0x12, 0x92, 0x01, 0x0f, 0x22,
	0x0d, 0x1a, 0x0b, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xfa, 0x42,
	0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x1a, 0x02, 0x18, 0x1f, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x17, 0x28, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x18, 0x3b, 0x28, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d, 0xd2, 0x01, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0xd2, 0x01, 0x04, 0x68, 0x6f, 0x75, 0x72, 0xd2, 0x01, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x4e, 0x6f, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x1a, 0x03, 0x28, 0xe6, 0x0f, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0c, 0x28, 0x01, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x1f, 0x28, 0x01, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x1d, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x17, 0x28, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x21, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x3b, 0x28, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0xd2, 0x01, 0x04, 0x79, 0x65, 0x61,
	0x72, 0xd2, 0x01, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0xd2, 0x01, 0x03, 0x64, 0x61, 0x79, 0xd2,
	0x01, 0x04, 0x68, 0x6f, 0x75, 0x72, 0xd2, 0x01, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22,
	0xa1, 0x02, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01,
	0x06, 0x22, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0xd2, 0x01, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01,
	0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0xd2, 0x01, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x22, 0x59, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c,
	0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x19,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x92, 0x41, 0x09,
	0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x17, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x24, 0x18, 0x24, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x2f, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18, 0x14, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x73, 0x71, 0x6c, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0xd2, 0x01, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x71,
	0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18, 0x14, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0xd2, 0x01, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x71, 0x6c, 0x22, 0xfb, 0x04, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x6f, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x63, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x63,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a,
	0x71, 0x92, 0x41, 0x6e, 0x0a, 0x6c, 0xd2, 0x01, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x07,
	0x74, 0x6f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x07, 0x63, 0x63, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0xd2, 0x01, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0xd2, 0x01, 0x0b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0xd2, 0x01, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x46, 0x65,
	0x69, 0x73, 0x68, 0x75, 0x12, 0x26, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0xd2, 0x01, 0x03, 0x69, 0x64,
	0x73, 0xd2, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0x01, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x26, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0xd2, 0x01,
	0x03, 0x69, 0x64, 0x73, 0xd2, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0x01, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x57, 0x65, 0x43, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0xd2, 0x01,
	0x03, 0x69, 0x64, 0x73, 0xd2, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0x01, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x21, 0x0a, 0x08, 0x54, 0x6f, 0x64, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x06, 0x54, 0x6f, 0x64,
	0x6f, 0x4f, 0x70, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x50, 0x61, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0a, 0x54, 0x6f, 0x64,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x65,
	0x77, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x04, 0x2a, 0x5e, 0x0a, 0x0e, 0x54, 0x6f, 0x64, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x74, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10,
	0x03, 0x2a, 0x32, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x2a, 0x98,
	0x04, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4f, 0x72, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x43, 0x72, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6b, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x10, 0x15,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x46, 0x65, 0x69, 0x73, 0x68,
	0x75, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x10, 0x19, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x57, 0x65, 0x43, 0x6f, 0x6d, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x10, 0xe8, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x6f, 0x6f, 0x70, 0x10, 0xe9, 0x07, 0x2a, 0x5c, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x1d, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x72, 0x67, 0x49, 0x6e,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x00, 0x2a, 0x23, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x00, 0x2a, 0x20, 0x0a, 0x0a, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x70, 0x74, 0x10, 0x01, 0x2a, 0x2c, 0x0a,
	0x08, 0x46, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x08, 0x43,
	0x72, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x79, 0x73, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x74, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x29, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x61,
	0x79, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0b, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x74, 0x6d, 0x6c, 0x10, 0x01, 0x2a, 0x2f, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x65, 0x43, 0x6f, 0x6d, 0x10, 0x02, 0x2a, 0x16, 0x0a, 0x0b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x6f,
	0x77, 0x10, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x65, 0x61, 0x2e, 0x62, 0x6a, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x4c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_automation_model_proto_rawDescOnce sync.Once
	file_automation_model_proto_rawDescData = file_automation_model_proto_rawDesc
)

func file_automation_model_proto_rawDescGZIP() []byte {
	file_automation_model_proto_rawDescOnce.Do(func() {
		file_automation_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_automation_model_proto_rawDescData)
	})
	return file_automation_model_proto_rawDescData
}

var file_automation_model_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_automation_model_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_automation_model_proto_goTypes = []interface{}{
	(TodoType)(0),                                // 0: automation.v1.TodoType
	(TodoOp)(0),                                  // 1: automation.v1.TodoOp
	(TodoStatus)(0),                              // 2: automation.v1.TodoStatus
	(TodoFilterType)(0),                          // 3: automation.v1.TodoFilterType
	(SignMode)(0),                                // 4: automation.v1.SignMode
	(WorkflowFilterType)(0),                      // 5: automation.v1.WorkflowFilterType
	(NodeType)(0),                                // 6: automation.v1.NodeType
	(DataEventType)(0),                           // 7: automation.v1.DataEventType
	(OrgEventType)(0),                            // 8: automation.v1.OrgEventType
	(UserEventType)(0),                           // 9: automation.v1.UserEventType
	(PeopleType)(0),                              // 10: automation.v1.PeopleType
	(ForkType)(0),                                // 11: automation.v1.ForkType
	(CronType)(0),                                // 12: automation.v1.CronType
	(CronStartType)(0),                           // 13: automation.v1.CronStartType
	(TimeUnit)(0),                                // 14: automation.v1.TimeUnit
	(ActivateErrorType)(0),                       // 15: automation.v1.ActivateErrorType
	(DbOperation)(0),                             // 16: automation.v1.DbOperation
	(EmailFormat)(0),                             // 17: automation.v1.EmailFormat
	(Platform)(0),                                // 18: automation.v1.Platform
	(SystemValue)(0),                             // 19: automation.v1.SystemValue
	(*ActivateErrors)(nil),                       // 20: automation.v1.ActivateErrors
	(*ActivateError)(nil),                        // 21: automation.v1.ActivateError
	(*DataFromNode)(nil),                         // 22: automation.v1.DataFromNode
	(*DynamicValueFromNode)(nil),                 // 23: automation.v1.DynamicValueFromNode
	(*DynamicValueElement)(nil),                  // 24: automation.v1.DynamicValueElement
	(*DynamicValue)(nil),                         // 25: automation.v1.DynamicValue
	(*Value)(nil),                                // 26: automation.v1.Value
	(*StringValue)(nil),                          // 27: automation.v1.StringValue
	(*KeyValue)(nil),                             // 28: automation.v1.KeyValue
	(*People)(nil),                               // 29: automation.v1.People
	(*PeopleByIds)(nil),                          // 30: automation.v1.PeopleByIds
	(*TodoOperatorResultsById)(nil),              // 31: automation.v1.TodoOperatorResultsById
	(*FormSetting)(nil),                          // 32: automation.v1.FormSetting
	(*FilterCondition)(nil),                      // 33: automation.v1.FilterCondition
	(*Filter)(nil),                               // 34: automation.v1.Filter
	(*Order)(nil),                                // 35: automation.v1.Order
	(*StringMapping)(nil),                        // 36: automation.v1.StringMapping
	(*NumberMapping)(nil),                        // 37: automation.v1.NumberMapping
	(*TriggerBy)(nil),                            // 38: automation.v1.TriggerBy
	(*Node)(nil),                                 // 39: automation.v1.Node
	(*Nodes)(nil),                                // 40: automation.v1.Nodes
	(*Connection)(nil),                           // 41: automation.v1.Connection
	(*Connections)(nil),                          // 42: automation.v1.Connections
	(*WorkflowMeta)(nil),                         // 43: automation.v1.WorkflowMeta
	(*Workflow)(nil),                             // 44: automation.v1.Workflow
	(*WorkflowInput)(nil),                        // 45: automation.v1.WorkflowInput
	(*ExecutionMeta)(nil),                        // 46: automation.v1.ExecutionMeta
	(*Execution)(nil),                            // 47: automation.v1.Execution
	(*NodeExecution)(nil),                        // 48: automation.v1.NodeExecution
	(*Todo)(nil),                                 // 49: automation.v1.Todo
	(*TodoStat)(nil),                             // 50: automation.v1.TodoStat
	(*TodoResult)(nil),                           // 51: automation.v1.TodoResult
	(*ParameterTodoAudit)(nil),                   // 52: automation.v1.ParameterTodoAudit
	(*ParameterTodoFillIn)(nil),                  // 53: automation.v1.ParameterTodoFillIn
	(*ParameterActionCreateData)(nil),            // 54: automation.v1.ParameterActionCreateData
	(*ParameterActionCopyData)(nil),              // 55: automation.v1.ParameterActionCopyData
	(*ParameterActionUpdateData)(nil),            // 56: automation.v1.ParameterActionUpdateData
	(*ParameterActionListData)(nil),              // 57: automation.v1.ParameterActionListData
	(*ParameterActionFindData)(nil),              // 58: automation.v1.ParameterActionFindData
	(*ParameterActionAudit)(nil),                 // 59: automation.v1.ParameterActionAudit
	(*ParameterActionFillIn)(nil),                // 60: automation.v1.ParameterActionFillIn
	(*ParameterActionFork)(nil),                  // 61: automation.v1.ParameterActionFork
	(*ParameterActionGroupAuditFlow)(nil),        // 62: automation.v1.ParameterActionGroupAuditFlow
	(*ParameterActionGroupSettingAuditFlow)(nil), // 63: automation.v1.ParameterActionGroupSettingAuditFlow
	(*ParameterActionGroupLoop)(nil),             // 64: automation.v1.ParameterActionGroupLoop
	(*ParameterActionMerge)(nil),                 // 65: automation.v1.ParameterActionMerge
	(*ParameterActionCode)(nil),                  // 66: automation.v1.ParameterActionCode
	(*ParameterTriggerCron)(nil),                 // 67: automation.v1.ParameterTriggerCron
	(*ParameterTriggerCronMinutes)(nil),          // 68: automation.v1.ParameterTriggerCronMinutes
	(*ParameterTriggerCronHours)(nil),            // 69: automation.v1.ParameterTriggerCronHours
	(*ParameterTriggerCronDays)(nil),             // 70: automation.v1.ParameterTriggerCronDays
	(*ParameterTriggerCronWeeks)(nil),            // 71: automation.v1.ParameterTriggerCronWeeks
	(*ParameterTriggerCronMonths)(nil),           // 72: automation.v1.ParameterTriggerCronMonths
	(*ParameterTriggerCronNoRepeat)(nil),         // 73: automation.v1.ParameterTriggerCronNoRepeat
	(*ParameterTriggerDataEvent)(nil),            // 74: automation.v1.ParameterTriggerDataEvent
	(*ParameterTriggerDateColumnCron)(nil),       // 75: automation.v1.ParameterTriggerDateColumnCron
	(*ParameterTriggerOrgEvent)(nil),             // 76: automation.v1.ParameterTriggerOrgEvent
	(*ParameterTriggerUserEvent)(nil),            // 77: automation.v1.ParameterTriggerUserEvent
	(*ParameterTriggerWebhook)(nil),              // 78: automation.v1.ParameterTriggerWebhook
	(*ParameterActionMysql)(nil),                 // 79: automation.v1.ParameterActionMysql
	(*ParameterActionPostgres)(nil),              // 80: automation.v1.ParameterActionPostgres
	(*ParameterActionSendEmail)(nil),             // 81: automation.v1.ParameterActionSendEmail
	(*ParameterActionSendCardFeishu)(nil),        // 82: automation.v1.ParameterActionSendCardFeishu
	(*ParameterActionSendCardDingTalk)(nil),      // 83: automation.v1.ParameterActionSendCardDingTalk
	(*ParameterActionSendCardWeCom)(nil),         // 84: automation.v1.ParameterActionSendCardWeCom
	nil,                                          // 85: automation.v1.TodoOperatorResultsById.ResultsEntry
	nil,                                          // 86: automation.v1.Todo.OperatorsEntry
	(*structpb.Struct)(nil),                      // 87: google.protobuf.Struct
}
var file_automation_model_proto_depIdxs = []int32{
	21,  // 0: automation.v1.ActivateErrors.errors:type_name -> automation.v1.ActivateError
	15,  // 1: automation.v1.ActivateError.type:type_name -> automation.v1.ActivateErrorType
	23,  // 2: automation.v1.DynamicValueElement.value:type_name -> automation.v1.DynamicValueFromNode
	24,  // 3: automation.v1.DynamicValue.element:type_name -> automation.v1.DynamicValueElement
	25,  // 4: automation.v1.Value.dynamic:type_name -> automation.v1.DynamicValue
	19,  // 5: automation.v1.Value.system:type_name -> automation.v1.SystemValue
	25,  // 6: automation.v1.StringValue.dynamic:type_name -> automation.v1.DynamicValue
	26,  // 7: automation.v1.KeyValue.value:type_name -> automation.v1.Value
	10,  // 8: automation.v1.People.type:type_name -> automation.v1.PeopleType
	26,  // 9: automation.v1.People.value:type_name -> automation.v1.Value
	10,  // 10: automation.v1.PeopleByIds.type:type_name -> automation.v1.PeopleType
	85,  // 11: automation.v1.TodoOperatorResultsById.results:type_name -> automation.v1.TodoOperatorResultsById.ResultsEntry
	22,  // 12: automation.v1.FilterCondition.source:type_name -> automation.v1.DataFromNode
	87,  // 13: automation.v1.FilterCondition.props:type_name -> google.protobuf.Struct
	26,  // 14: automation.v1.FilterCondition.value:type_name -> automation.v1.Value
	33,  // 15: automation.v1.FilterCondition.conds:type_name -> automation.v1.FilterCondition
	33,  // 16: automation.v1.Filter.condition:type_name -> automation.v1.FilterCondition
	6,   // 17: automation.v1.Node.type:type_name -> automation.v1.NodeType
	59,  // 18: automation.v1.Node.actionAudit:type_name -> automation.v1.ParameterActionAudit
	54,  // 19: automation.v1.Node.actionCreateData:type_name -> automation.v1.ParameterActionCreateData
	60,  // 20: automation.v1.Node.actionFillIn:type_name -> automation.v1.ParameterActionFillIn
	61,  // 21: automation.v1.Node.actionFork:type_name -> automation.v1.ParameterActionFork
	62,  // 22: automation.v1.Node.actionGroupAuditFlow:type_name -> automation.v1.ParameterActionGroupAuditFlow
	57,  // 23: automation.v1.Node.actionListData:type_name -> automation.v1.ParameterActionListData
	65,  // 24: automation.v1.Node.actionMerge:type_name -> automation.v1.ParameterActionMerge
	56,  // 25: automation.v1.Node.actionUpdateData:type_name -> automation.v1.ParameterActionUpdateData
	66,  // 26: automation.v1.Node.actionCode:type_name -> automation.v1.ParameterActionCode
	67,  // 27: automation.v1.Node.triggerCron:type_name -> automation.v1.ParameterTriggerCron
	74,  // 28: automation.v1.Node.triggerDataEvent:type_name -> automation.v1.ParameterTriggerDataEvent
	76,  // 29: automation.v1.Node.triggerOrgEvent:type_name -> automation.v1.ParameterTriggerOrgEvent
	78,  // 30: automation.v1.Node.triggerWebhook:type_name -> automation.v1.ParameterTriggerWebhook
	58,  // 31: automation.v1.Node.actionFindData:type_name -> automation.v1.ParameterActionFindData
	75,  // 32: automation.v1.Node.triggerDateColumnCron:type_name -> automation.v1.ParameterTriggerDateColumnCron
	77,  // 33: automation.v1.Node.triggerUserEvent:type_name -> automation.v1.ParameterTriggerUserEvent
	79,  // 34: automation.v1.Node.actionMysql:type_name -> automation.v1.ParameterActionMysql
	80,  // 35: automation.v1.Node.actionPostgres:type_name -> automation.v1.ParameterActionPostgres
	55,  // 36: automation.v1.Node.actionCopyData:type_name -> automation.v1.ParameterActionCopyData
	81,  // 37: automation.v1.Node.actionSendEmail:type_name -> automation.v1.ParameterActionSendEmail
	82,  // 38: automation.v1.Node.actionSendCardFeishu:type_name -> automation.v1.ParameterActionSendCardFeishu
	83,  // 39: automation.v1.Node.actionSendCardDingTalk:type_name -> automation.v1.ParameterActionSendCardDingTalk
	84,  // 40: automation.v1.Node.actionSendCardWeCom:type_name -> automation.v1.ParameterActionSendCardWeCom
	64,  // 41: automation.v1.Node.actionGroupLoop:type_name -> automation.v1.ParameterActionGroupLoop
	39,  // 42: automation.v1.Nodes.nodes:type_name -> automation.v1.Node
	41,  // 43: automation.v1.Connections.connections:type_name -> automation.v1.Connection
	6,   // 44: automation.v1.WorkflowMeta.triggerType:type_name -> automation.v1.NodeType
	6,   // 45: automation.v1.Workflow.triggerType:type_name -> automation.v1.NodeType
	39,  // 46: automation.v1.Workflow.nodes:type_name -> automation.v1.Node
	41,  // 47: automation.v1.Workflow.connections:type_name -> automation.v1.Connection
	39,  // 48: automation.v1.WorkflowInput.nodes:type_name -> automation.v1.Node
	41,  // 49: automation.v1.WorkflowInput.connections:type_name -> automation.v1.Connection
	48,  // 50: automation.v1.Execution.nodes:type_name -> automation.v1.NodeExecution
	39,  // 51: automation.v1.Execution.workflowNodes:type_name -> automation.v1.Node
	87,  // 52: automation.v1.NodeExecution.data:type_name -> google.protobuf.Struct
	0,   // 53: automation.v1.Todo.type:type_name -> automation.v1.TodoType
	2,   // 54: automation.v1.Todo.status:type_name -> automation.v1.TodoStatus
	52,  // 55: automation.v1.Todo.todoAudit:type_name -> automation.v1.ParameterTodoAudit
	53,  // 56: automation.v1.Todo.todoFillIn:type_name -> automation.v1.ParameterTodoFillIn
	86,  // 57: automation.v1.Todo.operators:type_name -> automation.v1.Todo.OperatorsEntry
	3,   // 58: automation.v1.TodoStat.type:type_name -> automation.v1.TodoFilterType
	1,   // 59: automation.v1.TodoResult.op:type_name -> automation.v1.TodoOp
	4,   // 60: automation.v1.ParameterTodoAudit.signMode:type_name -> automation.v1.SignMode
	32,  // 61: automation.v1.ParameterTodoAudit.formSettings:type_name -> automation.v1.FormSetting
	32,  // 62: automation.v1.ParameterTodoFillIn.formSettings:type_name -> automation.v1.FormSetting
	28,  // 63: automation.v1.ParameterActionCreateData.keyValues:type_name -> automation.v1.KeyValue
	22,  // 64: automation.v1.ParameterActionCopyData.source:type_name -> automation.v1.DataFromNode
	28,  // 65: automation.v1.ParameterActionCopyData.keyValues:type_name -> automation.v1.KeyValue
	22,  // 66: automation.v1.ParameterActionUpdateData.source:type_name -> automation.v1.DataFromNode
	28,  // 67: automation.v1.ParameterActionUpdateData.keyValues:type_name -> automation.v1.KeyValue
	33,  // 68: automation.v1.ParameterActionListData.condition:type_name -> automation.v1.FilterCondition
	35,  // 69: automation.v1.ParameterActionListData.orders:type_name -> automation.v1.Order
	33,  // 70: automation.v1.ParameterActionFindData.condition:type_name -> automation.v1.FilterCondition
	35,  // 71: automation.v1.ParameterActionFindData.orders:type_name -> automation.v1.Order
	29,  // 72: automation.v1.ParameterActionAudit.operators:type_name -> automation.v1.People
	4,   // 73: automation.v1.ParameterActionAudit.signMode:type_name -> automation.v1.SignMode
	32,  // 74: automation.v1.ParameterActionAudit.formSettings:type_name -> automation.v1.FormSetting
	29,  // 75: automation.v1.ParameterActionFillIn.operators:type_name -> automation.v1.People
	32,  // 76: automation.v1.ParameterActionFillIn.formSettings:type_name -> automation.v1.FormSetting
	11,  // 77: automation.v1.ParameterActionFork.type:type_name -> automation.v1.ForkType
	34,  // 78: automation.v1.ParameterActionFork.filters:type_name -> automation.v1.Filter
	39,  // 79: automation.v1.ParameterActionGroupAuditFlow.nodes:type_name -> automation.v1.Node
	41,  // 80: automation.v1.ParameterActionGroupAuditFlow.connections:type_name -> automation.v1.Connection
	63,  // 81: automation.v1.ParameterActionGroupAuditFlow.setting:type_name -> automation.v1.ParameterActionGroupSettingAuditFlow
	22,  // 82: automation.v1.ParameterActionGroupSettingAuditFlow.source:type_name -> automation.v1.DataFromNode
	26,  // 83: automation.v1.ParameterActionGroupSettingAuditFlow.trigger:type_name -> automation.v1.Value
	39,  // 84: automation.v1.ParameterActionGroupLoop.nodes:type_name -> automation.v1.Node
	41,  // 85: automation.v1.ParameterActionGroupLoop.connections:type_name -> automation.v1.Connection
	22,  // 86: automation.v1.ParameterActionGroupLoop.source:type_name -> automation.v1.DataFromNode
	27,  // 87: automation.v1.ParameterActionCode.code:type_name -> automation.v1.StringValue
	12,  // 88: automation.v1.ParameterTriggerCron.type:type_name -> automation.v1.CronType
	68,  // 89: automation.v1.ParameterTriggerCron.minutes:type_name -> automation.v1.ParameterTriggerCronMinutes
	69,  // 90: automation.v1.ParameterTriggerCron.hours:type_name -> automation.v1.ParameterTriggerCronHours
	70,  // 91: automation.v1.ParameterTriggerCron.days:type_name -> automation.v1.ParameterTriggerCronDays
	71,  // 92: automation.v1.ParameterTriggerCron.weeks:type_name -> automation.v1.ParameterTriggerCronWeeks
	72,  // 93: automation.v1.ParameterTriggerCron.months:type_name -> automation.v1.ParameterTriggerCronMonths
	73,  // 94: automation.v1.ParameterTriggerCron.noRepeat:type_name -> automation.v1.ParameterTriggerCronNoRepeat
	7,   // 95: automation.v1.ParameterTriggerDataEvent.type:type_name -> automation.v1.DataEventType
	33,  // 96: automation.v1.ParameterTriggerDataEvent.filterCondition:type_name -> automation.v1.FilterCondition
	13,  // 97: automation.v1.ParameterTriggerDateColumnCron.startType:type_name -> automation.v1.CronStartType
	14,  // 98: automation.v1.ParameterTriggerDateColumnCron.deltaTimeUnit:type_name -> automation.v1.TimeUnit
	33,  // 99: automation.v1.ParameterTriggerDateColumnCron.filterCondition:type_name -> automation.v1.FilterCondition
	8,   // 100: automation.v1.ParameterTriggerOrgEvent.type:type_name -> automation.v1.OrgEventType
	9,   // 101: automation.v1.ParameterTriggerUserEvent.type:type_name -> automation.v1.UserEventType
	16,  // 102: automation.v1.ParameterActionMysql.operation:type_name -> automation.v1.DbOperation
	27,  // 103: automation.v1.ParameterActionMysql.sql:type_name -> automation.v1.StringValue
	16,  // 104: automation.v1.ParameterActionPostgres.operation:type_name -> automation.v1.DbOperation
	27,  // 105: automation.v1.ParameterActionPostgres.sql:type_name -> automation.v1.StringValue
	27,  // 106: automation.v1.ParameterActionSendEmail.fromName:type_name -> automation.v1.StringValue
	27,  // 107: automation.v1.ParameterActionSendEmail.fromEmail:type_name -> automation.v1.StringValue
	27,  // 108: automation.v1.ParameterActionSendEmail.toEmail:type_name -> automation.v1.StringValue
	27,  // 109: automation.v1.ParameterActionSendEmail.ccEmail:type_name -> automation.v1.StringValue
	27,  // 110: automation.v1.ParameterActionSendEmail.replyToEmail:type_name -> automation.v1.StringValue
	27,  // 111: automation.v1.ParameterActionSendEmail.subject:type_name -> automation.v1.StringValue
	17,  // 112: automation.v1.ParameterActionSendEmail.emailFormat:type_name -> automation.v1.EmailFormat
	27,  // 113: automation.v1.ParameterActionSendEmail.content:type_name -> automation.v1.StringValue
	26,  // 114: automation.v1.ParameterActionSendCardFeishu.ids:type_name -> automation.v1.Value
	27,  // 115: automation.v1.ParameterActionSendCardFeishu.title:type_name -> automation.v1.StringValue
	27,  // 116: automation.v1.ParameterActionSendCardFeishu.content:type_name -> automation.v1.StringValue
	26,  // 117: automation.v1.ParameterActionSendCardDingTalk.ids:type_name -> automation.v1.Value
	27,  // 118: automation.v1.ParameterActionSendCardDingTalk.title:type_name -> automation.v1.StringValue
	27,  // 119: automation.v1.ParameterActionSendCardDingTalk.content:type_name -> automation.v1.StringValue
	26,  // 120: automation.v1.ParameterActionSendCardWeCom.ids:type_name -> automation.v1.Value
	27,  // 121: automation.v1.ParameterActionSendCardWeCom.title:type_name -> automation.v1.StringValue
	27,  // 122: automation.v1.ParameterActionSendCardWeCom.content:type_name -> automation.v1.StringValue
	51,  // 123: automation.v1.TodoOperatorResultsById.ResultsEntry.value:type_name -> automation.v1.TodoResult
	51,  // 124: automation.v1.Todo.OperatorsEntry.value:type_name -> automation.v1.TodoResult
	125, // [125:125] is the sub-list for method output_type
	125, // [125:125] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_automation_model_proto_init() }
func file_automation_model_proto_init() {
	if File_automation_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_automation_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFromNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicValueFromNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicValueElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*People); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeopleByIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoOperatorResultsById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Todo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTodoAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTodoFillIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionCreateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionCopyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionFindData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionFillIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionFork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionGroupAuditFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionGroupSettingAuditFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionGroupLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionMerge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCronMinutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCronHours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCronDays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCronWeeks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCronMonths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerCronNoRepeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerDataEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerDateColumnCron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerOrgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterTriggerWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionMysql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionPostgres); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionSendEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionSendCardFeishu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionSendCardDingTalk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_automation_model_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterActionSendCardWeCom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_automation_model_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*DynamicValueElement_Text)(nil),
		(*DynamicValueElement_Value)(nil),
	}
	file_automation_model_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Value_Json)(nil),
		(*Value_Dynamic)(nil),
		(*Value_Expression)(nil),
		(*Value_System)(nil),
	}
	file_automation_model_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*StringValue_Dynamic)(nil),
		(*StringValue_Expression)(nil),
		(*StringValue_Text)(nil),
		(*StringValue_Json)(nil),
	}
	file_automation_model_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Node_ActionAudit)(nil),
		(*Node_ActionCreateData)(nil),
		(*Node_ActionFillIn)(nil),
		(*Node_ActionFork)(nil),
		(*Node_ActionGroupAuditFlow)(nil),
		(*Node_ActionListData)(nil),
		(*Node_ActionMerge)(nil),
		(*Node_ActionUpdateData)(nil),
		(*Node_ActionCode)(nil),
		(*Node_TriggerCron)(nil),
		(*Node_TriggerDataEvent)(nil),
		(*Node_TriggerOrgEvent)(nil),
		(*Node_TriggerWebhook)(nil),
		(*Node_ActionFindData)(nil),
		(*Node_TriggerDateColumnCron)(nil),
		(*Node_TriggerUserEvent)(nil),
		(*Node_ActionMysql)(nil),
		(*Node_ActionPostgres)(nil),
		(*Node_ActionCopyData)(nil),
		(*Node_ActionSendEmail)(nil),
		(*Node_ActionSendCardFeishu)(nil),
		(*Node_ActionSendCardDingTalk)(nil),
		(*Node_ActionSendCardWeCom)(nil),
		(*Node_ActionGroupLoop)(nil),
	}
	file_automation_model_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Todo_TodoAudit)(nil),
		(*Todo_TodoFillIn)(nil),
	}
	file_automation_model_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*ParameterTriggerCron_Minutes)(nil),
		(*ParameterTriggerCron_Hours)(nil),
		(*ParameterTriggerCron_Days)(nil),
		(*ParameterTriggerCron_Weeks)(nil),
		(*ParameterTriggerCron_Months)(nil),
		(*ParameterTriggerCron_NoRepeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_automation_model_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_automation_model_proto_goTypes,
		DependencyIndexes: file_automation_model_proto_depIdxs,
		EnumInfos:         file_automation_model_proto_enumTypes,
		MessageInfos:      file_automation_model_proto_msgTypes,
	}.Build()
	File_automation_model_proto = out.File
	file_automation_model_proto_rawDesc = nil
	file_automation_model_proto_goTypes = nil
	file_automation_model_proto_depIdxs = nil
}
