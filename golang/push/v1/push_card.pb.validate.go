// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: push_card.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CardTitle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardTitle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardTitle with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardTitleMultiError, or nil
// if none found.
func (m *CardTitle) ValidateAll() error {
	return m.validate(true)
}

func (m *CardTitle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Title

	if len(errors) > 0 {
		return CardTitleMultiError(errors)
	}

	return nil
}

// CardTitleMultiError is an error wrapping multiple validation errors returned
// by CardTitle.ValidateAll() if the designated constraints aren't met.
type CardTitleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardTitleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardTitleMultiError) AllErrors() []error { return m }

// CardTitleValidationError is the validation error returned by
// CardTitle.Validate if the designated constraints aren't met.
type CardTitleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardTitleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardTitleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardTitleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardTitleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardTitleValidationError) ErrorName() string { return "CardTitleValidationError" }

// Error satisfies the builtin error interface
func (e CardTitleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardTitle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardTitleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardTitleValidationError{}

// Validate checks the field values on CardTextField with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardTextField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardTextField with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardTextFieldMultiError, or
// nil if none found.
func (m *CardTextField) ValidateAll() error {
	return m.validate(true)
}

func (m *CardTextField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return CardTextFieldMultiError(errors)
	}

	return nil
}

// CardTextFieldMultiError is an error wrapping multiple validation errors
// returned by CardTextField.ValidateAll() if the designated constraints
// aren't met.
type CardTextFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardTextFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardTextFieldMultiError) AllErrors() []error { return m }

// CardTextFieldValidationError is the validation error returned by
// CardTextField.Validate if the designated constraints aren't met.
type CardTextFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardTextFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardTextFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardTextFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardTextFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardTextFieldValidationError) ErrorName() string { return "CardTextFieldValidationError" }

// Error satisfies the builtin error interface
func (e CardTextFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardTextField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardTextFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardTextFieldValidationError{}

// Validate checks the field values on CardTextDiv with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardTextDiv) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardTextDiv with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardTextDivMultiError, or
// nil if none found.
func (m *CardTextDiv) ValidateAll() error {
	return m.validate(true)
}

func (m *CardTextDiv) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardTextDivValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardTextDivValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardTextDivValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardTextDivMultiError(errors)
	}

	return nil
}

// CardTextDivMultiError is an error wrapping multiple validation errors
// returned by CardTextDiv.ValidateAll() if the designated constraints aren't met.
type CardTextDivMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardTextDivMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardTextDivMultiError) AllErrors() []error { return m }

// CardTextDivValidationError is the validation error returned by
// CardTextDiv.Validate if the designated constraints aren't met.
type CardTextDivValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardTextDivValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardTextDivValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardTextDivValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardTextDivValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardTextDivValidationError) ErrorName() string { return "CardTextDivValidationError" }

// Error satisfies the builtin error interface
func (e CardTextDivValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardTextDiv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardTextDivValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardTextDivValidationError{}

// Validate checks the field values on CardAction with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardAction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardActionMultiError, or
// nil if none found.
func (m *CardAction) ValidateAll() error {
	return m.validate(true)
}

func (m *CardAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Type

	// no validation rules for Text

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetValues()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CardActionValidationError{
					field:  "Values",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CardActionValidationError{
					field:  "Values",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardActionValidationError{
				field:  "Values",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CardActionMultiError(errors)
	}

	return nil
}

// CardActionMultiError is an error wrapping multiple validation errors
// returned by CardAction.ValidateAll() if the designated constraints aren't met.
type CardActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardActionMultiError) AllErrors() []error { return m }

// CardActionValidationError is the validation error returned by
// CardAction.Validate if the designated constraints aren't met.
type CardActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardActionValidationError) ErrorName() string { return "CardActionValidationError" }

// Error satisfies the builtin error interface
func (e CardActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardActionValidationError{}

// Validate checks the field values on CardActionModule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardActionModule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardActionModule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardActionModuleMultiError, or nil if none found.
func (m *CardActionModule) ValidateAll() error {
	return m.validate(true)
}

func (m *CardActionModule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardActionModuleValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardActionModuleValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardActionModuleValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardActionModuleMultiError(errors)
	}

	return nil
}

// CardActionModuleMultiError is an error wrapping multiple validation errors
// returned by CardActionModule.ValidateAll() if the designated constraints
// aren't met.
type CardActionModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardActionModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardActionModuleMultiError) AllErrors() []error { return m }

// CardActionModuleValidationError is the validation error returned by
// CardActionModule.Validate if the designated constraints aren't met.
type CardActionModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardActionModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardActionModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardActionModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardActionModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardActionModuleValidationError) ErrorName() string { return "CardActionModuleValidationError" }

// Error satisfies the builtin error interface
func (e CardActionModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardActionModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardActionModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardActionModuleValidationError{}

// Validate checks the field values on TemplateCard with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TemplateCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateCard with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateCardMultiError, or
// nil if none found.
func (m *TemplateCard) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTitle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateCardValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateCardValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTitle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateCardValidationError{
				field:  "Title",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDivs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateCardValidationError{
						field:  fmt.Sprintf("Divs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateCardValidationError{
						field:  fmt.Sprintf("Divs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateCardValidationError{
					field:  fmt.Sprintf("Divs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActionModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateCardValidationError{
						field:  fmt.Sprintf("ActionModules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateCardValidationError{
						field:  fmt.Sprintf("ActionModules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateCardValidationError{
					field:  fmt.Sprintf("ActionModules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TemplateCardMultiError(errors)
	}

	return nil
}

// TemplateCardMultiError is an error wrapping multiple validation errors
// returned by TemplateCard.ValidateAll() if the designated constraints aren't met.
type TemplateCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateCardMultiError) AllErrors() []error { return m }

// TemplateCardValidationError is the validation error returned by
// TemplateCard.Validate if the designated constraints aren't met.
type TemplateCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateCardValidationError) ErrorName() string { return "TemplateCardValidationError" }

// Error satisfies the builtin error interface
func (e TemplateCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateCardValidationError{}

// Validate checks the field values on MarkdownCard with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MarkdownCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkdownCard with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MarkdownCardMultiError, or
// nil if none found.
func (m *MarkdownCard) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkdownCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	if len(errors) > 0 {
		return MarkdownCardMultiError(errors)
	}

	return nil
}

// MarkdownCardMultiError is an error wrapping multiple validation errors
// returned by MarkdownCard.ValidateAll() if the designated constraints aren't met.
type MarkdownCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkdownCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkdownCardMultiError) AllErrors() []error { return m }

// MarkdownCardValidationError is the validation error returned by
// MarkdownCard.Validate if the designated constraints aren't met.
type MarkdownCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkdownCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkdownCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkdownCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkdownCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkdownCardValidationError) ErrorName() string { return "MarkdownCardValidationError" }

// Error satisfies the builtin error interface
func (e MarkdownCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkdownCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkdownCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkdownCardValidationError{}

// Validate checks the field values on StringArray with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringArray) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringArray with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringArrayMultiError, or
// nil if none found.
func (m *StringArray) ValidateAll() error {
	return m.validate(true)
}

func (m *StringArray) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StringArrayMultiError(errors)
	}

	return nil
}

// StringArrayMultiError is an error wrapping multiple validation errors
// returned by StringArray.ValidateAll() if the designated constraints aren't met.
type StringArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringArrayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringArrayMultiError) AllErrors() []error { return m }

// StringArrayValidationError is the validation error returned by
// StringArray.Validate if the designated constraints aren't met.
type StringArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringArrayValidationError) ErrorName() string { return "StringArrayValidationError" }

// Error satisfies the builtin error interface
func (e StringArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringArray.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringArrayValidationError{}
