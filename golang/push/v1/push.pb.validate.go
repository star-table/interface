// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: push.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HelloReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReqMultiError, or nil
// if none found.
func (m *HelloReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return HelloReqMultiError(errors)
	}

	return nil
}

// HelloReqMultiError is an error wrapping multiple validation errors returned
// by HelloReq.ValidateAll() if the designated constraints aren't met.
type HelloReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReqMultiError) AllErrors() []error { return m }

// HelloReqValidationError is the validation error returned by
// HelloReq.Validate if the designated constraints aren't met.
type HelloReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReqValidationError) ErrorName() string { return "HelloReqValidationError" }

// Error satisfies the builtin error interface
func (e HelloReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReqValidationError{}

// Validate checks the field values on HelloReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReplyMultiError, or
// nil if none found.
func (m *HelloReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return HelloReplyMultiError(errors)
	}

	return nil
}

// HelloReplyMultiError is an error wrapping multiple validation errors
// returned by HelloReply.ValidateAll() if the designated constraints aren't met.
type HelloReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReplyMultiError) AllErrors() []error { return m }

// HelloReplyValidationError is the validation error returned by
// HelloReply.Validate if the designated constraints aren't met.
type HelloReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReplyValidationError) ErrorName() string { return "HelloReplyValidationError" }

// Error satisfies the builtin error interface
func (e HelloReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReplyValidationError{}

// Validate checks the field values on PushMqttReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMqttReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMqttReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMqttReqMultiError, or
// nil if none found.
func (m *PushMqttReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMqttReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for Body

	// no validation rules for OrgId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return PushMqttReqMultiError(errors)
	}

	return nil
}

// PushMqttReqMultiError is an error wrapping multiple validation errors
// returned by PushMqttReq.ValidateAll() if the designated constraints aren't met.
type PushMqttReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMqttReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMqttReqMultiError) AllErrors() []error { return m }

// PushMqttReqValidationError is the validation error returned by
// PushMqttReq.Validate if the designated constraints aren't met.
type PushMqttReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMqttReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMqttReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMqttReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMqttReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMqttReqValidationError) ErrorName() string { return "PushMqttReqValidationError" }

// Error satisfies the builtin error interface
func (e PushMqttReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMqttReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMqttReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMqttReqValidationError{}

// Validate checks the field values on PushMqttReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMqttReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMqttReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMqttReplyMultiError, or
// nil if none found.
func (m *PushMqttReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMqttReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushMqttReplyMultiError(errors)
	}

	return nil
}

// PushMqttReplyMultiError is an error wrapping multiple validation errors
// returned by PushMqttReply.ValidateAll() if the designated constraints
// aren't met.
type PushMqttReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMqttReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMqttReplyMultiError) AllErrors() []error { return m }

// PushMqttReplyValidationError is the validation error returned by
// PushMqttReply.Validate if the designated constraints aren't met.
type PushMqttReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMqttReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMqttReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMqttReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMqttReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMqttReplyValidationError) ErrorName() string { return "PushMqttReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushMqttReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMqttReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMqttReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMqttReplyValidationError{}

// Validate checks the field values on GenerateMqttKeyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateMqttKeyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMqttKeyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMqttKeyReqMultiError, or nil if none found.
func (m *GenerateMqttKeyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMqttKeyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelType

	// no validation rules for OrgId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GenerateMqttKeyReqMultiError(errors)
	}

	return nil
}

// GenerateMqttKeyReqMultiError is an error wrapping multiple validation errors
// returned by GenerateMqttKeyReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateMqttKeyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMqttKeyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMqttKeyReqMultiError) AllErrors() []error { return m }

// GenerateMqttKeyReqValidationError is the validation error returned by
// GenerateMqttKeyReq.Validate if the designated constraints aren't met.
type GenerateMqttKeyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMqttKeyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMqttKeyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMqttKeyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMqttKeyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMqttKeyReqValidationError) ErrorName() string {
	return "GenerateMqttKeyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateMqttKeyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMqttKeyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMqttKeyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMqttKeyReqValidationError{}

// Validate checks the field values on GenerateMqttKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateMqttKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMqttKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMqttKeyReplyMultiError, or nil if none found.
func (m *GenerateMqttKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMqttKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Channel

	// no validation rules for Address

	if len(errors) > 0 {
		return GenerateMqttKeyReplyMultiError(errors)
	}

	return nil
}

// GenerateMqttKeyReplyMultiError is an error wrapping multiple validation
// errors returned by GenerateMqttKeyReply.ValidateAll() if the designated
// constraints aren't met.
type GenerateMqttKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMqttKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMqttKeyReplyMultiError) AllErrors() []error { return m }

// GenerateMqttKeyReplyValidationError is the validation error returned by
// GenerateMqttKeyReply.Validate if the designated constraints aren't met.
type GenerateMqttKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMqttKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMqttKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMqttKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMqttKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMqttKeyReplyValidationError) ErrorName() string {
	return "GenerateMqttKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateMqttKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMqttKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMqttKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMqttKeyReplyValidationError{}

// Validate checks the field values on PushSmsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushSmsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushSmsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushSmsReqMultiError, or
// nil if none found.
func (m *PushSmsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushSmsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignName

	// no validation rules for TemplateCode

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushSmsReqValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushSmsReqValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushSmsReqValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushSmsReqMultiError(errors)
	}

	return nil
}

// PushSmsReqMultiError is an error wrapping multiple validation errors
// returned by PushSmsReq.ValidateAll() if the designated constraints aren't met.
type PushSmsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushSmsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushSmsReqMultiError) AllErrors() []error { return m }

// PushSmsReqValidationError is the validation error returned by
// PushSmsReq.Validate if the designated constraints aren't met.
type PushSmsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushSmsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushSmsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushSmsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushSmsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushSmsReqValidationError) ErrorName() string { return "PushSmsReqValidationError" }

// Error satisfies the builtin error interface
func (e PushSmsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushSmsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushSmsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushSmsReqValidationError{}

// Validate checks the field values on PushSmsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushSmsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushSmsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushSmsReplyMultiError, or
// nil if none found.
func (m *PushSmsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushSmsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushSmsReplyMultiError(errors)
	}

	return nil
}

// PushSmsReplyMultiError is an error wrapping multiple validation errors
// returned by PushSmsReply.ValidateAll() if the designated constraints aren't met.
type PushSmsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushSmsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushSmsReplyMultiError) AllErrors() []error { return m }

// PushSmsReplyValidationError is the validation error returned by
// PushSmsReply.Validate if the designated constraints aren't met.
type PushSmsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushSmsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushSmsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushSmsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushSmsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushSmsReplyValidationError) ErrorName() string { return "PushSmsReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushSmsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushSmsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushSmsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushSmsReplyValidationError{}

// Validate checks the field values on PushMailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMailReqMultiError, or
// nil if none found.
func (m *PushMailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Content

	if len(errors) > 0 {
		return PushMailReqMultiError(errors)
	}

	return nil
}

// PushMailReqMultiError is an error wrapping multiple validation errors
// returned by PushMailReq.ValidateAll() if the designated constraints aren't met.
type PushMailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMailReqMultiError) AllErrors() []error { return m }

// PushMailReqValidationError is the validation error returned by
// PushMailReq.Validate if the designated constraints aren't met.
type PushMailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMailReqValidationError) ErrorName() string { return "PushMailReqValidationError" }

// Error satisfies the builtin error interface
func (e PushMailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMailReqValidationError{}

// Validate checks the field values on PushMailReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMailReplyMultiError, or
// nil if none found.
func (m *PushMailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushMailReplyMultiError(errors)
	}

	return nil
}

// PushMailReplyMultiError is an error wrapping multiple validation errors
// returned by PushMailReply.ValidateAll() if the designated constraints
// aren't met.
type PushMailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMailReplyMultiError) AllErrors() []error { return m }

// PushMailReplyValidationError is the validation error returned by
// PushMailReply.Validate if the designated constraints aren't met.
type PushMailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMailReplyValidationError) ErrorName() string { return "PushMailReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushMailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMailReplyValidationError{}

// Validate checks the field values on PushCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushCardReqMultiError, or
// nil if none found.
func (m *PushCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for SourceChannel

	// no validation rules for OutOrgId

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCardReqValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCardReqValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCardReqValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushCardReqMultiError(errors)
	}

	return nil
}

// PushCardReqMultiError is an error wrapping multiple validation errors
// returned by PushCardReq.ValidateAll() if the designated constraints aren't met.
type PushCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushCardReqMultiError) AllErrors() []error { return m }

// PushCardReqValidationError is the validation error returned by
// PushCardReq.Validate if the designated constraints aren't met.
type PushCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushCardReqValidationError) ErrorName() string { return "PushCardReqValidationError" }

// Error satisfies the builtin error interface
func (e PushCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushCardReqValidationError{}

// Validate checks the field values on PushCardReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushCardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushCardReplyMultiError, or
// nil if none found.
func (m *PushCardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushCardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushCardReplyMultiError(errors)
	}

	return nil
}

// PushCardReplyMultiError is an error wrapping multiple validation errors
// returned by PushCardReply.ValidateAll() if the designated constraints
// aren't met.
type PushCardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushCardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushCardReplyMultiError) AllErrors() []error { return m }

// PushCardReplyValidationError is the validation error returned by
// PushCardReply.Validate if the designated constraints aren't met.
type PushCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushCardReplyValidationError) ErrorName() string { return "PushCardReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushCardReplyValidationError{}

// Validate checks the field values on PushCardSimpleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushCardSimpleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushCardSimpleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushCardSimpleReqMultiError, or nil if none found.
func (m *PushCardSimpleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushCardSimpleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for SourceChannel

	switch m.To.(type) {

	case *PushCardSimpleReq_LcIds:

		if all {
			switch v := interface{}(m.GetLcIds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushCardSimpleReqValidationError{
						field:  "LcIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushCardSimpleReqValidationError{
						field:  "LcIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLcIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushCardSimpleReqValidationError{
					field:  "LcIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushCardSimpleReq_ChatIds:

		if all {
			switch v := interface{}(m.GetChatIds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushCardSimpleReqValidationError{
						field:  "ChatIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushCardSimpleReqValidationError{
						field:  "ChatIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChatIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushCardSimpleReqValidationError{
					field:  "ChatIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Card.(type) {

	case *PushCardSimpleReq_MarkdownCard:

		if all {
			switch v := interface{}(m.GetMarkdownCard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushCardSimpleReqValidationError{
						field:  "MarkdownCard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushCardSimpleReqValidationError{
						field:  "MarkdownCard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMarkdownCard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushCardSimpleReqValidationError{
					field:  "MarkdownCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushCardSimpleReqMultiError(errors)
	}

	return nil
}

// PushCardSimpleReqMultiError is an error wrapping multiple validation errors
// returned by PushCardSimpleReq.ValidateAll() if the designated constraints
// aren't met.
type PushCardSimpleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushCardSimpleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushCardSimpleReqMultiError) AllErrors() []error { return m }

// PushCardSimpleReqValidationError is the validation error returned by
// PushCardSimpleReq.Validate if the designated constraints aren't met.
type PushCardSimpleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushCardSimpleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushCardSimpleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushCardSimpleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushCardSimpleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushCardSimpleReqValidationError) ErrorName() string {
	return "PushCardSimpleReqValidationError"
}

// Error satisfies the builtin error interface
func (e PushCardSimpleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushCardSimpleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushCardSimpleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushCardSimpleReqValidationError{}

// Validate checks the field values on PushCardSimpleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushCardSimpleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushCardSimpleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushCardSimpleReplyMultiError, or nil if none found.
func (m *PushCardSimpleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushCardSimpleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushCardSimpleReplyMultiError(errors)
	}

	return nil
}

// PushCardSimpleReplyMultiError is an error wrapping multiple validation
// errors returned by PushCardSimpleReply.ValidateAll() if the designated
// constraints aren't met.
type PushCardSimpleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushCardSimpleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushCardSimpleReplyMultiError) AllErrors() []error { return m }

// PushCardSimpleReplyValidationError is the validation error returned by
// PushCardSimpleReply.Validate if the designated constraints aren't met.
type PushCardSimpleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushCardSimpleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushCardSimpleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushCardSimpleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushCardSimpleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushCardSimpleReplyValidationError) ErrorName() string {
	return "PushCardSimpleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PushCardSimpleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushCardSimpleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushCardSimpleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushCardSimpleReplyValidationError{}

// Validate checks the field values on GenerateCardReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateCardReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateCardReqMultiError, or nil if none found.
func (m *GenerateCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SourceChannel

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateCardReqValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateCardReqValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateCardReqValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateCardReqMultiError(errors)
	}

	return nil
}

// GenerateCardReqMultiError is an error wrapping multiple validation errors
// returned by GenerateCardReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateCardReqMultiError) AllErrors() []error { return m }

// GenerateCardReqValidationError is the validation error returned by
// GenerateCardReq.Validate if the designated constraints aren't met.
type GenerateCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateCardReqValidationError) ErrorName() string { return "GenerateCardReqValidationError" }

// Error satisfies the builtin error interface
func (e GenerateCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateCardReqValidationError{}

// Validate checks the field values on GenerateCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateCardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateCardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateCardReplyMultiError, or nil if none found.
func (m *GenerateCardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateCardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Card

	if len(errors) > 0 {
		return GenerateCardReplyMultiError(errors)
	}

	return nil
}

// GenerateCardReplyMultiError is an error wrapping multiple validation errors
// returned by GenerateCardReply.ValidateAll() if the designated constraints
// aren't met.
type GenerateCardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateCardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateCardReplyMultiError) AllErrors() []error { return m }

// GenerateCardReplyValidationError is the validation error returned by
// GenerateCardReply.Validate if the designated constraints aren't met.
type GenerateCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateCardReplyValidationError) ErrorName() string {
	return "GenerateCardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateCardReplyValidationError{}
