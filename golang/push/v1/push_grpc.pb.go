// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: push.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushClient is the client API for Push service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushClient interface {
	// Push Mqtt
	PushMqtt(ctx context.Context, in *PushMqttReq, opts ...grpc.CallOption) (*PushMqttReply, error)
	// Generate Mqtt Key
	GenerateMqttKey(ctx context.Context, in *GenerateMqttKeyReq, opts ...grpc.CallOption) (*GenerateMqttKeyReply, error)
	// Push Mail
	PushMail(ctx context.Context, in *PushMailReq, opts ...grpc.CallOption) (*PushMailReply, error)
	// Push Sms
	PushSms(ctx context.Context, in *PushSmsReq, opts ...grpc.CallOption) (*PushSmsReply, error)
	// Push Card
	PushCard(ctx context.Context, in *PushCardReq, opts ...grpc.CallOption) (*PushCardReply, error)
	// Push Card Simple
	PushCardSimple(ctx context.Context, in *PushCardSimpleReq, opts ...grpc.CallOption) (*PushCardSimpleReply, error)
	// Generate Card
	GenerateCard(ctx context.Context, in *GenerateCardReq, opts ...grpc.CallOption) (*GenerateCardReply, error)
}

type pushClient struct {
	cc grpc.ClientConnInterface
}

func NewPushClient(cc grpc.ClientConnInterface) PushClient {
	return &pushClient{cc}
}

func (c *pushClient) PushMqtt(ctx context.Context, in *PushMqttReq, opts ...grpc.CallOption) (*PushMqttReply, error) {
	out := new(PushMqttReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/PushMqtt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) GenerateMqttKey(ctx context.Context, in *GenerateMqttKeyReq, opts ...grpc.CallOption) (*GenerateMqttKeyReply, error) {
	out := new(GenerateMqttKeyReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/GenerateMqttKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushMail(ctx context.Context, in *PushMailReq, opts ...grpc.CallOption) (*PushMailReply, error) {
	out := new(PushMailReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/PushMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushSms(ctx context.Context, in *PushSmsReq, opts ...grpc.CallOption) (*PushSmsReply, error) {
	out := new(PushSmsReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/PushSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushCard(ctx context.Context, in *PushCardReq, opts ...grpc.CallOption) (*PushCardReply, error) {
	out := new(PushCardReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/PushCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushCardSimple(ctx context.Context, in *PushCardSimpleReq, opts ...grpc.CallOption) (*PushCardSimpleReply, error) {
	out := new(PushCardSimpleReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/PushCardSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) GenerateCard(ctx context.Context, in *GenerateCardReq, opts ...grpc.CallOption) (*GenerateCardReply, error) {
	out := new(GenerateCardReply)
	err := c.cc.Invoke(ctx, "/push.v1.Push/GenerateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServer is the server API for Push service.
// All implementations must embed UnimplementedPushServer
// for forward compatibility
type PushServer interface {
	// Push Mqtt
	PushMqtt(context.Context, *PushMqttReq) (*PushMqttReply, error)
	// Generate Mqtt Key
	GenerateMqttKey(context.Context, *GenerateMqttKeyReq) (*GenerateMqttKeyReply, error)
	// Push Mail
	PushMail(context.Context, *PushMailReq) (*PushMailReply, error)
	// Push Sms
	PushSms(context.Context, *PushSmsReq) (*PushSmsReply, error)
	// Push Card
	PushCard(context.Context, *PushCardReq) (*PushCardReply, error)
	// Push Card Simple
	PushCardSimple(context.Context, *PushCardSimpleReq) (*PushCardSimpleReply, error)
	// Generate Card
	GenerateCard(context.Context, *GenerateCardReq) (*GenerateCardReply, error)
	mustEmbedUnimplementedPushServer()
}

// UnimplementedPushServer must be embedded to have forward compatible implementations.
type UnimplementedPushServer struct {
}

func (UnimplementedPushServer) PushMqtt(context.Context, *PushMqttReq) (*PushMqttReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMqtt not implemented")
}
func (UnimplementedPushServer) GenerateMqttKey(context.Context, *GenerateMqttKeyReq) (*GenerateMqttKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMqttKey not implemented")
}
func (UnimplementedPushServer) PushMail(context.Context, *PushMailReq) (*PushMailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMail not implemented")
}
func (UnimplementedPushServer) PushSms(context.Context, *PushSmsReq) (*PushSmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSms not implemented")
}
func (UnimplementedPushServer) PushCard(context.Context, *PushCardReq) (*PushCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushCard not implemented")
}
func (UnimplementedPushServer) PushCardSimple(context.Context, *PushCardSimpleReq) (*PushCardSimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushCardSimple not implemented")
}
func (UnimplementedPushServer) GenerateCard(context.Context, *GenerateCardReq) (*GenerateCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCard not implemented")
}
func (UnimplementedPushServer) mustEmbedUnimplementedPushServer() {}

// UnsafePushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServer will
// result in compilation errors.
type UnsafePushServer interface {
	mustEmbedUnimplementedPushServer()
}

func RegisterPushServer(s grpc.ServiceRegistrar, srv PushServer) {
	s.RegisterService(&Push_ServiceDesc, srv)
}

func _Push_PushMqtt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMqttReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushMqtt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/PushMqtt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushMqtt(ctx, req.(*PushMqttReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_GenerateMqttKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMqttKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).GenerateMqttKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/GenerateMqttKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).GenerateMqttKey(ctx, req.(*GenerateMqttKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/PushMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushMail(ctx, req.(*PushMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/PushSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushSms(ctx, req.(*PushSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/PushCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushCard(ctx, req.(*PushCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushCardSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushCardSimpleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushCardSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/PushCardSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushCardSimple(ctx, req.(*PushCardSimpleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_GenerateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).GenerateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.v1.Push/GenerateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).GenerateCard(ctx, req.(*GenerateCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Push_ServiceDesc is the grpc.ServiceDesc for Push service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Push_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "push.v1.Push",
	HandlerType: (*PushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMqtt",
			Handler:    _Push_PushMqtt_Handler,
		},
		{
			MethodName: "GenerateMqttKey",
			Handler:    _Push_GenerateMqttKey_Handler,
		},
		{
			MethodName: "PushMail",
			Handler:    _Push_PushMail_Handler,
		},
		{
			MethodName: "PushSms",
			Handler:    _Push_PushSms_Handler,
		},
		{
			MethodName: "PushCard",
			Handler:    _Push_PushCard_Handler,
		},
		{
			MethodName: "PushCardSimple",
			Handler:    _Push_PushCardSimple_Handler,
		},
		{
			MethodName: "GenerateCard",
			Handler:    _Push_GenerateCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push.proto",
}
