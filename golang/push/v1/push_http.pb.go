// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PushHTTPServer interface {
	GenerateCard(context.Context, *GenerateCardReq) (*GenerateCardReply, error)
	GenerateMqttKey(context.Context, *GenerateMqttKeyReq) (*GenerateMqttKeyReply, error)
	PushCard(context.Context, *PushCardReq) (*PushCardReply, error)
	PushCardSimple(context.Context, *PushCardSimpleReq) (*PushCardSimpleReply, error)
	PushMail(context.Context, *PushMailReq) (*PushMailReply, error)
	PushMqtt(context.Context, *PushMqttReq) (*PushMqttReply, error)
	PushSms(context.Context, *PushSmsReq) (*PushSmsReply, error)
}

func RegisterPushHTTPServer(s *http.Server, srv PushHTTPServer) {
	r := s.Route("/")
	r.POST("/inner/v1/push/mqtt", _Push_PushMqtt0_HTTP_Handler(srv))
	r.POST("/inner/v1/generate/mqtt/key", _Push_GenerateMqttKey0_HTTP_Handler(srv))
	r.POST("/inner/v1/push/mail", _Push_PushMail0_HTTP_Handler(srv))
	r.POST("/inner/v1/push/sms", _Push_PushSms0_HTTP_Handler(srv))
	r.POST("/inner/v1/push/card", _Push_PushCard0_HTTP_Handler(srv))
	r.POST("/inner/v1/push/card/simple", _Push_PushCardSimple0_HTTP_Handler(srv))
	r.POST("/inner/v1/generate/card", _Push_GenerateCard0_HTTP_Handler(srv))
}

func _Push_PushMqtt0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushMqttReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/PushMqtt")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushMqtt(ctx, req.(*PushMqttReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushMqttReply)
		return ctx.Result(200, reply)
	}
}

func _Push_GenerateMqttKey0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateMqttKeyReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/GenerateMqttKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateMqttKey(ctx, req.(*GenerateMqttKeyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateMqttKeyReply)
		return ctx.Result(200, reply)
	}
}

func _Push_PushMail0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushMailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/PushMail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushMail(ctx, req.(*PushMailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushMailReply)
		return ctx.Result(200, reply)
	}
}

func _Push_PushSms0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushSmsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/PushSms")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushSms(ctx, req.(*PushSmsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushSmsReply)
		return ctx.Result(200, reply)
	}
}

func _Push_PushCard0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/PushCard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushCard(ctx, req.(*PushCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushCardReply)
		return ctx.Result(200, reply)
	}
}

func _Push_PushCardSimple0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushCardSimpleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/PushCardSimple")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushCardSimple(ctx, req.(*PushCardSimpleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushCardSimpleReply)
		return ctx.Result(200, reply)
	}
}

func _Push_GenerateCard0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/push.v1.Push/GenerateCard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateCard(ctx, req.(*GenerateCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateCardReply)
		return ctx.Result(200, reply)
	}
}

type PushHTTPClient interface {
	GenerateCard(ctx context.Context, req *GenerateCardReq, opts ...http.CallOption) (rsp *GenerateCardReply, err error)
	GenerateMqttKey(ctx context.Context, req *GenerateMqttKeyReq, opts ...http.CallOption) (rsp *GenerateMqttKeyReply, err error)
	PushCard(ctx context.Context, req *PushCardReq, opts ...http.CallOption) (rsp *PushCardReply, err error)
	PushCardSimple(ctx context.Context, req *PushCardSimpleReq, opts ...http.CallOption) (rsp *PushCardSimpleReply, err error)
	PushMail(ctx context.Context, req *PushMailReq, opts ...http.CallOption) (rsp *PushMailReply, err error)
	PushMqtt(ctx context.Context, req *PushMqttReq, opts ...http.CallOption) (rsp *PushMqttReply, err error)
	PushSms(ctx context.Context, req *PushSmsReq, opts ...http.CallOption) (rsp *PushSmsReply, err error)
}

type PushHTTPClientImpl struct {
	cc *http.Client
}

func NewPushHTTPClient(client *http.Client) PushHTTPClient {
	return &PushHTTPClientImpl{client}
}

func (c *PushHTTPClientImpl) GenerateCard(ctx context.Context, in *GenerateCardReq, opts ...http.CallOption) (*GenerateCardReply, error) {
	var out GenerateCardReply
	pattern := "/inner/v1/generate/card"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/GenerateCard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PushHTTPClientImpl) GenerateMqttKey(ctx context.Context, in *GenerateMqttKeyReq, opts ...http.CallOption) (*GenerateMqttKeyReply, error) {
	var out GenerateMqttKeyReply
	pattern := "/inner/v1/generate/mqtt/key"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/GenerateMqttKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PushHTTPClientImpl) PushCard(ctx context.Context, in *PushCardReq, opts ...http.CallOption) (*PushCardReply, error) {
	var out PushCardReply
	pattern := "/inner/v1/push/card"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/PushCard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PushHTTPClientImpl) PushCardSimple(ctx context.Context, in *PushCardSimpleReq, opts ...http.CallOption) (*PushCardSimpleReply, error) {
	var out PushCardSimpleReply
	pattern := "/inner/v1/push/card/simple"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/PushCardSimple"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PushHTTPClientImpl) PushMail(ctx context.Context, in *PushMailReq, opts ...http.CallOption) (*PushMailReply, error) {
	var out PushMailReply
	pattern := "/inner/v1/push/mail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/PushMail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PushHTTPClientImpl) PushMqtt(ctx context.Context, in *PushMqttReq, opts ...http.CallOption) (*PushMqttReply, error) {
	var out PushMqttReply
	pattern := "/inner/v1/push/mqtt"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/PushMqtt"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PushHTTPClientImpl) PushSms(ctx context.Context, in *PushSmsReq, opts ...http.CallOption) (*PushSmsReply, error) {
	var out PushSmsReply
	pattern := "/inner/v1/push/sms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/push.v1.Push/PushSms"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
