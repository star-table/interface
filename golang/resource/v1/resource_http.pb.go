// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ResourceHTTPServer interface {
	CreateAttachment(context.Context, *CreateAttachmentRequest) (*CreateAttachmentResponse, error)
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	ListAttachments(context.Context, *ListAttachmentsRequest) (*ListAttachmentsResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.POST("/inner/v1/resource/attachment/create", _Resource_CreateAttachment0_HTTP_Handler(srv))
	r.POST("/inner/v1/resource/attachment/delete", _Resource_DeleteAttachment0_HTTP_Handler(srv))
	r.POST("/inner/v1/resource/attachment/list", _Resource_ListAttachments0_HTTP_Handler(srv))
	r.POST("/inner/v1/resource/file/list", _Resource_ListFiles0_HTTP_Handler(srv))
	r.POST("/inner/v1/resource/getPolicy", _Resource_GetPolicy0_HTTP_Handler(srv))
}

func _Resource_CreateAttachment0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAttachmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resource.v1.Resource/CreateAttachment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAttachment(ctx, req.(*CreateAttachmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAttachmentResponse)
		return ctx.Result(200, reply)
	}
}

func _Resource_DeleteAttachment0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAttachmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resource.v1.Resource/DeleteAttachment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAttachmentResponse)
		return ctx.Result(200, reply)
	}
}

func _Resource_ListAttachments0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAttachmentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resource.v1.Resource/ListAttachments")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAttachments(ctx, req.(*ListAttachmentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAttachmentsResponse)
		return ctx.Result(200, reply)
	}
}

func _Resource_ListFiles0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFilesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resource.v1.Resource/ListFiles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFiles(ctx, req.(*ListFilesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFilesResponse)
		return ctx.Result(200, reply)
	}
}

func _Resource_GetPolicy0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resource.v1.Resource/GetPolicy")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPolicy(ctx, req.(*GetPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPolicyResponse)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	CreateAttachment(ctx context.Context, req *CreateAttachmentRequest, opts ...http.CallOption) (rsp *CreateAttachmentResponse, err error)
	DeleteAttachment(ctx context.Context, req *DeleteAttachmentRequest, opts ...http.CallOption) (rsp *DeleteAttachmentResponse, err error)
	GetPolicy(ctx context.Context, req *GetPolicyRequest, opts ...http.CallOption) (rsp *GetPolicyResponse, err error)
	ListAttachments(ctx context.Context, req *ListAttachmentsRequest, opts ...http.CallOption) (rsp *ListAttachmentsResponse, err error)
	ListFiles(ctx context.Context, req *ListFilesRequest, opts ...http.CallOption) (rsp *ListFilesResponse, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...http.CallOption) (*CreateAttachmentResponse, error) {
	var out CreateAttachmentResponse
	pattern := "/inner/v1/resource/attachment/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resource.v1.Resource/CreateAttachment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...http.CallOption) (*DeleteAttachmentResponse, error) {
	var out DeleteAttachmentResponse
	pattern := "/inner/v1/resource/attachment/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resource.v1.Resource/DeleteAttachment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...http.CallOption) (*GetPolicyResponse, error) {
	var out GetPolicyResponse
	pattern := "/inner/v1/resource/getPolicy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resource.v1.Resource/GetPolicy"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) ListAttachments(ctx context.Context, in *ListAttachmentsRequest, opts ...http.CallOption) (*ListAttachmentsResponse, error) {
	var out ListAttachmentsResponse
	pattern := "/inner/v1/resource/attachment/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resource.v1.Resource/ListAttachments"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...http.CallOption) (*ListFilesResponse, error) {
	var out ListFilesResponse
	pattern := "/inner/v1/resource/file/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resource.v1.Resource/ListFiles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
