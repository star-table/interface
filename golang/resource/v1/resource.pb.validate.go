// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttachmentRequestMultiError, or nil if none found.
func (m *CreateAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAttachmentRequestMultiError(errors)
	}

	return nil
}

// CreateAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttachmentRequestMultiError) AllErrors() []error { return m }

// CreateAttachmentRequestValidationError is the validation error returned by
// CreateAttachmentRequest.Validate if the designated constraints aren't met.
type CreateAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttachmentRequestValidationError) ErrorName() string {
	return "CreateAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttachmentRequestValidationError{}

// Validate checks the field values on CreateAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttachmentResponseMultiError, or nil if none found.
func (m *CreateAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAttachmentResponseMultiError(errors)
	}

	return nil
}

// CreateAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttachmentResponseMultiError) AllErrors() []error { return m }

// CreateAttachmentResponseValidationError is the validation error returned by
// CreateAttachmentResponse.Validate if the designated constraints aren't met.
type CreateAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttachmentResponseValidationError) ErrorName() string {
	return "CreateAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttachmentResponseValidationError{}

// Validate checks the field values on DeleteAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttachmentRequestMultiError, or nil if none found.
func (m *DeleteAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAttachmentRequestMultiError(errors)
	}

	return nil
}

// DeleteAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttachmentRequestMultiError) AllErrors() []error { return m }

// DeleteAttachmentRequestValidationError is the validation error returned by
// DeleteAttachmentRequest.Validate if the designated constraints aren't met.
type DeleteAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttachmentRequestValidationError) ErrorName() string {
	return "DeleteAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttachmentRequestValidationError{}

// Validate checks the field values on DeleteAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttachmentResponseMultiError, or nil if none found.
func (m *DeleteAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAttachmentResponseMultiError(errors)
	}

	return nil
}

// DeleteAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttachmentResponseMultiError) AllErrors() []error { return m }

// DeleteAttachmentResponseValidationError is the validation error returned by
// DeleteAttachmentResponse.Validate if the designated constraints aren't met.
type DeleteAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttachmentResponseValidationError) ErrorName() string {
	return "DeleteAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttachmentResponseValidationError{}

// Validate checks the field values on ListAttachmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentsRequestMultiError, or nil if none found.
func (m *ListAttachmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAttachmentsRequestMultiError(errors)
	}

	return nil
}

// ListAttachmentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentsRequestMultiError) AllErrors() []error { return m }

// ListAttachmentsRequestValidationError is the validation error returned by
// ListAttachmentsRequest.Validate if the designated constraints aren't met.
type ListAttachmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentsRequestValidationError) ErrorName() string {
	return "ListAttachmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentsRequestValidationError{}

// Validate checks the field values on ListAttachmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentsResponseMultiError, or nil if none found.
func (m *ListAttachmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAttachmentsResponseMultiError(errors)
	}

	return nil
}

// ListAttachmentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentsResponseMultiError) AllErrors() []error { return m }

// ListAttachmentsResponseValidationError is the validation error returned by
// ListAttachmentsResponse.Validate if the designated constraints aren't met.
type ListAttachmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentsResponseValidationError) ErrorName() string {
	return "ListAttachmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentsResponseValidationError{}

// Validate checks the field values on ListFilesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesRequestMultiError, or nil if none found.
func (m *ListFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFilesRequestMultiError(errors)
	}

	return nil
}

// ListFilesRequestMultiError is an error wrapping multiple validation errors
// returned by ListFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesRequestMultiError) AllErrors() []error { return m }

// ListFilesRequestValidationError is the validation error returned by
// ListFilesRequest.Validate if the designated constraints aren't met.
type ListFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesRequestValidationError) ErrorName() string { return "ListFilesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesRequestValidationError{}

// Validate checks the field values on ListFilesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesResponseMultiError, or nil if none found.
func (m *ListFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFilesResponseMultiError(errors)
	}

	return nil
}

// ListFilesResponseMultiError is an error wrapping multiple validation errors
// returned by ListFilesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesResponseMultiError) AllErrors() []error { return m }

// ListFilesResponseValidationError is the validation error returned by
// ListFilesResponse.Validate if the designated constraints aren't met.
type ListFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesResponseValidationError) ErrorName() string {
	return "ListFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesResponseValidationError{}

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyRequestMultiError, or nil if none found.
func (m *GetPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPolicyRequestMultiError(errors)
	}

	return nil
}

// GetPolicyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPolicyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyRequestMultiError) AllErrors() []error { return m }

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

// Validate checks the field values on GetPolicyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyResponseMultiError, or nil if none found.
func (m *GetPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPolicyResponseMultiError(errors)
	}

	return nil
}

// GetPolicyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPolicyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyResponseMultiError) AllErrors() []error { return m }

// GetPolicyResponseValidationError is the validation error returned by
// GetPolicyResponse.Validate if the designated constraints aren't met.
type GetPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyResponseValidationError) ErrorName() string {
	return "GetPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyResponseValidationError{}
