// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: process_define.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkFlowProcessDefineClient is the client API for WorkFlowProcessDefine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkFlowProcessDefineClient interface {
	// SaveProcessDefine 保存或者创建流程
	SaveProcessDefine(ctx context.Context, in *SaveProcessDefineRequest, opts ...grpc.CallOption) (*SaveProcessDefineReply, error)
	QueryProcessDefines(ctx context.Context, in *QueryProcessDefinesRequest, opts ...grpc.CallOption) (*QueryProcessDefinesReply, error)
	DeleteProcessDefine(ctx context.Context, in *DeleteProcessDefineRequest, opts ...grpc.CallOption) (*DeleteProcessDefineReply, error)
}

type workFlowProcessDefineClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkFlowProcessDefineClient(cc grpc.ClientConnInterface) WorkFlowProcessDefineClient {
	return &workFlowProcessDefineClient{cc}
}

func (c *workFlowProcessDefineClient) SaveProcessDefine(ctx context.Context, in *SaveProcessDefineRequest, opts ...grpc.CallOption) (*SaveProcessDefineReply, error) {
	out := new(SaveProcessDefineReply)
	err := c.cc.Invoke(ctx, "/go_workflow.v1.WorkFlowProcessDefine/SaveProcessDefine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowProcessDefineClient) QueryProcessDefines(ctx context.Context, in *QueryProcessDefinesRequest, opts ...grpc.CallOption) (*QueryProcessDefinesReply, error) {
	out := new(QueryProcessDefinesReply)
	err := c.cc.Invoke(ctx, "/go_workflow.v1.WorkFlowProcessDefine/QueryProcessDefines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowProcessDefineClient) DeleteProcessDefine(ctx context.Context, in *DeleteProcessDefineRequest, opts ...grpc.CallOption) (*DeleteProcessDefineReply, error) {
	out := new(DeleteProcessDefineReply)
	err := c.cc.Invoke(ctx, "/go_workflow.v1.WorkFlowProcessDefine/DeleteProcessDefine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkFlowProcessDefineServer is the server API for WorkFlowProcessDefine service.
// All implementations must embed UnimplementedWorkFlowProcessDefineServer
// for forward compatibility
type WorkFlowProcessDefineServer interface {
	// SaveProcessDefine 保存或者创建流程
	SaveProcessDefine(context.Context, *SaveProcessDefineRequest) (*SaveProcessDefineReply, error)
	QueryProcessDefines(context.Context, *QueryProcessDefinesRequest) (*QueryProcessDefinesReply, error)
	DeleteProcessDefine(context.Context, *DeleteProcessDefineRequest) (*DeleteProcessDefineReply, error)
	mustEmbedUnimplementedWorkFlowProcessDefineServer()
}

// UnimplementedWorkFlowProcessDefineServer must be embedded to have forward compatible implementations.
type UnimplementedWorkFlowProcessDefineServer struct {
}

func (UnimplementedWorkFlowProcessDefineServer) SaveProcessDefine(context.Context, *SaveProcessDefineRequest) (*SaveProcessDefineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProcessDefine not implemented")
}
func (UnimplementedWorkFlowProcessDefineServer) QueryProcessDefines(context.Context, *QueryProcessDefinesRequest) (*QueryProcessDefinesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProcessDefines not implemented")
}
func (UnimplementedWorkFlowProcessDefineServer) DeleteProcessDefine(context.Context, *DeleteProcessDefineRequest) (*DeleteProcessDefineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcessDefine not implemented")
}
func (UnimplementedWorkFlowProcessDefineServer) mustEmbedUnimplementedWorkFlowProcessDefineServer() {}

// UnsafeWorkFlowProcessDefineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkFlowProcessDefineServer will
// result in compilation errors.
type UnsafeWorkFlowProcessDefineServer interface {
	mustEmbedUnimplementedWorkFlowProcessDefineServer()
}

func RegisterWorkFlowProcessDefineServer(s grpc.ServiceRegistrar, srv WorkFlowProcessDefineServer) {
	s.RegisterService(&WorkFlowProcessDefine_ServiceDesc, srv)
}

func _WorkFlowProcessDefine_SaveProcessDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProcessDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowProcessDefineServer).SaveProcessDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_workflow.v1.WorkFlowProcessDefine/SaveProcessDefine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowProcessDefineServer).SaveProcessDefine(ctx, req.(*SaveProcessDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlowProcessDefine_QueryProcessDefines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProcessDefinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowProcessDefineServer).QueryProcessDefines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_workflow.v1.WorkFlowProcessDefine/QueryProcessDefines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowProcessDefineServer).QueryProcessDefines(ctx, req.(*QueryProcessDefinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlowProcessDefine_DeleteProcessDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowProcessDefineServer).DeleteProcessDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_workflow.v1.WorkFlowProcessDefine/DeleteProcessDefine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowProcessDefineServer).DeleteProcessDefine(ctx, req.(*DeleteProcessDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkFlowProcessDefine_ServiceDesc is the grpc.ServiceDesc for WorkFlowProcessDefine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkFlowProcessDefine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_workflow.v1.WorkFlowProcessDefine",
	HandlerType: (*WorkFlowProcessDefineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveProcessDefine",
			Handler:    _WorkFlowProcessDefine_SaveProcessDefine_Handler,
		},
		{
			MethodName: "QueryProcessDefines",
			Handler:    _WorkFlowProcessDefine_QueryProcessDefines_Handler,
		},
		{
			MethodName: "DeleteProcessDefine",
			Handler:    _WorkFlowProcessDefine_DeleteProcessDefine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "process_define.proto",
}
