// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: process_instance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StartRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartRequestMultiError, or
// nil if none found.
func (m *StartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := StartRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := StartRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProcessDefineId() <= 0 {
		err := StartRequestValidationError{
			field:  "ProcessDefineId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := StartRequestValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProcessName

	// no validation rules for Values

	// no validation rules for DataId

	{
		sorted_keys := make([]string, len(m.GetParticipants()))
		i := 0
		for key := range m.GetParticipants() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParticipants()[key]
			_ = val

			// no validation rules for Participants[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StartRequestValidationError{
							field:  fmt.Sprintf("Participants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StartRequestValidationError{
							field:  fmt.Sprintf("Participants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StartRequestValidationError{
						field:  fmt.Sprintf("Participants[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return StartRequestMultiError(errors)
	}

	return nil
}

// StartRequestMultiError is an error wrapping multiple validation errors
// returned by StartRequest.ValidateAll() if the designated constraints aren't met.
type StartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRequestMultiError) AllErrors() []error { return m }

// StartRequestValidationError is the validation error returned by
// StartRequest.Validate if the designated constraints aren't met.
type StartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRequestValidationError) ErrorName() string { return "StartRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRequestValidationError{}

// Validate checks the field values on StartReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartReplyMultiError, or
// nil if none found.
func (m *StartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StartReplyMultiError(errors)
	}

	return nil
}

// StartReplyMultiError is an error wrapping multiple validation errors
// returned by StartReply.ValidateAll() if the designated constraints aren't met.
type StartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartReplyMultiError) AllErrors() []error { return m }

// StartReplyValidationError is the validation error returned by
// StartReply.Validate if the designated constraints aren't met.
type StartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartReplyValidationError) ErrorName() string { return "StartReplyValidationError" }

// Error satisfies the builtin error interface
func (e StartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartReplyValidationError{}

// Validate checks the field values on StartByConditionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartByConditionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartByConditionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartByConditionsRequestMultiError, or nil if none found.
func (m *StartByConditionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartByConditionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := StartByConditionsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := StartByConditionsRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := StartByConditionsRequestValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := StartByConditionsRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProcessName

	for idx, item := range m.GetDatas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartByConditionsRequestValidationError{
						field:  fmt.Sprintf("Datas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartByConditionsRequestValidationError{
						field:  fmt.Sprintf("Datas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartByConditionsRequestValidationError{
					field:  fmt.Sprintf("Datas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StartByConditionsRequestMultiError(errors)
	}

	return nil
}

// StartByConditionsRequestMultiError is an error wrapping multiple validation
// errors returned by StartByConditionsRequest.ValidateAll() if the designated
// constraints aren't met.
type StartByConditionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartByConditionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartByConditionsRequestMultiError) AllErrors() []error { return m }

// StartByConditionsRequestValidationError is the validation error returned by
// StartByConditionsRequest.Validate if the designated constraints aren't met.
type StartByConditionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartByConditionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartByConditionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartByConditionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartByConditionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartByConditionsRequestValidationError) ErrorName() string {
	return "StartByConditionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartByConditionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartByConditionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartByConditionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartByConditionsRequestValidationError{}

// Validate checks the field values on StartData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartDataMultiError, or nil
// if none found.
func (m *StartData) ValidateAll() error {
	return m.validate(true)
}

func (m *StartData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Values

	// no validation rules for DataId

	{
		sorted_keys := make([]string, len(m.GetParticipants()))
		i := 0
		for key := range m.GetParticipants() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParticipants()[key]
			_ = val

			// no validation rules for Participants[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StartDataValidationError{
							field:  fmt.Sprintf("Participants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StartDataValidationError{
							field:  fmt.Sprintf("Participants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StartDataValidationError{
						field:  fmt.Sprintf("Participants[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return StartDataMultiError(errors)
	}

	return nil
}

// StartDataMultiError is an error wrapping multiple validation errors returned
// by StartData.ValidateAll() if the designated constraints aren't met.
type StartDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartDataMultiError) AllErrors() []error { return m }

// StartDataValidationError is the validation error returned by
// StartData.Validate if the designated constraints aren't met.
type StartDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartDataValidationError) ErrorName() string { return "StartDataValidationError" }

// Error satisfies the builtin error interface
func (e StartDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartDataValidationError{}

// Validate checks the field values on StartByConditionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartByConditionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartByConditionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartByConditionsReplyMultiError, or nil if none found.
func (m *StartByConditionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StartByConditionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartByConditionsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartByConditionsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartByConditionsReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StartByConditionsReplyMultiError(errors)
	}

	return nil
}

// StartByConditionsReplyMultiError is an error wrapping multiple validation
// errors returned by StartByConditionsReply.ValidateAll() if the designated
// constraints aren't met.
type StartByConditionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartByConditionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartByConditionsReplyMultiError) AllErrors() []error { return m }

// StartByConditionsReplyValidationError is the validation error returned by
// StartByConditionsReply.Validate if the designated constraints aren't met.
type StartByConditionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartByConditionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartByConditionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartByConditionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartByConditionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartByConditionsReplyValidationError) ErrorName() string {
	return "StartByConditionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e StartByConditionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartByConditionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartByConditionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartByConditionsReplyValidationError{}

// Validate checks the field values on StartByConditionsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartByConditionsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartByConditionsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartByConditionsDataMultiError, or nil if none found.
func (m *StartByConditionsData) ValidateAll() error {
	return m.validate(true)
}

func (m *StartByConditionsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DataId

	if len(errors) > 0 {
		return StartByConditionsDataMultiError(errors)
	}

	return nil
}

// StartByConditionsDataMultiError is an error wrapping multiple validation
// errors returned by StartByConditionsData.ValidateAll() if the designated
// constraints aren't met.
type StartByConditionsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartByConditionsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartByConditionsDataMultiError) AllErrors() []error { return m }

// StartByConditionsDataValidationError is the validation error returned by
// StartByConditionsData.Validate if the designated constraints aren't met.
type StartByConditionsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartByConditionsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartByConditionsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartByConditionsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartByConditionsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartByConditionsDataValidationError) ErrorName() string {
	return "StartByConditionsDataValidationError"
}

// Error satisfies the builtin error interface
func (e StartByConditionsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartByConditionsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartByConditionsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartByConditionsDataValidationError{}

// Validate checks the field values on QueryProcessInstancesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProcessInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProcessInstancesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProcessInstancesRequestMultiError, or nil if none found.
func (m *QueryProcessInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProcessInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ProcessDefineId

	// no validation rules for OrgId

	// no validation rules for ProcessName

	// no validation rules for PageSize

	// no validation rules for PageIndex

	if len(errors) > 0 {
		return QueryProcessInstancesRequestMultiError(errors)
	}

	return nil
}

// QueryProcessInstancesRequestMultiError is an error wrapping multiple
// validation errors returned by QueryProcessInstancesRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryProcessInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProcessInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProcessInstancesRequestMultiError) AllErrors() []error { return m }

// QueryProcessInstancesRequestValidationError is the validation error returned
// by QueryProcessInstancesRequest.Validate if the designated constraints
// aren't met.
type QueryProcessInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProcessInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProcessInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProcessInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProcessInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProcessInstancesRequestValidationError) ErrorName() string {
	return "QueryProcessInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProcessInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProcessInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProcessInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProcessInstancesRequestValidationError{}

// Validate checks the field values on QueryProcessInstancesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProcessInstancesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProcessInstancesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProcessInstancesReplyMultiError, or nil if none found.
func (m *QueryProcessInstancesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProcessInstancesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryProcessInstancesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryProcessInstancesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryProcessInstancesReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryProcessInstancesReplyMultiError(errors)
	}

	return nil
}

// QueryProcessInstancesReplyMultiError is an error wrapping multiple
// validation errors returned by QueryProcessInstancesReply.ValidateAll() if
// the designated constraints aren't met.
type QueryProcessInstancesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProcessInstancesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProcessInstancesReplyMultiError) AllErrors() []error { return m }

// QueryProcessInstancesReplyValidationError is the validation error returned
// by QueryProcessInstancesReply.Validate if the designated constraints aren't met.
type QueryProcessInstancesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProcessInstancesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProcessInstancesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProcessInstancesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProcessInstancesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProcessInstancesReplyValidationError) ErrorName() string {
	return "QueryProcessInstancesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProcessInstancesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProcessInstancesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProcessInstancesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProcessInstancesReplyValidationError{}

// Validate checks the field values on DeleteProcessInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProcessInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProcessInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProcessInstanceRequestMultiError, or nil if none found.
func (m *DeleteProcessInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProcessInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return DeleteProcessInstanceRequestMultiError(errors)
	}

	return nil
}

// DeleteProcessInstanceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProcessInstanceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProcessInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProcessInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProcessInstanceRequestMultiError) AllErrors() []error { return m }

// DeleteProcessInstanceRequestValidationError is the validation error returned
// by DeleteProcessInstanceRequest.Validate if the designated constraints
// aren't met.
type DeleteProcessInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProcessInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProcessInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProcessInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProcessInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProcessInstanceRequestValidationError) ErrorName() string {
	return "DeleteProcessInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProcessInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProcessInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProcessInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProcessInstanceRequestValidationError{}

// Validate checks the field values on DeleteProcessInstanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProcessInstanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProcessInstanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProcessInstanceReplyMultiError, or nil if none found.
func (m *DeleteProcessInstanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProcessInstanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProcessInstanceReplyMultiError(errors)
	}

	return nil
}

// DeleteProcessInstanceReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteProcessInstanceReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteProcessInstanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProcessInstanceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProcessInstanceReplyMultiError) AllErrors() []error { return m }

// DeleteProcessInstanceReplyValidationError is the validation error returned
// by DeleteProcessInstanceReply.Validate if the designated constraints aren't met.
type DeleteProcessInstanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProcessInstanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProcessInstanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProcessInstanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProcessInstanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProcessInstanceReplyValidationError) ErrorName() string {
	return "DeleteProcessInstanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProcessInstanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProcessInstanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProcessInstanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProcessInstanceReplyValidationError{}
