// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WorkFlowTaskHTTPServer interface {
	Complete(context.Context, *CompleteRequest) (*CompleteReply, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
}

func RegisterWorkFlowTaskHTTPServer(s *http.Server, srv WorkFlowTaskHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/goWorkflow/task/complete", _WorkFlowTask_Complete0_HTTP_Handler(srv))
	r.POST("/v1/goWorkflow/task/withdraw", _WorkFlowTask_Withdraw0_HTTP_Handler(srv))
}

func _WorkFlowTask_Complete0_HTTP_Handler(srv WorkFlowTaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/go_workflow.v1.WorkFlowTask/Complete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Complete(ctx, req.(*CompleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompleteReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlowTask_Withdraw0_HTTP_Handler(srv WorkFlowTaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/go_workflow.v1.WorkFlowTask/Withdraw")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Withdraw(ctx, req.(*WithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawReply)
		return ctx.Result(200, reply)
	}
}

type WorkFlowTaskHTTPClient interface {
	Complete(ctx context.Context, req *CompleteRequest, opts ...http.CallOption) (rsp *CompleteReply, err error)
	Withdraw(ctx context.Context, req *WithdrawRequest, opts ...http.CallOption) (rsp *WithdrawReply, err error)
}

type WorkFlowTaskHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkFlowTaskHTTPClient(client *http.Client) WorkFlowTaskHTTPClient {
	return &WorkFlowTaskHTTPClientImpl{client}
}

func (c *WorkFlowTaskHTTPClientImpl) Complete(ctx context.Context, in *CompleteRequest, opts ...http.CallOption) (*CompleteReply, error) {
	var out CompleteReply
	pattern := "/v1/goWorkflow/task/complete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/go_workflow.v1.WorkFlowTask/Complete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowTaskHTTPClientImpl) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...http.CallOption) (*WithdrawReply, error) {
	var out WithdrawReply
	pattern := "/v1/goWorkflow/task/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/go_workflow.v1.WorkFlowTask/Withdraw"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
