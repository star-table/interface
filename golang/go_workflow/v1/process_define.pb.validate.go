// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: process_define.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SaveProcessDefineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveProcessDefineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveProcessDefineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveProcessDefineRequestMultiError, or nil if none found.
func (m *SaveProcessDefineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveProcessDefineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SaveProcessDefineRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := SaveProcessDefineRequestValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := SaveProcessDefineRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := SaveProcessDefineRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := SaveProcessDefineRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveProcessDefineRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveProcessDefineRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveProcessDefineRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStartConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaveProcessDefineRequestValidationError{
						field:  fmt.Sprintf("StartConditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaveProcessDefineRequestValidationError{
						field:  fmt.Sprintf("StartConditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaveProcessDefineRequestValidationError{
					field:  fmt.Sprintf("StartConditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaveProcessDefineRequestMultiError(errors)
	}

	return nil
}

// SaveProcessDefineRequestMultiError is an error wrapping multiple validation
// errors returned by SaveProcessDefineRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveProcessDefineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveProcessDefineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveProcessDefineRequestMultiError) AllErrors() []error { return m }

// SaveProcessDefineRequestValidationError is the validation error returned by
// SaveProcessDefineRequest.Validate if the designated constraints aren't met.
type SaveProcessDefineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveProcessDefineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveProcessDefineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveProcessDefineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveProcessDefineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveProcessDefineRequestValidationError) ErrorName() string {
	return "SaveProcessDefineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveProcessDefineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveProcessDefineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveProcessDefineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveProcessDefineRequestValidationError{}

// Validate checks the field values on SaveProcessDefineReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveProcessDefineReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveProcessDefineReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveProcessDefineReplyMultiError, or nil if none found.
func (m *SaveProcessDefineReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveProcessDefineReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SaveProcessDefineReplyMultiError(errors)
	}

	return nil
}

// SaveProcessDefineReplyMultiError is an error wrapping multiple validation
// errors returned by SaveProcessDefineReply.ValidateAll() if the designated
// constraints aren't met.
type SaveProcessDefineReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveProcessDefineReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveProcessDefineReplyMultiError) AllErrors() []error { return m }

// SaveProcessDefineReplyValidationError is the validation error returned by
// SaveProcessDefineReply.Validate if the designated constraints aren't met.
type SaveProcessDefineReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveProcessDefineReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveProcessDefineReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveProcessDefineReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveProcessDefineReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveProcessDefineReplyValidationError) ErrorName() string {
	return "SaveProcessDefineReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveProcessDefineReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveProcessDefineReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveProcessDefineReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveProcessDefineReplyValidationError{}

// Validate checks the field values on QueryProcessDefinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProcessDefinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProcessDefinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProcessDefinesRequestMultiError, or nil if none found.
func (m *QueryProcessDefinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProcessDefinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageIndex

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Id

	if len(errors) > 0 {
		return QueryProcessDefinesRequestMultiError(errors)
	}

	return nil
}

// QueryProcessDefinesRequestMultiError is an error wrapping multiple
// validation errors returned by QueryProcessDefinesRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryProcessDefinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProcessDefinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProcessDefinesRequestMultiError) AllErrors() []error { return m }

// QueryProcessDefinesRequestValidationError is the validation error returned
// by QueryProcessDefinesRequest.Validate if the designated constraints aren't met.
type QueryProcessDefinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProcessDefinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProcessDefinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProcessDefinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProcessDefinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProcessDefinesRequestValidationError) ErrorName() string {
	return "QueryProcessDefinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProcessDefinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProcessDefinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProcessDefinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProcessDefinesRequestValidationError{}

// Validate checks the field values on QueryProcessDefinesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProcessDefinesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProcessDefinesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProcessDefinesReplyMultiError, or nil if none found.
func (m *QueryProcessDefinesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProcessDefinesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryProcessDefinesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryProcessDefinesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryProcessDefinesReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryProcessDefinesReplyMultiError(errors)
	}

	return nil
}

// QueryProcessDefinesReplyMultiError is an error wrapping multiple validation
// errors returned by QueryProcessDefinesReply.ValidateAll() if the designated
// constraints aren't met.
type QueryProcessDefinesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProcessDefinesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProcessDefinesReplyMultiError) AllErrors() []error { return m }

// QueryProcessDefinesReplyValidationError is the validation error returned by
// QueryProcessDefinesReply.Validate if the designated constraints aren't met.
type QueryProcessDefinesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProcessDefinesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProcessDefinesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProcessDefinesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProcessDefinesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProcessDefinesReplyValidationError) ErrorName() string {
	return "QueryProcessDefinesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProcessDefinesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProcessDefinesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProcessDefinesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProcessDefinesReplyValidationError{}

// Validate checks the field values on DeleteProcessDefineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProcessDefineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProcessDefineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProcessDefineRequestMultiError, or nil if none found.
func (m *DeleteProcessDefineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProcessDefineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return DeleteProcessDefineRequestMultiError(errors)
	}

	return nil
}

// DeleteProcessDefineRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProcessDefineRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProcessDefineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProcessDefineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProcessDefineRequestMultiError) AllErrors() []error { return m }

// DeleteProcessDefineRequestValidationError is the validation error returned
// by DeleteProcessDefineRequest.Validate if the designated constraints aren't met.
type DeleteProcessDefineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProcessDefineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProcessDefineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProcessDefineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProcessDefineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProcessDefineRequestValidationError) ErrorName() string {
	return "DeleteProcessDefineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProcessDefineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProcessDefineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProcessDefineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProcessDefineRequestValidationError{}

// Validate checks the field values on DeleteProcessDefineReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProcessDefineReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProcessDefineReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProcessDefineReplyMultiError, or nil if none found.
func (m *DeleteProcessDefineReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProcessDefineReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProcessDefineReplyMultiError(errors)
	}

	return nil
}

// DeleteProcessDefineReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteProcessDefineReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteProcessDefineReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProcessDefineReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProcessDefineReplyMultiError) AllErrors() []error { return m }

// DeleteProcessDefineReplyValidationError is the validation error returned by
// DeleteProcessDefineReply.Validate if the designated constraints aren't met.
type DeleteProcessDefineReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProcessDefineReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProcessDefineReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProcessDefineReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProcessDefineReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProcessDefineReplyValidationError) ErrorName() string {
	return "DeleteProcessDefineReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProcessDefineReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProcessDefineReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProcessDefineReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProcessDefineReplyValidationError{}
