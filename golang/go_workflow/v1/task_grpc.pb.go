// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: task.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkFlowTaskClient is the client API for WorkFlowTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkFlowTaskClient interface {
	// Complete 审批
	Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteReply, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawReply, error)
}

type workFlowTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkFlowTaskClient(cc grpc.ClientConnInterface) WorkFlowTaskClient {
	return &workFlowTaskClient{cc}
}

func (c *workFlowTaskClient) Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteReply, error) {
	out := new(CompleteReply)
	err := c.cc.Invoke(ctx, "/go_workflow.v1.WorkFlowTask/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowTaskClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawReply, error) {
	out := new(WithdrawReply)
	err := c.cc.Invoke(ctx, "/go_workflow.v1.WorkFlowTask/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkFlowTaskServer is the server API for WorkFlowTask service.
// All implementations must embed UnimplementedWorkFlowTaskServer
// for forward compatibility
type WorkFlowTaskServer interface {
	// Complete 审批
	Complete(context.Context, *CompleteRequest) (*CompleteReply, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
	mustEmbedUnimplementedWorkFlowTaskServer()
}

// UnimplementedWorkFlowTaskServer must be embedded to have forward compatible implementations.
type UnimplementedWorkFlowTaskServer struct {
}

func (UnimplementedWorkFlowTaskServer) Complete(context.Context, *CompleteRequest) (*CompleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedWorkFlowTaskServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWorkFlowTaskServer) mustEmbedUnimplementedWorkFlowTaskServer() {}

// UnsafeWorkFlowTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkFlowTaskServer will
// result in compilation errors.
type UnsafeWorkFlowTaskServer interface {
	mustEmbedUnimplementedWorkFlowTaskServer()
}

func RegisterWorkFlowTaskServer(s grpc.ServiceRegistrar, srv WorkFlowTaskServer) {
	s.RegisterService(&WorkFlowTask_ServiceDesc, srv)
}

func _WorkFlowTask_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowTaskServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_workflow.v1.WorkFlowTask/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowTaskServer).Complete(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlowTask_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowTaskServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_workflow.v1.WorkFlowTask/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowTaskServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkFlowTask_ServiceDesc is the grpc.ServiceDesc for WorkFlowTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkFlowTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_workflow.v1.WorkFlowTask",
	HandlerType: (*WorkFlowTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _WorkFlowTask_Complete_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _WorkFlowTask_Withdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
