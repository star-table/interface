// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WorkFlowProcessInstanceHTTPServer interface {
	DeleteProcessInstance(context.Context, *DeleteProcessInstanceRequest) (*DeleteProcessInstanceReply, error)
	QueryProcessInstances(context.Context, *QueryProcessInstancesRequest) (*QueryProcessInstancesReply, error)
	Start(context.Context, *StartRequest) (*StartReply, error)
	StartByConditions(context.Context, *StartByConditionsRequest) (*StartByConditionsReply, error)
}

func RegisterWorkFlowProcessInstanceHTTPServer(s *http.Server, srv WorkFlowProcessInstanceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/goWorkflow/processInstance/start", _WorkFlowProcessInstance_Start0_HTTP_Handler(srv))
	r.POST("/v1/goWorkflow/processInstance/startByConditions", _WorkFlowProcessInstance_StartByConditions0_HTTP_Handler(srv))
	r.POST("/v1/goWorkflow/processInstance/query", _WorkFlowProcessInstance_QueryProcessInstances0_HTTP_Handler(srv))
	r.POST("/v1/goWorkflow/processInstance/delete", _WorkFlowProcessInstance_DeleteProcessInstance0_HTTP_Handler(srv))
}

func _WorkFlowProcessInstance_Start0_HTTP_Handler(srv WorkFlowProcessInstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/go_workflow.v1.WorkFlowProcessInstance/Start")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Start(ctx, req.(*StartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlowProcessInstance_StartByConditions0_HTTP_Handler(srv WorkFlowProcessInstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartByConditionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/go_workflow.v1.WorkFlowProcessInstance/StartByConditions")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartByConditions(ctx, req.(*StartByConditionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartByConditionsReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlowProcessInstance_QueryProcessInstances0_HTTP_Handler(srv WorkFlowProcessInstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryProcessInstancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/go_workflow.v1.WorkFlowProcessInstance/QueryProcessInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryProcessInstances(ctx, req.(*QueryProcessInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryProcessInstancesReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlowProcessInstance_DeleteProcessInstance0_HTTP_Handler(srv WorkFlowProcessInstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProcessInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/go_workflow.v1.WorkFlowProcessInstance/DeleteProcessInstance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProcessInstance(ctx, req.(*DeleteProcessInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProcessInstanceReply)
		return ctx.Result(200, reply)
	}
}

type WorkFlowProcessInstanceHTTPClient interface {
	DeleteProcessInstance(ctx context.Context, req *DeleteProcessInstanceRequest, opts ...http.CallOption) (rsp *DeleteProcessInstanceReply, err error)
	QueryProcessInstances(ctx context.Context, req *QueryProcessInstancesRequest, opts ...http.CallOption) (rsp *QueryProcessInstancesReply, err error)
	Start(ctx context.Context, req *StartRequest, opts ...http.CallOption) (rsp *StartReply, err error)
	StartByConditions(ctx context.Context, req *StartByConditionsRequest, opts ...http.CallOption) (rsp *StartByConditionsReply, err error)
}

type WorkFlowProcessInstanceHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkFlowProcessInstanceHTTPClient(client *http.Client) WorkFlowProcessInstanceHTTPClient {
	return &WorkFlowProcessInstanceHTTPClientImpl{client}
}

func (c *WorkFlowProcessInstanceHTTPClientImpl) DeleteProcessInstance(ctx context.Context, in *DeleteProcessInstanceRequest, opts ...http.CallOption) (*DeleteProcessInstanceReply, error) {
	var out DeleteProcessInstanceReply
	pattern := "/v1/goWorkflow/processInstance/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/go_workflow.v1.WorkFlowProcessInstance/DeleteProcessInstance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowProcessInstanceHTTPClientImpl) QueryProcessInstances(ctx context.Context, in *QueryProcessInstancesRequest, opts ...http.CallOption) (*QueryProcessInstancesReply, error) {
	var out QueryProcessInstancesReply
	pattern := "/v1/goWorkflow/processInstance/query"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/go_workflow.v1.WorkFlowProcessInstance/QueryProcessInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowProcessInstanceHTTPClientImpl) Start(ctx context.Context, in *StartRequest, opts ...http.CallOption) (*StartReply, error) {
	var out StartReply
	pattern := "/v1/goWorkflow/processInstance/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/go_workflow.v1.WorkFlowProcessInstance/Start"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowProcessInstanceHTTPClientImpl) StartByConditions(ctx context.Context, in *StartByConditionsRequest, opts ...http.CallOption) (*StartByConditionsReply, error) {
	var out StartByConditionsReply
	pattern := "/v1/goWorkflow/processInstance/startByConditions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/go_workflow.v1.WorkFlowProcessInstance/StartByConditions"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
