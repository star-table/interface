// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: table.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableClient is the client API for Table service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableClient interface {
	// 创建汇总表
	CreateSummeryTable(ctx context.Context, in *CreateSummeryTableRequest, opts ...grpc.CallOption) (*CreateSummeryTableReply, error)
	// 创建多个汇总表
	CreateMultiSummeryTable(ctx context.Context, in *CreateMultiSummeryTableRequest, opts ...grpc.CallOption) (*CreateMultiSummeryTableReply, error)
	// 创建表
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableReply, error)
	// 表重命名
	RenameTable(ctx context.Context, in *RenameTableRequest, opts ...grpc.CallOption) (*RenameTableReply, error)
	// 拷贝表
	CopyTables(ctx context.Context, in *CopyTablesRequest, opts ...grpc.CallOption) (*CopyTablesReply, error)
	// 删除表
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableReply, error)
	// 设置自动排期开关
	SetAutoSchedule(ctx context.Context, in *SetAutoScheduleRequest, opts ...grpc.CallOption) (*SetAutoScheduleReply, error)
	// 获取一个app的表列表
	ReadTables(ctx context.Context, in *ReadTablesRequest, opts ...grpc.CallOption) (*ReadTablesReply, error)
	// 获取一个表
	ReadTable(ctx context.Context, in *ReadTableRequest, opts ...grpc.CallOption) (*ReadTableReply, error)
	// 获取多个app的表
	ReadTablesByApps(ctx context.Context, in *ReadTablesByAppsRequest, opts ...grpc.CallOption) (*ReadTablesByAppsReply, error)
	ReadOrgTables(ctx context.Context, in *ReadOrgTablesRequest, opts ...grpc.CallOption) (*ReadOrgTablesReply, error)
	// 获取表头信息
	ReadTableSchemas(ctx context.Context, in *ReadTableSchemasRequest, opts ...grpc.CallOption) (*ReadTableSchemasReply, error)
	// 根据appId获取表头信息
	ReadTableSchemasByAppId(ctx context.Context, in *ReadTableSchemasByAppIdRequest, opts ...grpc.CallOption) (*ReadTableSchemasByAppIdReply, error)
	// 读取组织下面的所有表的某些列
	ReadOrgTableSchemas(ctx context.Context, in *ReadOrgTableSchemasRequest, opts ...grpc.CallOption) (*ReadOrgTableSchemasReply, error)
	// 读取汇总表的tableId
	ReadSummeryTableId(ctx context.Context, in *ReadSummeryTableIdRequest, opts ...grpc.CallOption) (*ReadSummeryTableIdReply, error)
	// 初始化团队字段
	InitOrgColumns(ctx context.Context, in *InitOrgColumnsRequest, opts ...grpc.CallOption) (*InitOrgColumnsReply, error)
	// 读取组织字段列表
	ReadOrgColumns(ctx context.Context, in *ReadOrgColumnsRequest, opts ...grpc.CallOption) (*ReadOrgColumnsReply, error)
	// 创建组织字段
	CreateOrgColumn(ctx context.Context, in *CreateOrgColumnRequest, opts ...grpc.CallOption) (*CreateOrgColumnReply, error)
	// 删除组织字段
	DeleteOrgColumn(ctx context.Context, in *DeleteOrgColumnRequest, opts ...grpc.CallOption) (*DeleteOrgColumnReply, error)
	// 创建列
	CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnReply, error)
	// 拷贝列
	CopyColumn(ctx context.Context, in *CopyColumnRequest, opts ...grpc.CallOption) (*CopyColumnReply, error)
	// 更新列属性
	UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*UpdateColumnReply, error)
	// 更新列描述
	UpdateColumnDescription(ctx context.Context, in *UpdateColumnDescriptionRequest, opts ...grpc.CallOption) (*UpdateColumnDescriptionReply, error)
	// 删除列
	DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*DeleteColumnReply, error)
	// 创建表数据
	CreateRows(ctx context.Context, in *CreateRowsRequest, opts ...grpc.CallOption) (*CreateRowsReply, error)
	// 移动表数据
	MoveRow(ctx context.Context, in *MoveRowRequest, opts ...grpc.CallOption) (*MoveRowReply, error)
	// 拷贝表数据
	CopyRow(ctx context.Context, in *CopyRowRequest, opts ...grpc.CallOption) (*CopyRowReply, error)
	// 删除表数据
	DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowReply, error)
	// 更新任务关联
	UpdateRowRelate(ctx context.Context, in *UpdateRowRelateReq, opts ...grpc.CallOption) (*UpdateRowRelateReply, error)
	// 更新任务前后置
	UpdateRowBeforeAfter(ctx context.Context, in *UpdateRowBeforeAfterReq, opts ...grpc.CallOption) (*UpdateRowBeforeAfterReply, error)
	// 获取任务关联列表
	GetRowRelationList(ctx context.Context, in *GetRelationListReq, opts ...grpc.CallOption) (*GetRelationListReply, error)
	// 获取任务前后置列表
	GetBeforeAfterRowList(ctx context.Context, in *GetBeforeAfterRowListReq, opts ...grpc.CallOption) (*GetBeforeAfterRowListReply, error)
}

type tableClient struct {
	cc grpc.ClientConnInterface
}

func NewTableClient(cc grpc.ClientConnInterface) TableClient {
	return &tableClient{cc}
}

func (c *tableClient) CreateSummeryTable(ctx context.Context, in *CreateSummeryTableRequest, opts ...grpc.CallOption) (*CreateSummeryTableReply, error) {
	out := new(CreateSummeryTableReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CreateSummeryTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CreateMultiSummeryTable(ctx context.Context, in *CreateMultiSummeryTableRequest, opts ...grpc.CallOption) (*CreateMultiSummeryTableReply, error) {
	out := new(CreateMultiSummeryTableReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CreateMultiSummeryTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableReply, error) {
	out := new(CreateTableReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) RenameTable(ctx context.Context, in *RenameTableRequest, opts ...grpc.CallOption) (*RenameTableReply, error) {
	out := new(RenameTableReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/RenameTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CopyTables(ctx context.Context, in *CopyTablesRequest, opts ...grpc.CallOption) (*CopyTablesReply, error) {
	out := new(CopyTablesReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CopyTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableReply, error) {
	out := new(DeleteTableReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) SetAutoSchedule(ctx context.Context, in *SetAutoScheduleRequest, opts ...grpc.CallOption) (*SetAutoScheduleReply, error) {
	out := new(SetAutoScheduleReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/SetAutoSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadTables(ctx context.Context, in *ReadTablesRequest, opts ...grpc.CallOption) (*ReadTablesReply, error) {
	out := new(ReadTablesReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadTable(ctx context.Context, in *ReadTableRequest, opts ...grpc.CallOption) (*ReadTableReply, error) {
	out := new(ReadTableReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadTablesByApps(ctx context.Context, in *ReadTablesByAppsRequest, opts ...grpc.CallOption) (*ReadTablesByAppsReply, error) {
	out := new(ReadTablesByAppsReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadTablesByApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadOrgTables(ctx context.Context, in *ReadOrgTablesRequest, opts ...grpc.CallOption) (*ReadOrgTablesReply, error) {
	out := new(ReadOrgTablesReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadOrgTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadTableSchemas(ctx context.Context, in *ReadTableSchemasRequest, opts ...grpc.CallOption) (*ReadTableSchemasReply, error) {
	out := new(ReadTableSchemasReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadTableSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadTableSchemasByAppId(ctx context.Context, in *ReadTableSchemasByAppIdRequest, opts ...grpc.CallOption) (*ReadTableSchemasByAppIdReply, error) {
	out := new(ReadTableSchemasByAppIdReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadTableSchemasByAppId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadOrgTableSchemas(ctx context.Context, in *ReadOrgTableSchemasRequest, opts ...grpc.CallOption) (*ReadOrgTableSchemasReply, error) {
	out := new(ReadOrgTableSchemasReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadOrgTableSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadSummeryTableId(ctx context.Context, in *ReadSummeryTableIdRequest, opts ...grpc.CallOption) (*ReadSummeryTableIdReply, error) {
	out := new(ReadSummeryTableIdReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadSummeryTableId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) InitOrgColumns(ctx context.Context, in *InitOrgColumnsRequest, opts ...grpc.CallOption) (*InitOrgColumnsReply, error) {
	out := new(InitOrgColumnsReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/InitOrgColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ReadOrgColumns(ctx context.Context, in *ReadOrgColumnsRequest, opts ...grpc.CallOption) (*ReadOrgColumnsReply, error) {
	out := new(ReadOrgColumnsReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/ReadOrgColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CreateOrgColumn(ctx context.Context, in *CreateOrgColumnRequest, opts ...grpc.CallOption) (*CreateOrgColumnReply, error) {
	out := new(CreateOrgColumnReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CreateOrgColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) DeleteOrgColumn(ctx context.Context, in *DeleteOrgColumnRequest, opts ...grpc.CallOption) (*DeleteOrgColumnReply, error) {
	out := new(DeleteOrgColumnReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/DeleteOrgColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnReply, error) {
	out := new(CreateColumnReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CreateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CopyColumn(ctx context.Context, in *CopyColumnRequest, opts ...grpc.CallOption) (*CopyColumnReply, error) {
	out := new(CopyColumnReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CopyColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*UpdateColumnReply, error) {
	out := new(UpdateColumnReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/UpdateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) UpdateColumnDescription(ctx context.Context, in *UpdateColumnDescriptionRequest, opts ...grpc.CallOption) (*UpdateColumnDescriptionReply, error) {
	out := new(UpdateColumnDescriptionReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/UpdateColumnDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*DeleteColumnReply, error) {
	out := new(DeleteColumnReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/DeleteColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CreateRows(ctx context.Context, in *CreateRowsRequest, opts ...grpc.CallOption) (*CreateRowsReply, error) {
	out := new(CreateRowsReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CreateRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) MoveRow(ctx context.Context, in *MoveRowRequest, opts ...grpc.CallOption) (*MoveRowReply, error) {
	out := new(MoveRowReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/MoveRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CopyRow(ctx context.Context, in *CopyRowRequest, opts ...grpc.CallOption) (*CopyRowReply, error) {
	out := new(CopyRowReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/CopyRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowReply, error) {
	out := new(DeleteRowReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/DeleteRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) UpdateRowRelate(ctx context.Context, in *UpdateRowRelateReq, opts ...grpc.CallOption) (*UpdateRowRelateReply, error) {
	out := new(UpdateRowRelateReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/UpdateRowRelate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) UpdateRowBeforeAfter(ctx context.Context, in *UpdateRowBeforeAfterReq, opts ...grpc.CallOption) (*UpdateRowBeforeAfterReply, error) {
	out := new(UpdateRowBeforeAfterReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/UpdateRowBeforeAfter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) GetRowRelationList(ctx context.Context, in *GetRelationListReq, opts ...grpc.CallOption) (*GetRelationListReply, error) {
	out := new(GetRelationListReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/GetRowRelationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) GetBeforeAfterRowList(ctx context.Context, in *GetBeforeAfterRowListReq, opts ...grpc.CallOption) (*GetBeforeAfterRowListReply, error) {
	out := new(GetBeforeAfterRowListReply)
	err := c.cc.Invoke(ctx, "/table.v1.Table/GetBeforeAfterRowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServer is the server API for Table service.
// All implementations must embed UnimplementedTableServer
// for forward compatibility
type TableServer interface {
	// 创建汇总表
	CreateSummeryTable(context.Context, *CreateSummeryTableRequest) (*CreateSummeryTableReply, error)
	// 创建多个汇总表
	CreateMultiSummeryTable(context.Context, *CreateMultiSummeryTableRequest) (*CreateMultiSummeryTableReply, error)
	// 创建表
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableReply, error)
	// 表重命名
	RenameTable(context.Context, *RenameTableRequest) (*RenameTableReply, error)
	// 拷贝表
	CopyTables(context.Context, *CopyTablesRequest) (*CopyTablesReply, error)
	// 删除表
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableReply, error)
	// 设置自动排期开关
	SetAutoSchedule(context.Context, *SetAutoScheduleRequest) (*SetAutoScheduleReply, error)
	// 获取一个app的表列表
	ReadTables(context.Context, *ReadTablesRequest) (*ReadTablesReply, error)
	// 获取一个表
	ReadTable(context.Context, *ReadTableRequest) (*ReadTableReply, error)
	// 获取多个app的表
	ReadTablesByApps(context.Context, *ReadTablesByAppsRequest) (*ReadTablesByAppsReply, error)
	ReadOrgTables(context.Context, *ReadOrgTablesRequest) (*ReadOrgTablesReply, error)
	// 获取表头信息
	ReadTableSchemas(context.Context, *ReadTableSchemasRequest) (*ReadTableSchemasReply, error)
	// 根据appId获取表头信息
	ReadTableSchemasByAppId(context.Context, *ReadTableSchemasByAppIdRequest) (*ReadTableSchemasByAppIdReply, error)
	// 读取组织下面的所有表的某些列
	ReadOrgTableSchemas(context.Context, *ReadOrgTableSchemasRequest) (*ReadOrgTableSchemasReply, error)
	// 读取汇总表的tableId
	ReadSummeryTableId(context.Context, *ReadSummeryTableIdRequest) (*ReadSummeryTableIdReply, error)
	// 初始化团队字段
	InitOrgColumns(context.Context, *InitOrgColumnsRequest) (*InitOrgColumnsReply, error)
	// 读取组织字段列表
	ReadOrgColumns(context.Context, *ReadOrgColumnsRequest) (*ReadOrgColumnsReply, error)
	// 创建组织字段
	CreateOrgColumn(context.Context, *CreateOrgColumnRequest) (*CreateOrgColumnReply, error)
	// 删除组织字段
	DeleteOrgColumn(context.Context, *DeleteOrgColumnRequest) (*DeleteOrgColumnReply, error)
	// 创建列
	CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error)
	// 拷贝列
	CopyColumn(context.Context, *CopyColumnRequest) (*CopyColumnReply, error)
	// 更新列属性
	UpdateColumn(context.Context, *UpdateColumnRequest) (*UpdateColumnReply, error)
	// 更新列描述
	UpdateColumnDescription(context.Context, *UpdateColumnDescriptionRequest) (*UpdateColumnDescriptionReply, error)
	// 删除列
	DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnReply, error)
	// 创建表数据
	CreateRows(context.Context, *CreateRowsRequest) (*CreateRowsReply, error)
	// 移动表数据
	MoveRow(context.Context, *MoveRowRequest) (*MoveRowReply, error)
	// 拷贝表数据
	CopyRow(context.Context, *CopyRowRequest) (*CopyRowReply, error)
	// 删除表数据
	DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowReply, error)
	// 更新任务关联
	UpdateRowRelate(context.Context, *UpdateRowRelateReq) (*UpdateRowRelateReply, error)
	// 更新任务前后置
	UpdateRowBeforeAfter(context.Context, *UpdateRowBeforeAfterReq) (*UpdateRowBeforeAfterReply, error)
	// 获取任务关联列表
	GetRowRelationList(context.Context, *GetRelationListReq) (*GetRelationListReply, error)
	// 获取任务前后置列表
	GetBeforeAfterRowList(context.Context, *GetBeforeAfterRowListReq) (*GetBeforeAfterRowListReply, error)
	mustEmbedUnimplementedTableServer()
}

// UnimplementedTableServer must be embedded to have forward compatible implementations.
type UnimplementedTableServer struct {
}

func (UnimplementedTableServer) CreateSummeryTable(context.Context, *CreateSummeryTableRequest) (*CreateSummeryTableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummeryTable not implemented")
}
func (UnimplementedTableServer) CreateMultiSummeryTable(context.Context, *CreateMultiSummeryTableRequest) (*CreateMultiSummeryTableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiSummeryTable not implemented")
}
func (UnimplementedTableServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedTableServer) RenameTable(context.Context, *RenameTableRequest) (*RenameTableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameTable not implemented")
}
func (UnimplementedTableServer) CopyTables(context.Context, *CopyTablesRequest) (*CopyTablesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTables not implemented")
}
func (UnimplementedTableServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedTableServer) SetAutoSchedule(context.Context, *SetAutoScheduleRequest) (*SetAutoScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoSchedule not implemented")
}
func (UnimplementedTableServer) ReadTables(context.Context, *ReadTablesRequest) (*ReadTablesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTables not implemented")
}
func (UnimplementedTableServer) ReadTable(context.Context, *ReadTableRequest) (*ReadTableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTable not implemented")
}
func (UnimplementedTableServer) ReadTablesByApps(context.Context, *ReadTablesByAppsRequest) (*ReadTablesByAppsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTablesByApps not implemented")
}
func (UnimplementedTableServer) ReadOrgTables(context.Context, *ReadOrgTablesRequest) (*ReadOrgTablesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrgTables not implemented")
}
func (UnimplementedTableServer) ReadTableSchemas(context.Context, *ReadTableSchemasRequest) (*ReadTableSchemasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTableSchemas not implemented")
}
func (UnimplementedTableServer) ReadTableSchemasByAppId(context.Context, *ReadTableSchemasByAppIdRequest) (*ReadTableSchemasByAppIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTableSchemasByAppId not implemented")
}
func (UnimplementedTableServer) ReadOrgTableSchemas(context.Context, *ReadOrgTableSchemasRequest) (*ReadOrgTableSchemasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrgTableSchemas not implemented")
}
func (UnimplementedTableServer) ReadSummeryTableId(context.Context, *ReadSummeryTableIdRequest) (*ReadSummeryTableIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSummeryTableId not implemented")
}
func (UnimplementedTableServer) InitOrgColumns(context.Context, *InitOrgColumnsRequest) (*InitOrgColumnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOrgColumns not implemented")
}
func (UnimplementedTableServer) ReadOrgColumns(context.Context, *ReadOrgColumnsRequest) (*ReadOrgColumnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrgColumns not implemented")
}
func (UnimplementedTableServer) CreateOrgColumn(context.Context, *CreateOrgColumnRequest) (*CreateOrgColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgColumn not implemented")
}
func (UnimplementedTableServer) DeleteOrgColumn(context.Context, *DeleteOrgColumnRequest) (*DeleteOrgColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgColumn not implemented")
}
func (UnimplementedTableServer) CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedTableServer) CopyColumn(context.Context, *CopyColumnRequest) (*CopyColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyColumn not implemented")
}
func (UnimplementedTableServer) UpdateColumn(context.Context, *UpdateColumnRequest) (*UpdateColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumn not implemented")
}
func (UnimplementedTableServer) UpdateColumnDescription(context.Context, *UpdateColumnDescriptionRequest) (*UpdateColumnDescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumnDescription not implemented")
}
func (UnimplementedTableServer) DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (UnimplementedTableServer) CreateRows(context.Context, *CreateRowsRequest) (*CreateRowsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRows not implemented")
}
func (UnimplementedTableServer) MoveRow(context.Context, *MoveRowRequest) (*MoveRowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRow not implemented")
}
func (UnimplementedTableServer) CopyRow(context.Context, *CopyRowRequest) (*CopyRowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRow not implemented")
}
func (UnimplementedTableServer) DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRow not implemented")
}
func (UnimplementedTableServer) UpdateRowRelate(context.Context, *UpdateRowRelateReq) (*UpdateRowRelateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRowRelate not implemented")
}
func (UnimplementedTableServer) UpdateRowBeforeAfter(context.Context, *UpdateRowBeforeAfterReq) (*UpdateRowBeforeAfterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRowBeforeAfter not implemented")
}
func (UnimplementedTableServer) GetRowRelationList(context.Context, *GetRelationListReq) (*GetRelationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRowRelationList not implemented")
}
func (UnimplementedTableServer) GetBeforeAfterRowList(context.Context, *GetBeforeAfterRowListReq) (*GetBeforeAfterRowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeforeAfterRowList not implemented")
}
func (UnimplementedTableServer) mustEmbedUnimplementedTableServer() {}

// UnsafeTableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServer will
// result in compilation errors.
type UnsafeTableServer interface {
	mustEmbedUnimplementedTableServer()
}

func RegisterTableServer(s grpc.ServiceRegistrar, srv TableServer) {
	s.RegisterService(&Table_ServiceDesc, srv)
}

func _Table_CreateSummeryTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummeryTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateSummeryTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CreateSummeryTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateSummeryTable(ctx, req.(*CreateSummeryTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CreateMultiSummeryTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiSummeryTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateMultiSummeryTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CreateMultiSummeryTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateMultiSummeryTable(ctx, req.(*CreateMultiSummeryTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_RenameTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).RenameTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/RenameTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).RenameTable(ctx, req.(*RenameTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CopyTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CopyTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CopyTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CopyTables(ctx, req.(*CopyTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_SetAutoSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).SetAutoSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/SetAutoSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).SetAutoSchedule(ctx, req.(*SetAutoScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadTables(ctx, req.(*ReadTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadTable(ctx, req.(*ReadTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadTablesByApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTablesByAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadTablesByApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadTablesByApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadTablesByApps(ctx, req.(*ReadTablesByAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadOrgTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOrgTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadOrgTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadOrgTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadOrgTables(ctx, req.(*ReadOrgTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadTableSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTableSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadTableSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadTableSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadTableSchemas(ctx, req.(*ReadTableSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadTableSchemasByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTableSchemasByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadTableSchemasByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadTableSchemasByAppId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadTableSchemasByAppId(ctx, req.(*ReadTableSchemasByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadOrgTableSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOrgTableSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadOrgTableSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadOrgTableSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadOrgTableSchemas(ctx, req.(*ReadOrgTableSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadSummeryTableId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSummeryTableIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadSummeryTableId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadSummeryTableId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadSummeryTableId(ctx, req.(*ReadSummeryTableIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_InitOrgColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitOrgColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).InitOrgColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/InitOrgColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).InitOrgColumns(ctx, req.(*InitOrgColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ReadOrgColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOrgColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ReadOrgColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/ReadOrgColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ReadOrgColumns(ctx, req.(*ReadOrgColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CreateOrgColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateOrgColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CreateOrgColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateOrgColumn(ctx, req.(*CreateOrgColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_DeleteOrgColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrgColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).DeleteOrgColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/DeleteOrgColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).DeleteOrgColumn(ctx, req.(*DeleteOrgColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CreateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateColumn(ctx, req.(*CreateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CopyColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CopyColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CopyColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CopyColumn(ctx, req.(*CopyColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_UpdateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).UpdateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/UpdateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).UpdateColumn(ctx, req.(*UpdateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_UpdateColumnDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).UpdateColumnDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/UpdateColumnDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).UpdateColumnDescription(ctx, req.(*UpdateColumnDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/DeleteColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).DeleteColumn(ctx, req.(*DeleteColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CreateRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CreateRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateRows(ctx, req.(*CreateRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_MoveRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).MoveRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/MoveRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).MoveRow(ctx, req.(*MoveRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CopyRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CopyRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/CopyRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CopyRow(ctx, req.(*CopyRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_DeleteRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).DeleteRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/DeleteRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).DeleteRow(ctx, req.(*DeleteRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_UpdateRowRelate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowRelateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).UpdateRowRelate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/UpdateRowRelate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).UpdateRowRelate(ctx, req.(*UpdateRowRelateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_UpdateRowBeforeAfter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowBeforeAfterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).UpdateRowBeforeAfter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/UpdateRowBeforeAfter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).UpdateRowBeforeAfter(ctx, req.(*UpdateRowBeforeAfterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_GetRowRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).GetRowRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/GetRowRelationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).GetRowRelationList(ctx, req.(*GetRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_GetBeforeAfterRowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeforeAfterRowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).GetBeforeAfterRowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Table/GetBeforeAfterRowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).GetBeforeAfterRowList(ctx, req.(*GetBeforeAfterRowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Table_ServiceDesc is the grpc.ServiceDesc for Table service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Table_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "table.v1.Table",
	HandlerType: (*TableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSummeryTable",
			Handler:    _Table_CreateSummeryTable_Handler,
		},
		{
			MethodName: "CreateMultiSummeryTable",
			Handler:    _Table_CreateMultiSummeryTable_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _Table_CreateTable_Handler,
		},
		{
			MethodName: "RenameTable",
			Handler:    _Table_RenameTable_Handler,
		},
		{
			MethodName: "CopyTables",
			Handler:    _Table_CopyTables_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Table_DeleteTable_Handler,
		},
		{
			MethodName: "SetAutoSchedule",
			Handler:    _Table_SetAutoSchedule_Handler,
		},
		{
			MethodName: "ReadTables",
			Handler:    _Table_ReadTables_Handler,
		},
		{
			MethodName: "ReadTable",
			Handler:    _Table_ReadTable_Handler,
		},
		{
			MethodName: "ReadTablesByApps",
			Handler:    _Table_ReadTablesByApps_Handler,
		},
		{
			MethodName: "ReadOrgTables",
			Handler:    _Table_ReadOrgTables_Handler,
		},
		{
			MethodName: "ReadTableSchemas",
			Handler:    _Table_ReadTableSchemas_Handler,
		},
		{
			MethodName: "ReadTableSchemasByAppId",
			Handler:    _Table_ReadTableSchemasByAppId_Handler,
		},
		{
			MethodName: "ReadOrgTableSchemas",
			Handler:    _Table_ReadOrgTableSchemas_Handler,
		},
		{
			MethodName: "ReadSummeryTableId",
			Handler:    _Table_ReadSummeryTableId_Handler,
		},
		{
			MethodName: "InitOrgColumns",
			Handler:    _Table_InitOrgColumns_Handler,
		},
		{
			MethodName: "ReadOrgColumns",
			Handler:    _Table_ReadOrgColumns_Handler,
		},
		{
			MethodName: "CreateOrgColumn",
			Handler:    _Table_CreateOrgColumn_Handler,
		},
		{
			MethodName: "DeleteOrgColumn",
			Handler:    _Table_DeleteOrgColumn_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _Table_CreateColumn_Handler,
		},
		{
			MethodName: "CopyColumn",
			Handler:    _Table_CopyColumn_Handler,
		},
		{
			MethodName: "UpdateColumn",
			Handler:    _Table_UpdateColumn_Handler,
		},
		{
			MethodName: "UpdateColumnDescription",
			Handler:    _Table_UpdateColumnDescription_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _Table_DeleteColumn_Handler,
		},
		{
			MethodName: "CreateRows",
			Handler:    _Table_CreateRows_Handler,
		},
		{
			MethodName: "MoveRow",
			Handler:    _Table_MoveRow_Handler,
		},
		{
			MethodName: "CopyRow",
			Handler:    _Table_CopyRow_Handler,
		},
		{
			MethodName: "DeleteRow",
			Handler:    _Table_DeleteRow_Handler,
		},
		{
			MethodName: "UpdateRowRelate",
			Handler:    _Table_UpdateRowRelate_Handler,
		},
		{
			MethodName: "UpdateRowBeforeAfter",
			Handler:    _Table_UpdateRowBeforeAfter_Handler,
		},
		{
			MethodName: "GetRowRelationList",
			Handler:    _Table_GetRowRelationList_Handler,
		},
		{
			MethodName: "GetBeforeAfterRowList",
			Handler:    _Table_GetBeforeAfterRowList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "table.proto",
}
