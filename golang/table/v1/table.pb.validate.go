// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: table.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSummeryTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSummeryTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSummeryTableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSummeryTableRequestMultiError, or nil if none found.
func (m *CreateSummeryTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSummeryTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := CreateSummeryTableRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetColumns()) < 1 {
		err := CreateSummeryTableRequestValidationError{
			field:  "Columns",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSummeryTableRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSummeryTableRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSummeryTableRequestValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateSummeryTableRequestMultiError(errors)
	}

	return nil
}

// CreateSummeryTableRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSummeryTableRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateSummeryTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSummeryTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSummeryTableRequestMultiError) AllErrors() []error { return m }

// CreateSummeryTableRequestValidationError is the validation error returned by
// CreateSummeryTableRequest.Validate if the designated constraints aren't met.
type CreateSummeryTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSummeryTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSummeryTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSummeryTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSummeryTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSummeryTableRequestValidationError) ErrorName() string {
	return "CreateSummeryTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSummeryTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSummeryTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSummeryTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSummeryTableRequestValidationError{}

// Validate checks the field values on CreateSummeryTableReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSummeryTableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSummeryTableReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSummeryTableReplyMultiError, or nil if none found.
func (m *CreateSummeryTableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSummeryTableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	if len(errors) > 0 {
		return CreateSummeryTableReplyMultiError(errors)
	}

	return nil
}

// CreateSummeryTableReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSummeryTableReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSummeryTableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSummeryTableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSummeryTableReplyMultiError) AllErrors() []error { return m }

// CreateSummeryTableReplyValidationError is the validation error returned by
// CreateSummeryTableReply.Validate if the designated constraints aren't met.
type CreateSummeryTableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSummeryTableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSummeryTableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSummeryTableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSummeryTableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSummeryTableReplyValidationError) ErrorName() string {
	return "CreateSummeryTableReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSummeryTableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSummeryTableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSummeryTableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSummeryTableReplyValidationError{}

// Validate checks the field values on CreateMultiSummeryTableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMultiSummeryTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMultiSummeryTableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMultiSummeryTableRequestMultiError, or nil if none found.
func (m *CreateMultiSummeryTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMultiSummeryTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMultiSummeryTableRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMultiSummeryTableRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMultiSummeryTableRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMultiSummeryTableRequestMultiError(errors)
	}

	return nil
}

// CreateMultiSummeryTableRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMultiSummeryTableRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateMultiSummeryTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultiSummeryTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultiSummeryTableRequestMultiError) AllErrors() []error { return m }

// CreateMultiSummeryTableRequestValidationError is the validation error
// returned by CreateMultiSummeryTableRequest.Validate if the designated
// constraints aren't met.
type CreateMultiSummeryTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMultiSummeryTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMultiSummeryTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMultiSummeryTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMultiSummeryTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMultiSummeryTableRequestValidationError) ErrorName() string {
	return "CreateMultiSummeryTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMultiSummeryTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMultiSummeryTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMultiSummeryTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMultiSummeryTableRequestValidationError{}

// Validate checks the field values on SummeryTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SummeryTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SummeryTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SummeryTableRequestMultiError, or nil if none found.
func (m *SummeryTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SummeryTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableType

	if len(m.GetColumns()) < 1 {
		err := SummeryTableRequestValidationError{
			field:  "Columns",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SummeryTableRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SummeryTableRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SummeryTableRequestValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SummeryTableRequestMultiError(errors)
	}

	return nil
}

// SummeryTableRequestMultiError is an error wrapping multiple validation
// errors returned by SummeryTableRequest.ValidateAll() if the designated
// constraints aren't met.
type SummeryTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SummeryTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SummeryTableRequestMultiError) AllErrors() []error { return m }

// SummeryTableRequestValidationError is the validation error returned by
// SummeryTableRequest.Validate if the designated constraints aren't met.
type SummeryTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SummeryTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SummeryTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SummeryTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SummeryTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SummeryTableRequestValidationError) ErrorName() string {
	return "SummeryTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SummeryTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSummeryTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SummeryTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SummeryTableRequestValidationError{}

// Validate checks the field values on CreateMultiSummeryTableReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMultiSummeryTableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMultiSummeryTableReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMultiSummeryTableReplyMultiError, or nil if none found.
func (m *CreateMultiSummeryTableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMultiSummeryTableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMultiSummeryTableReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMultiSummeryTableReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMultiSummeryTableReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMultiSummeryTableReplyMultiError(errors)
	}

	return nil
}

// CreateMultiSummeryTableReplyMultiError is an error wrapping multiple
// validation errors returned by CreateMultiSummeryTableReply.ValidateAll() if
// the designated constraints aren't met.
type CreateMultiSummeryTableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultiSummeryTableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultiSummeryTableReplyMultiError) AllErrors() []error { return m }

// CreateMultiSummeryTableReplyValidationError is the validation error returned
// by CreateMultiSummeryTableReply.Validate if the designated constraints
// aren't met.
type CreateMultiSummeryTableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMultiSummeryTableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMultiSummeryTableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMultiSummeryTableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMultiSummeryTableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMultiSummeryTableReplyValidationError) ErrorName() string {
	return "CreateMultiSummeryTableReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMultiSummeryTableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMultiSummeryTableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMultiSummeryTableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMultiSummeryTableReplyValidationError{}

// Validate checks the field values on CreateMultiSummeryTableData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMultiSummeryTableData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMultiSummeryTableData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMultiSummeryTableDataMultiError, or nil if none found.
func (m *CreateMultiSummeryTableData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMultiSummeryTableData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	if len(errors) > 0 {
		return CreateMultiSummeryTableDataMultiError(errors)
	}

	return nil
}

// CreateMultiSummeryTableDataMultiError is an error wrapping multiple
// validation errors returned by CreateMultiSummeryTableData.ValidateAll() if
// the designated constraints aren't met.
type CreateMultiSummeryTableDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultiSummeryTableDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultiSummeryTableDataMultiError) AllErrors() []error { return m }

// CreateMultiSummeryTableDataValidationError is the validation error returned
// by CreateMultiSummeryTableData.Validate if the designated constraints
// aren't met.
type CreateMultiSummeryTableDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMultiSummeryTableDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMultiSummeryTableDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMultiSummeryTableDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMultiSummeryTableDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMultiSummeryTableDataValidationError) ErrorName() string {
	return "CreateMultiSummeryTableDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMultiSummeryTableDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMultiSummeryTableData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMultiSummeryTableDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMultiSummeryTableDataValidationError{}

// Validate checks the field values on CreateTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTableRequestMultiError, or nil if none found.
func (m *CreateTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := CreateTableRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppType

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateTableRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsNeedStoreTable

	// no validation rules for IsNeedColumn

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTableRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTableRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTableRequestValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for BindSummeryAppId

	if _, ok := _CreateTableRequest_SummaryFlag_InLookup[m.GetSummaryFlag()]; !ok {
		err := CreateTableRequestValidationError{
			field:  "SummaryFlag",
			reason: "value must be in list [0 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTableRequestMultiError(errors)
	}

	return nil
}

// CreateTableRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTableRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTableRequestMultiError) AllErrors() []error { return m }

// CreateTableRequestValidationError is the validation error returned by
// CreateTableRequest.Validate if the designated constraints aren't met.
type CreateTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTableRequestValidationError) ErrorName() string {
	return "CreateTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTableRequestValidationError{}

var _CreateTableRequest_SummaryFlag_InLookup = map[int32]struct{}{
	0: {},
	2: {},
	3: {},
	4: {},
}

// Validate checks the field values on CreateTableReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTableReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTableReplyMultiError, or nil if none found.
func (m *CreateTableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTableReplyValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTableReplyValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTableReplyValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTableReplyMultiError(errors)
	}

	return nil
}

// CreateTableReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTableReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTableReplyMultiError) AllErrors() []error { return m }

// CreateTableReplyValidationError is the validation error returned by
// CreateTableReply.Validate if the designated constraints aren't met.
type CreateTableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTableReplyValidationError) ErrorName() string { return "CreateTableReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTableReplyValidationError{}

// Validate checks the field values on RenameTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameTableRequestMultiError, or nil if none found.
func (m *RenameTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := RenameTableRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := RenameTableRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RenameTableRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RenameTableRequestMultiError(errors)
	}

	return nil
}

// RenameTableRequestMultiError is an error wrapping multiple validation errors
// returned by RenameTableRequest.ValidateAll() if the designated constraints
// aren't met.
type RenameTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameTableRequestMultiError) AllErrors() []error { return m }

// RenameTableRequestValidationError is the validation error returned by
// RenameTableRequest.Validate if the designated constraints aren't met.
type RenameTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameTableRequestValidationError) ErrorName() string {
	return "RenameTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameTableRequestValidationError{}

// Validate checks the field values on RenameTableReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RenameTableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameTableReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameTableReplyMultiError, or nil if none found.
func (m *RenameTableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameTableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for Name

	if len(errors) > 0 {
		return RenameTableReplyMultiError(errors)
	}

	return nil
}

// RenameTableReplyMultiError is an error wrapping multiple validation errors
// returned by RenameTableReply.ValidateAll() if the designated constraints
// aren't met.
type RenameTableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameTableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameTableReplyMultiError) AllErrors() []error { return m }

// RenameTableReplyValidationError is the validation error returned by
// RenameTableReply.Validate if the designated constraints aren't met.
type RenameTableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameTableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameTableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameTableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameTableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameTableReplyValidationError) ErrorName() string { return "RenameTableReplyValidationError" }

// Error satisfies the builtin error interface
func (e RenameTableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameTableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameTableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameTableReplyValidationError{}

// Validate checks the field values on CopyTablesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyTablesRequestMultiError, or nil if none found.
func (m *CopyTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSrcAppId() <= 0 {
		err := CopyTablesRequestValidationError{
			field:  "SrcAppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDstAppId() <= 0 {
		err := CopyTablesRequestValidationError{
			field:  "DstAppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OldToNewPermission

	if len(errors) > 0 {
		return CopyTablesRequestMultiError(errors)
	}

	return nil
}

// CopyTablesRequestMultiError is an error wrapping multiple validation errors
// returned by CopyTablesRequest.ValidateAll() if the designated constraints
// aren't met.
type CopyTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyTablesRequestMultiError) AllErrors() []error { return m }

// CopyTablesRequestValidationError is the validation error returned by
// CopyTablesRequest.Validate if the designated constraints aren't met.
type CopyTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyTablesRequestValidationError) ErrorName() string {
	return "CopyTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CopyTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyTablesRequestValidationError{}

// Validate checks the field values on CopyTablesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyTablesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyTablesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyTablesReplyMultiError, or nil if none found.
func (m *CopyTablesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyTablesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CopyTablesReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CopyTablesReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CopyTablesReplyValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OldToNewTableId

	if len(errors) > 0 {
		return CopyTablesReplyMultiError(errors)
	}

	return nil
}

// CopyTablesReplyMultiError is an error wrapping multiple validation errors
// returned by CopyTablesReply.ValidateAll() if the designated constraints
// aren't met.
type CopyTablesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyTablesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyTablesReplyMultiError) AllErrors() []error { return m }

// CopyTablesReplyValidationError is the validation error returned by
// CopyTablesReply.Validate if the designated constraints aren't met.
type CopyTablesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyTablesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyTablesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyTablesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyTablesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyTablesReplyValidationError) ErrorName() string { return "CopyTablesReplyValidationError" }

// Error satisfies the builtin error interface
func (e CopyTablesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyTablesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyTablesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyTablesReplyValidationError{}

// Validate checks the field values on DeleteTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTableRequestMultiError, or nil if none found.
func (m *DeleteTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := DeleteTableRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := DeleteTableRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTableRequestMultiError(errors)
	}

	return nil
}

// DeleteTableRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTableRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTableRequestMultiError) AllErrors() []error { return m }

// DeleteTableRequestValidationError is the validation error returned by
// DeleteTableRequest.Validate if the designated constraints aren't met.
type DeleteTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTableRequestValidationError) ErrorName() string {
	return "DeleteTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTableRequestValidationError{}

// Validate checks the field values on DeleteTableReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTableReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTableReplyMultiError, or nil if none found.
func (m *DeleteTableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	if len(errors) > 0 {
		return DeleteTableReplyMultiError(errors)
	}

	return nil
}

// DeleteTableReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteTableReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteTableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTableReplyMultiError) AllErrors() []error { return m }

// DeleteTableReplyValidationError is the validation error returned by
// DeleteTableReply.Validate if the designated constraints aren't met.
type DeleteTableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTableReplyValidationError) ErrorName() string { return "DeleteTableReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTableReplyValidationError{}

// Validate checks the field values on SetAutoScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAutoScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAutoScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAutoScheduleRequestMultiError, or nil if none found.
func (m *SetAutoScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAutoScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := SetAutoScheduleRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := SetAutoScheduleRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetAutoScheduleFlag(); val < 1 || val > 2 {
		err := SetAutoScheduleRequestValidationError{
			field:  "AutoScheduleFlag",
			reason: "value must be inside range [1, 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetAutoScheduleRequestMultiError(errors)
	}

	return nil
}

// SetAutoScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by SetAutoScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetAutoScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAutoScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAutoScheduleRequestMultiError) AllErrors() []error { return m }

// SetAutoScheduleRequestValidationError is the validation error returned by
// SetAutoScheduleRequest.Validate if the designated constraints aren't met.
type SetAutoScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAutoScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAutoScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAutoScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAutoScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAutoScheduleRequestValidationError) ErrorName() string {
	return "SetAutoScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetAutoScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAutoScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAutoScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAutoScheduleRequestValidationError{}

// Validate checks the field values on SetAutoScheduleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAutoScheduleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAutoScheduleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAutoScheduleReplyMultiError, or nil if none found.
func (m *SetAutoScheduleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAutoScheduleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for AutoScheduleFlag

	if len(errors) > 0 {
		return SetAutoScheduleReplyMultiError(errors)
	}

	return nil
}

// SetAutoScheduleReplyMultiError is an error wrapping multiple validation
// errors returned by SetAutoScheduleReply.ValidateAll() if the designated
// constraints aren't met.
type SetAutoScheduleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAutoScheduleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAutoScheduleReplyMultiError) AllErrors() []error { return m }

// SetAutoScheduleReplyValidationError is the validation error returned by
// SetAutoScheduleReply.Validate if the designated constraints aren't met.
type SetAutoScheduleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAutoScheduleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAutoScheduleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAutoScheduleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAutoScheduleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAutoScheduleReplyValidationError) ErrorName() string {
	return "SetAutoScheduleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SetAutoScheduleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAutoScheduleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAutoScheduleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAutoScheduleReplyValidationError{}

// Validate checks the field values on ReadTablesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTablesRequestMultiError, or nil if none found.
func (m *ReadTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := ReadTablesRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadTablesRequestMultiError(errors)
	}

	return nil
}

// ReadTablesRequestMultiError is an error wrapping multiple validation errors
// returned by ReadTablesRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTablesRequestMultiError) AllErrors() []error { return m }

// ReadTablesRequestValidationError is the validation error returned by
// ReadTablesRequest.Validate if the designated constraints aren't met.
type ReadTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTablesRequestValidationError) ErrorName() string {
	return "ReadTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTablesRequestValidationError{}

// Validate checks the field values on ReadTablesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadTablesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTablesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTablesReplyMultiError, or nil if none found.
func (m *ReadTablesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTablesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadTablesReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadTablesReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadTablesReplyValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadTablesReplyMultiError(errors)
	}

	return nil
}

// ReadTablesReplyMultiError is an error wrapping multiple validation errors
// returned by ReadTablesReply.ValidateAll() if the designated constraints
// aren't met.
type ReadTablesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTablesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTablesReplyMultiError) AllErrors() []error { return m }

// ReadTablesReplyValidationError is the validation error returned by
// ReadTablesReply.Validate if the designated constraints aren't met.
type ReadTablesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTablesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTablesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTablesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTablesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTablesReplyValidationError) ErrorName() string { return "ReadTablesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReadTablesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTablesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTablesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTablesReplyValidationError{}

// Validate checks the field values on ReadTablesByAppsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTablesByAppsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTablesByAppsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTablesByAppsRequestMultiError, or nil if none found.
func (m *ReadTablesByAppsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTablesByAppsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAppIds()) < 1 {
		err := ReadTablesByAppsRequestValidationError{
			field:  "AppIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadTablesByAppsRequestMultiError(errors)
	}

	return nil
}

// ReadTablesByAppsRequestMultiError is an error wrapping multiple validation
// errors returned by ReadTablesByAppsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadTablesByAppsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTablesByAppsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTablesByAppsRequestMultiError) AllErrors() []error { return m }

// ReadTablesByAppsRequestValidationError is the validation error returned by
// ReadTablesByAppsRequest.Validate if the designated constraints aren't met.
type ReadTablesByAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTablesByAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTablesByAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTablesByAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTablesByAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTablesByAppsRequestValidationError) ErrorName() string {
	return "ReadTablesByAppsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTablesByAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTablesByAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTablesByAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTablesByAppsRequestValidationError{}

// Validate checks the field values on ReadTablesByAppsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTablesByAppsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTablesByAppsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTablesByAppsReplyMultiError, or nil if none found.
func (m *ReadTablesByAppsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTablesByAppsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAppsTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadTablesByAppsReplyValidationError{
						field:  fmt.Sprintf("AppsTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadTablesByAppsReplyValidationError{
						field:  fmt.Sprintf("AppsTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadTablesByAppsReplyValidationError{
					field:  fmt.Sprintf("AppsTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadTablesByAppsReplyMultiError(errors)
	}

	return nil
}

// ReadTablesByAppsReplyMultiError is an error wrapping multiple validation
// errors returned by ReadTablesByAppsReply.ValidateAll() if the designated
// constraints aren't met.
type ReadTablesByAppsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTablesByAppsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTablesByAppsReplyMultiError) AllErrors() []error { return m }

// ReadTablesByAppsReplyValidationError is the validation error returned by
// ReadTablesByAppsReply.Validate if the designated constraints aren't met.
type ReadTablesByAppsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTablesByAppsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTablesByAppsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTablesByAppsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTablesByAppsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTablesByAppsReplyValidationError) ErrorName() string {
	return "ReadTablesByAppsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTablesByAppsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTablesByAppsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTablesByAppsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTablesByAppsReplyValidationError{}

// Validate checks the field values on ReadTableSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTableSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTableSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTableSchemasRequestMultiError, or nil if none found.
func (m *ReadTableSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTableSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTableIds()) < 1 {
		err := ReadTableSchemasRequestValidationError{
			field:  "TableIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsNeedDescription

	// no validation rules for IsNeedCommonColumn

	if len(errors) > 0 {
		return ReadTableSchemasRequestMultiError(errors)
	}

	return nil
}

// ReadTableSchemasRequestMultiError is an error wrapping multiple validation
// errors returned by ReadTableSchemasRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadTableSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTableSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTableSchemasRequestMultiError) AllErrors() []error { return m }

// ReadTableSchemasRequestValidationError is the validation error returned by
// ReadTableSchemasRequest.Validate if the designated constraints aren't met.
type ReadTableSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTableSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTableSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTableSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTableSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTableSchemasRequestValidationError) ErrorName() string {
	return "ReadTableSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTableSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTableSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTableSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTableSchemasRequestValidationError{}

// Validate checks the field values on ReadTableSchemasReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTableSchemasReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTableSchemasReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTableSchemasReplyMultiError, or nil if none found.
func (m *ReadTableSchemasReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTableSchemasReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadTableSchemasReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadTableSchemasReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadTableSchemasReplyValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadTableSchemasReplyMultiError(errors)
	}

	return nil
}

// ReadTableSchemasReplyMultiError is an error wrapping multiple validation
// errors returned by ReadTableSchemasReply.ValidateAll() if the designated
// constraints aren't met.
type ReadTableSchemasReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTableSchemasReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTableSchemasReplyMultiError) AllErrors() []error { return m }

// ReadTableSchemasReplyValidationError is the validation error returned by
// ReadTableSchemasReply.Validate if the designated constraints aren't met.
type ReadTableSchemasReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTableSchemasReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTableSchemasReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTableSchemasReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTableSchemasReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTableSchemasReplyValidationError) ErrorName() string {
	return "ReadTableSchemasReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTableSchemasReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTableSchemasReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTableSchemasReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTableSchemasReplyValidationError{}

// Validate checks the field values on ReadTableSchemasByAppIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTableSchemasByAppIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTableSchemasByAppIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadTableSchemasByAppIdRequestMultiError, or nil if none found.
func (m *ReadTableSchemasByAppIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTableSchemasByAppIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := ReadTableSchemasByAppIdRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsNeedCommonColumn

	if len(errors) > 0 {
		return ReadTableSchemasByAppIdRequestMultiError(errors)
	}

	return nil
}

// ReadTableSchemasByAppIdRequestMultiError is an error wrapping multiple
// validation errors returned by ReadTableSchemasByAppIdRequest.ValidateAll()
// if the designated constraints aren't met.
type ReadTableSchemasByAppIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTableSchemasByAppIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTableSchemasByAppIdRequestMultiError) AllErrors() []error { return m }

// ReadTableSchemasByAppIdRequestValidationError is the validation error
// returned by ReadTableSchemasByAppIdRequest.Validate if the designated
// constraints aren't met.
type ReadTableSchemasByAppIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTableSchemasByAppIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTableSchemasByAppIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTableSchemasByAppIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTableSchemasByAppIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTableSchemasByAppIdRequestValidationError) ErrorName() string {
	return "ReadTableSchemasByAppIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTableSchemasByAppIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTableSchemasByAppIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTableSchemasByAppIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTableSchemasByAppIdRequestValidationError{}

// Validate checks the field values on ReadTableSchemasByAppIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTableSchemasByAppIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTableSchemasByAppIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTableSchemasByAppIdReplyMultiError, or nil if none found.
func (m *ReadTableSchemasByAppIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTableSchemasByAppIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadTableSchemasByAppIdReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadTableSchemasByAppIdReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadTableSchemasByAppIdReplyValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadTableSchemasByAppIdReplyMultiError(errors)
	}

	return nil
}

// ReadTableSchemasByAppIdReplyMultiError is an error wrapping multiple
// validation errors returned by ReadTableSchemasByAppIdReply.ValidateAll() if
// the designated constraints aren't met.
type ReadTableSchemasByAppIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTableSchemasByAppIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTableSchemasByAppIdReplyMultiError) AllErrors() []error { return m }

// ReadTableSchemasByAppIdReplyValidationError is the validation error returned
// by ReadTableSchemasByAppIdReply.Validate if the designated constraints
// aren't met.
type ReadTableSchemasByAppIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTableSchemasByAppIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTableSchemasByAppIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTableSchemasByAppIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTableSchemasByAppIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTableSchemasByAppIdReplyValidationError) ErrorName() string {
	return "ReadTableSchemasByAppIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTableSchemasByAppIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTableSchemasByAppIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTableSchemasByAppIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTableSchemasByAppIdReplyValidationError{}

// Validate checks the field values on ReadSummeryTableIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadSummeryTableIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadSummeryTableIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadSummeryTableIdRequestMultiError, or nil if none found.
func (m *ReadSummeryTableIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadSummeryTableIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadSummeryTableIdRequestMultiError(errors)
	}

	return nil
}

// ReadSummeryTableIdRequestMultiError is an error wrapping multiple validation
// errors returned by ReadSummeryTableIdRequest.ValidateAll() if the
// designated constraints aren't met.
type ReadSummeryTableIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadSummeryTableIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadSummeryTableIdRequestMultiError) AllErrors() []error { return m }

// ReadSummeryTableIdRequestValidationError is the validation error returned by
// ReadSummeryTableIdRequest.Validate if the designated constraints aren't met.
type ReadSummeryTableIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSummeryTableIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSummeryTableIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSummeryTableIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSummeryTableIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSummeryTableIdRequestValidationError) ErrorName() string {
	return "ReadSummeryTableIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSummeryTableIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSummeryTableIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSummeryTableIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSummeryTableIdRequestValidationError{}

// Validate checks the field values on ReadSummeryTableIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadSummeryTableIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadSummeryTableIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadSummeryTableIdReplyMultiError, or nil if none found.
func (m *ReadSummeryTableIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadSummeryTableIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for AppId

	if len(errors) > 0 {
		return ReadSummeryTableIdReplyMultiError(errors)
	}

	return nil
}

// ReadSummeryTableIdReplyMultiError is an error wrapping multiple validation
// errors returned by ReadSummeryTableIdReply.ValidateAll() if the designated
// constraints aren't met.
type ReadSummeryTableIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadSummeryTableIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadSummeryTableIdReplyMultiError) AllErrors() []error { return m }

// ReadSummeryTableIdReplyValidationError is the validation error returned by
// ReadSummeryTableIdReply.Validate if the designated constraints aren't met.
type ReadSummeryTableIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSummeryTableIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSummeryTableIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSummeryTableIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSummeryTableIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSummeryTableIdReplyValidationError) ErrorName() string {
	return "ReadSummeryTableIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSummeryTableIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSummeryTableIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSummeryTableIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSummeryTableIdReplyValidationError{}

// Validate checks the field values on ReadTableRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTableRequestMultiError, or nil if none found.
func (m *ReadTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTableId() <= 0 {
		err := ReadTableRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadTableRequestMultiError(errors)
	}

	return nil
}

// ReadTableRequestMultiError is an error wrapping multiple validation errors
// returned by ReadTableRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTableRequestMultiError) AllErrors() []error { return m }

// ReadTableRequestValidationError is the validation error returned by
// ReadTableRequest.Validate if the designated constraints aren't met.
type ReadTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTableRequestValidationError) ErrorName() string { return "ReadTableRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTableRequestValidationError{}

// Validate checks the field values on ReadTableReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadTableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTableReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadTableReplyMultiError,
// or nil if none found.
func (m *ReadTableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadTableReplyValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadTableReplyValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadTableReplyValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadTableReplyMultiError(errors)
	}

	return nil
}

// ReadTableReplyMultiError is an error wrapping multiple validation errors
// returned by ReadTableReply.ValidateAll() if the designated constraints
// aren't met.
type ReadTableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTableReplyMultiError) AllErrors() []error { return m }

// ReadTableReplyValidationError is the validation error returned by
// ReadTableReply.Validate if the designated constraints aren't met.
type ReadTableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTableReplyValidationError) ErrorName() string { return "ReadTableReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReadTableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTableReplyValidationError{}

// Validate checks the field values on ReadOrgTableSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrgTableSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrgTableSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrgTableSchemasRequestMultiError, or nil if none found.
func (m *ReadOrgTableSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrgTableSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadOrgTableSchemasRequestMultiError(errors)
	}

	return nil
}

// ReadOrgTableSchemasRequestMultiError is an error wrapping multiple
// validation errors returned by ReadOrgTableSchemasRequest.ValidateAll() if
// the designated constraints aren't met.
type ReadOrgTableSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrgTableSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrgTableSchemasRequestMultiError) AllErrors() []error { return m }

// ReadOrgTableSchemasRequestValidationError is the validation error returned
// by ReadOrgTableSchemasRequest.Validate if the designated constraints aren't met.
type ReadOrgTableSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrgTableSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrgTableSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrgTableSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrgTableSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrgTableSchemasRequestValidationError) ErrorName() string {
	return "ReadOrgTableSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrgTableSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrgTableSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrgTableSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrgTableSchemasRequestValidationError{}

// Validate checks the field values on ReadOrgTableSchemasReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrgTableSchemasReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrgTableSchemasReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrgTableSchemasReplyMultiError, or nil if none found.
func (m *ReadOrgTableSchemasReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrgTableSchemasReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadOrgTableSchemasReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadOrgTableSchemasReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadOrgTableSchemasReplyValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadOrgTableSchemasReplyMultiError(errors)
	}

	return nil
}

// ReadOrgTableSchemasReplyMultiError is an error wrapping multiple validation
// errors returned by ReadOrgTableSchemasReply.ValidateAll() if the designated
// constraints aren't met.
type ReadOrgTableSchemasReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrgTableSchemasReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrgTableSchemasReplyMultiError) AllErrors() []error { return m }

// ReadOrgTableSchemasReplyValidationError is the validation error returned by
// ReadOrgTableSchemasReply.Validate if the designated constraints aren't met.
type ReadOrgTableSchemasReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrgTableSchemasReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrgTableSchemasReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrgTableSchemasReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrgTableSchemasReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrgTableSchemasReplyValidationError) ErrorName() string {
	return "ReadOrgTableSchemasReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrgTableSchemasReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrgTableSchemasReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrgTableSchemasReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrgTableSchemasReplyValidationError{}

// Validate checks the field values on InitOrgColumnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitOrgColumnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitOrgColumnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitOrgColumnsRequestMultiError, or nil if none found.
func (m *InitOrgColumnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitOrgColumnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetColumns()) < 1 {
		err := InitOrgColumnsRequestValidationError{
			field:  "Columns",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitOrgColumnsRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitOrgColumnsRequestValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitOrgColumnsRequestValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InitOrgColumnsRequestMultiError(errors)
	}

	return nil
}

// InitOrgColumnsRequestMultiError is an error wrapping multiple validation
// errors returned by InitOrgColumnsRequest.ValidateAll() if the designated
// constraints aren't met.
type InitOrgColumnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitOrgColumnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitOrgColumnsRequestMultiError) AllErrors() []error { return m }

// InitOrgColumnsRequestValidationError is the validation error returned by
// InitOrgColumnsRequest.Validate if the designated constraints aren't met.
type InitOrgColumnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitOrgColumnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitOrgColumnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitOrgColumnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitOrgColumnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitOrgColumnsRequestValidationError) ErrorName() string {
	return "InitOrgColumnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitOrgColumnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitOrgColumnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitOrgColumnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitOrgColumnsRequestValidationError{}

// Validate checks the field values on InitOrgColumnsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitOrgColumnsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitOrgColumnsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitOrgColumnsReplyMultiError, or nil if none found.
func (m *InitOrgColumnsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InitOrgColumnsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitOrgColumnsReplyMultiError(errors)
	}

	return nil
}

// InitOrgColumnsReplyMultiError is an error wrapping multiple validation
// errors returned by InitOrgColumnsReply.ValidateAll() if the designated
// constraints aren't met.
type InitOrgColumnsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitOrgColumnsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitOrgColumnsReplyMultiError) AllErrors() []error { return m }

// InitOrgColumnsReplyValidationError is the validation error returned by
// InitOrgColumnsReply.Validate if the designated constraints aren't met.
type InitOrgColumnsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitOrgColumnsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitOrgColumnsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitOrgColumnsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitOrgColumnsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitOrgColumnsReplyValidationError) ErrorName() string {
	return "InitOrgColumnsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e InitOrgColumnsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitOrgColumnsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitOrgColumnsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitOrgColumnsReplyValidationError{}

// Validate checks the field values on ReadOrgColumnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrgColumnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrgColumnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrgColumnsRequestMultiError, or nil if none found.
func (m *ReadOrgColumnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrgColumnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadOrgColumnsRequestMultiError(errors)
	}

	return nil
}

// ReadOrgColumnsRequestMultiError is an error wrapping multiple validation
// errors returned by ReadOrgColumnsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadOrgColumnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrgColumnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrgColumnsRequestMultiError) AllErrors() []error { return m }

// ReadOrgColumnsRequestValidationError is the validation error returned by
// ReadOrgColumnsRequest.Validate if the designated constraints aren't met.
type ReadOrgColumnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrgColumnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrgColumnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrgColumnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrgColumnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrgColumnsRequestValidationError) ErrorName() string {
	return "ReadOrgColumnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrgColumnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrgColumnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrgColumnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrgColumnsRequestValidationError{}

// Validate checks the field values on ReadOrgColumnsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrgColumnsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrgColumnsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrgColumnsReplyMultiError, or nil if none found.
func (m *ReadOrgColumnsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrgColumnsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadOrgColumnsReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadOrgColumnsReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadOrgColumnsReplyValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadOrgColumnsReplyMultiError(errors)
	}

	return nil
}

// ReadOrgColumnsReplyMultiError is an error wrapping multiple validation
// errors returned by ReadOrgColumnsReply.ValidateAll() if the designated
// constraints aren't met.
type ReadOrgColumnsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrgColumnsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrgColumnsReplyMultiError) AllErrors() []error { return m }

// ReadOrgColumnsReplyValidationError is the validation error returned by
// ReadOrgColumnsReply.Validate if the designated constraints aren't met.
type ReadOrgColumnsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrgColumnsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrgColumnsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrgColumnsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrgColumnsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrgColumnsReplyValidationError) ErrorName() string {
	return "ReadOrgColumnsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrgColumnsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrgColumnsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrgColumnsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrgColumnsReplyValidationError{}

// Validate checks the field values on CreateOrgColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgColumnRequestMultiError, or nil if none found.
func (m *CreateOrgColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetColumn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgColumnRequestValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgColumnRequestValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColumn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgColumnRequestValidationError{
				field:  "Column",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgColumnRequestMultiError(errors)
	}

	return nil
}

// CreateOrgColumnRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrgColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgColumnRequestMultiError) AllErrors() []error { return m }

// CreateOrgColumnRequestValidationError is the validation error returned by
// CreateOrgColumnRequest.Validate if the designated constraints aren't met.
type CreateOrgColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgColumnRequestValidationError) ErrorName() string {
	return "CreateOrgColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgColumnRequestValidationError{}

// Validate checks the field values on CreateOrgColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgColumnReplyMultiError, or nil if none found.
func (m *CreateOrgColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrgColumnReplyMultiError(errors)
	}

	return nil
}

// CreateOrgColumnReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOrgColumnReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgColumnReplyMultiError) AllErrors() []error { return m }

// CreateOrgColumnReplyValidationError is the validation error returned by
// CreateOrgColumnReply.Validate if the designated constraints aren't met.
type CreateOrgColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgColumnReplyValidationError) ErrorName() string {
	return "CreateOrgColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgColumnReplyValidationError{}

// Validate checks the field values on DeleteOrgColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgColumnRequestMultiError, or nil if none found.
func (m *DeleteOrgColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetColumnId()) < 1 {
		err := DeleteOrgColumnRequestValidationError{
			field:  "ColumnId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrgColumnRequestMultiError(errors)
	}

	return nil
}

// DeleteOrgColumnRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrgColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrgColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgColumnRequestMultiError) AllErrors() []error { return m }

// DeleteOrgColumnRequestValidationError is the validation error returned by
// DeleteOrgColumnRequest.Validate if the designated constraints aren't met.
type DeleteOrgColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgColumnRequestValidationError) ErrorName() string {
	return "DeleteOrgColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgColumnRequestValidationError{}

// Validate checks the field values on DeleteOrgColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgColumnReplyMultiError, or nil if none found.
func (m *DeleteOrgColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrgColumnReplyMultiError(errors)
	}

	return nil
}

// DeleteOrgColumnReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteOrgColumnReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrgColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgColumnReplyMultiError) AllErrors() []error { return m }

// DeleteOrgColumnReplyValidationError is the validation error returned by
// DeleteOrgColumnReply.Validate if the designated constraints aren't met.
type DeleteOrgColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgColumnReplyValidationError) ErrorName() string {
	return "DeleteOrgColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgColumnReplyValidationError{}

// Validate checks the field values on CreateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnRequestMultiError, or nil if none found.
func (m *CreateColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := CreateColumnRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := CreateColumnRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetColumn() == nil {
		err := CreateColumnRequestValidationError{
			field:  "Column",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetColumn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateColumnRequestValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateColumnRequestValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColumn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateColumnRequestValidationError{
				field:  "Column",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActiveViewId

	// no validation rules for SourceOrgColumnId

	if len(errors) > 0 {
		return CreateColumnRequestMultiError(errors)
	}

	return nil
}

// CreateColumnRequestMultiError is an error wrapping multiple validation
// errors returned by CreateColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnRequestMultiError) AllErrors() []error { return m }

// CreateColumnRequestValidationError is the validation error returned by
// CreateColumnRequest.Validate if the designated constraints aren't met.
type CreateColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnRequestValidationError) ErrorName() string {
	return "CreateColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnRequestValidationError{}

// Validate checks the field values on CreateColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnReplyMultiError, or nil if none found.
func (m *CreateColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	if all {
		switch v := interface{}(m.GetColumn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateColumnReplyValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateColumnReplyValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColumn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateColumnReplyValidationError{
				field:  "Column",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateColumnReplyMultiError(errors)
	}

	return nil
}

// CreateColumnReplyMultiError is an error wrapping multiple validation errors
// returned by CreateColumnReply.ValidateAll() if the designated constraints
// aren't met.
type CreateColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnReplyMultiError) AllErrors() []error { return m }

// CreateColumnReplyValidationError is the validation error returned by
// CreateColumnReply.Validate if the designated constraints aren't met.
type CreateColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnReplyValidationError) ErrorName() string {
	return "CreateColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnReplyValidationError{}

// Validate checks the field values on CopyColumnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyColumnRequestMultiError, or nil if none found.
func (m *CopyColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := CopyColumnRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := CopyColumnRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSrcColumnId()) < 1 {
		err := CopyColumnRequestValidationError{
			field:  "SrcColumnId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CopyColumnRequestMultiError(errors)
	}

	return nil
}

// CopyColumnRequestMultiError is an error wrapping multiple validation errors
// returned by CopyColumnRequest.ValidateAll() if the designated constraints
// aren't met.
type CopyColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyColumnRequestMultiError) AllErrors() []error { return m }

// CopyColumnRequestValidationError is the validation error returned by
// CopyColumnRequest.Validate if the designated constraints aren't met.
type CopyColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyColumnRequestValidationError) ErrorName() string {
	return "CopyColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CopyColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyColumnRequestValidationError{}

// Validate checks the field values on CopyColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyColumnReplyMultiError, or nil if none found.
func (m *CopyColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreateColumnId

	if len(errors) > 0 {
		return CopyColumnReplyMultiError(errors)
	}

	return nil
}

// CopyColumnReplyMultiError is an error wrapping multiple validation errors
// returned by CopyColumnReply.ValidateAll() if the designated constraints
// aren't met.
type CopyColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyColumnReplyMultiError) AllErrors() []error { return m }

// CopyColumnReplyValidationError is the validation error returned by
// CopyColumnReply.Validate if the designated constraints aren't met.
type CopyColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyColumnReplyValidationError) ErrorName() string { return "CopyColumnReplyValidationError" }

// Error satisfies the builtin error interface
func (e CopyColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyColumnReplyValidationError{}

// Validate checks the field values on UpdateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateColumnRequestMultiError, or nil if none found.
func (m *UpdateColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := UpdateColumnRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := UpdateColumnRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetColumn() == nil {
		err := UpdateColumnRequestValidationError{
			field:  "Column",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetColumn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateColumnRequestValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateColumnRequestValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColumn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateColumnRequestValidationError{
				field:  "Column",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateColumnRequestMultiError(errors)
	}

	return nil
}

// UpdateColumnRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateColumnRequestMultiError) AllErrors() []error { return m }

// UpdateColumnRequestValidationError is the validation error returned by
// UpdateColumnRequest.Validate if the designated constraints aren't met.
type UpdateColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateColumnRequestValidationError) ErrorName() string {
	return "UpdateColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateColumnRequestValidationError{}

// Validate checks the field values on UpdateColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateColumnReplyMultiError, or nil if none found.
func (m *UpdateColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	if all {
		switch v := interface{}(m.GetColumn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateColumnReplyValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateColumnReplyValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColumn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateColumnReplyValidationError{
				field:  "Column",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateColumnReplyMultiError(errors)
	}

	return nil
}

// UpdateColumnReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateColumnReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateColumnReplyMultiError) AllErrors() []error { return m }

// UpdateColumnReplyValidationError is the validation error returned by
// UpdateColumnReply.Validate if the designated constraints aren't met.
type UpdateColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateColumnReplyValidationError) ErrorName() string {
	return "UpdateColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateColumnReplyValidationError{}

// Validate checks the field values on UpdateColumnDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateColumnDescriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateColumnDescriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateColumnDescriptionRequestMultiError, or nil if none found.
func (m *UpdateColumnDescriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateColumnDescriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := UpdateColumnDescriptionRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := UpdateColumnDescriptionRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetColumnId()) < 1 {
		err := UpdateColumnDescriptionRequestValidationError{
			field:  "ColumnId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateColumnDescriptionRequestMultiError(errors)
	}

	return nil
}

// UpdateColumnDescriptionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateColumnDescriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateColumnDescriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateColumnDescriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateColumnDescriptionRequestMultiError) AllErrors() []error { return m }

// UpdateColumnDescriptionRequestValidationError is the validation error
// returned by UpdateColumnDescriptionRequest.Validate if the designated
// constraints aren't met.
type UpdateColumnDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateColumnDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateColumnDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateColumnDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateColumnDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateColumnDescriptionRequestValidationError) ErrorName() string {
	return "UpdateColumnDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateColumnDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateColumnDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateColumnDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateColumnDescriptionRequestValidationError{}

// Validate checks the field values on UpdateColumnDescriptionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateColumnDescriptionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateColumnDescriptionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateColumnDescriptionReplyMultiError, or nil if none found.
func (m *UpdateColumnDescriptionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateColumnDescriptionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	if len(errors) > 0 {
		return UpdateColumnDescriptionReplyMultiError(errors)
	}

	return nil
}

// UpdateColumnDescriptionReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateColumnDescriptionReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateColumnDescriptionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateColumnDescriptionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateColumnDescriptionReplyMultiError) AllErrors() []error { return m }

// UpdateColumnDescriptionReplyValidationError is the validation error returned
// by UpdateColumnDescriptionReply.Validate if the designated constraints
// aren't met.
type UpdateColumnDescriptionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateColumnDescriptionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateColumnDescriptionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateColumnDescriptionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateColumnDescriptionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateColumnDescriptionReplyValidationError) ErrorName() string {
	return "UpdateColumnDescriptionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateColumnDescriptionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateColumnDescriptionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateColumnDescriptionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateColumnDescriptionReplyValidationError{}

// Validate checks the field values on DeleteColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColumnRequestMultiError, or nil if none found.
func (m *DeleteColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := DeleteColumnRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := DeleteColumnRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetColumnId()) < 1 {
		err := DeleteColumnRequestValidationError{
			field:  "ColumnId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteColumnRequestMultiError(errors)
	}

	return nil
}

// DeleteColumnRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnRequestMultiError) AllErrors() []error { return m }

// DeleteColumnRequestValidationError is the validation error returned by
// DeleteColumnRequest.Validate if the designated constraints aren't met.
type DeleteColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnRequestValidationError) ErrorName() string {
	return "DeleteColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnRequestValidationError{}

// Validate checks the field values on DeleteColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColumnReplyMultiError, or nil if none found.
func (m *DeleteColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	// no validation rules for ColumnId

	if len(errors) > 0 {
		return DeleteColumnReplyMultiError(errors)
	}

	return nil
}

// DeleteColumnReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteColumnReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnReplyMultiError) AllErrors() []error { return m }

// DeleteColumnReplyValidationError is the validation error returned by
// DeleteColumnReply.Validate if the designated constraints aren't met.
type DeleteColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnReplyValidationError) ErrorName() string {
	return "DeleteColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnReplyValidationError{}

// Validate checks the field values on CreateRowsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRowsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRowsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRowsRequestMultiError, or nil if none found.
func (m *CreateRowsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRowsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for AfterRowId

	// no validation rules for BeforeRowId

	// no validation rules for IsAsc

	// no validation rules for IsImport

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRowsRequestValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRowsRequestValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRowsRequestValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRowsRequestMultiError(errors)
	}

	return nil
}

// CreateRowsRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRowsRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRowsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRowsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRowsRequestMultiError) AllErrors() []error { return m }

// CreateRowsRequestValidationError is the validation error returned by
// CreateRowsRequest.Validate if the designated constraints aren't met.
type CreateRowsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRowsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRowsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRowsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRowsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRowsRequestValidationError) ErrorName() string {
	return "CreateRowsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRowsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRowsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRowsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRowsRequestValidationError{}

// Validate checks the field values on CreateRowsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRowsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRowsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRowsReplyMultiError, or nil if none found.
func (m *CreateRowsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRowsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRowsReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRowsReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRowsReplyValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRowsReplyMultiError(errors)
	}

	return nil
}

// CreateRowsReplyMultiError is an error wrapping multiple validation errors
// returned by CreateRowsReply.ValidateAll() if the designated constraints
// aren't met.
type CreateRowsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRowsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRowsReplyMultiError) AllErrors() []error { return m }

// CreateRowsReplyValidationError is the validation error returned by
// CreateRowsReply.Validate if the designated constraints aren't met.
type CreateRowsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRowsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRowsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRowsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRowsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRowsReplyValidationError) ErrorName() string { return "CreateRowsReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateRowsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRowsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRowsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRowsReplyValidationError{}

// Validate checks the field values on MoveRowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoveRowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveRowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoveRowRequestMultiError,
// or nil if none found.
func (m *MoveRowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveRowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcTableId

	// no validation rules for SrcRowId

	// no validation rules for DstTableId

	// no validation rules for DstParentRowId

	// no validation rules for DstBeforeRowId

	// no validation rules for DstAfterRowId

	if len(errors) > 0 {
		return MoveRowRequestMultiError(errors)
	}

	return nil
}

// MoveRowRequestMultiError is an error wrapping multiple validation errors
// returned by MoveRowRequest.ValidateAll() if the designated constraints
// aren't met.
type MoveRowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveRowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveRowRequestMultiError) AllErrors() []error { return m }

// MoveRowRequestValidationError is the validation error returned by
// MoveRowRequest.Validate if the designated constraints aren't met.
type MoveRowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveRowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveRowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveRowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveRowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveRowRequestValidationError) ErrorName() string { return "MoveRowRequestValidationError" }

// Error satisfies the builtin error interface
func (e MoveRowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveRowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveRowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveRowRequestValidationError{}

// Validate checks the field values on MoveRowReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoveRowReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveRowReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoveRowReplyMultiError, or
// nil if none found.
func (m *MoveRowReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveRowReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcTableId

	// no validation rules for SrcRowId

	// no validation rules for DstTableId

	// no validation rules for DstParentRowId

	// no validation rules for DstBeforeRowId

	// no validation rules for DstAfterRowId

	if len(errors) > 0 {
		return MoveRowReplyMultiError(errors)
	}

	return nil
}

// MoveRowReplyMultiError is an error wrapping multiple validation errors
// returned by MoveRowReply.ValidateAll() if the designated constraints aren't met.
type MoveRowReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveRowReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveRowReplyMultiError) AllErrors() []error { return m }

// MoveRowReplyValidationError is the validation error returned by
// MoveRowReply.Validate if the designated constraints aren't met.
type MoveRowReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveRowReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveRowReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveRowReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveRowReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveRowReplyValidationError) ErrorName() string { return "MoveRowReplyValidationError" }

// Error satisfies the builtin error interface
func (e MoveRowReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveRowReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveRowReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveRowReplyValidationError{}

// Validate checks the field values on CopyRowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CopyRowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyRowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CopyRowRequestMultiError,
// or nil if none found.
func (m *CopyRowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyRowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcTableId

	// no validation rules for SrcRowId

	// no validation rules for DstTableId

	if len(errors) > 0 {
		return CopyRowRequestMultiError(errors)
	}

	return nil
}

// CopyRowRequestMultiError is an error wrapping multiple validation errors
// returned by CopyRowRequest.ValidateAll() if the designated constraints
// aren't met.
type CopyRowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyRowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyRowRequestMultiError) AllErrors() []error { return m }

// CopyRowRequestValidationError is the validation error returned by
// CopyRowRequest.Validate if the designated constraints aren't met.
type CopyRowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyRowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyRowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyRowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyRowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyRowRequestValidationError) ErrorName() string { return "CopyRowRequestValidationError" }

// Error satisfies the builtin error interface
func (e CopyRowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyRowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyRowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyRowRequestValidationError{}

// Validate checks the field values on CopyRowReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CopyRowReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyRowReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CopyRowReplyMultiError, or
// nil if none found.
func (m *CopyRowReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyRowReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcTableId

	// no validation rules for SrcRowId

	// no validation rules for DstTableId

	// no validation rules for DstRowId

	if len(errors) > 0 {
		return CopyRowReplyMultiError(errors)
	}

	return nil
}

// CopyRowReplyMultiError is an error wrapping multiple validation errors
// returned by CopyRowReply.ValidateAll() if the designated constraints aren't met.
type CopyRowReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyRowReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyRowReplyMultiError) AllErrors() []error { return m }

// CopyRowReplyValidationError is the validation error returned by
// CopyRowReply.Validate if the designated constraints aren't met.
type CopyRowReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyRowReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyRowReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyRowReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyRowReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyRowReplyValidationError) ErrorName() string { return "CopyRowReplyValidationError" }

// Error satisfies the builtin error interface
func (e CopyRowReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyRowReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyRowReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyRowReplyValidationError{}

// Validate checks the field values on DeleteRowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRowRequestMultiError, or nil if none found.
func (m *DeleteRowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for RowId

	if len(errors) > 0 {
		return DeleteRowRequestMultiError(errors)
	}

	return nil
}

// DeleteRowRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRowRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRowRequestMultiError) AllErrors() []error { return m }

// DeleteRowRequestValidationError is the validation error returned by
// DeleteRowRequest.Validate if the designated constraints aren't met.
type DeleteRowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRowRequestValidationError) ErrorName() string { return "DeleteRowRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRowRequestValidationError{}

// Validate checks the field values on DeleteRowReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRowReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRowReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRowReplyMultiError,
// or nil if none found.
func (m *DeleteRowReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRowReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for RowId

	if len(errors) > 0 {
		return DeleteRowReplyMultiError(errors)
	}

	return nil
}

// DeleteRowReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteRowReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteRowReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRowReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRowReplyMultiError) AllErrors() []error { return m }

// DeleteRowReplyValidationError is the validation error returned by
// DeleteRowReply.Validate if the designated constraints aren't met.
type DeleteRowReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRowReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRowReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRowReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRowReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRowReplyValidationError) ErrorName() string { return "DeleteRowReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRowReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRowReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRowReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRowReplyValidationError{}

// Validate checks the field values on UpdateRowRelateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRowRelateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRowRelateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRowRelateReqMultiError, or nil if none found.
func (m *UpdateRowRelateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRowRelateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for RowId

	if len(errors) > 0 {
		return UpdateRowRelateReqMultiError(errors)
	}

	return nil
}

// UpdateRowRelateReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRowRelateReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRowRelateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRowRelateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRowRelateReqMultiError) AllErrors() []error { return m }

// UpdateRowRelateReqValidationError is the validation error returned by
// UpdateRowRelateReq.Validate if the designated constraints aren't met.
type UpdateRowRelateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRowRelateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRowRelateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRowRelateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRowRelateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRowRelateReqValidationError) ErrorName() string {
	return "UpdateRowRelateReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRowRelateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRowRelateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRowRelateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRowRelateReqValidationError{}

// Validate checks the field values on UpdateRowRelateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRowRelateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRowRelateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRowRelateReplyMultiError, or nil if none found.
func (m *UpdateRowRelateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRowRelateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowId

	if len(errors) > 0 {
		return UpdateRowRelateReplyMultiError(errors)
	}

	return nil
}

// UpdateRowRelateReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateRowRelateReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateRowRelateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRowRelateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRowRelateReplyMultiError) AllErrors() []error { return m }

// UpdateRowRelateReplyValidationError is the validation error returned by
// UpdateRowRelateReply.Validate if the designated constraints aren't met.
type UpdateRowRelateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRowRelateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRowRelateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRowRelateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRowRelateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRowRelateReplyValidationError) ErrorName() string {
	return "UpdateRowRelateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRowRelateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRowRelateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRowRelateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRowRelateReplyValidationError{}

// Validate checks the field values on UpdateRowBeforeAfterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRowBeforeAfterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRowBeforeAfterReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRowBeforeAfterReqMultiError, or nil if none found.
func (m *UpdateRowBeforeAfterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRowBeforeAfterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for RowId

	// no validation rules for TableId

	if len(errors) > 0 {
		return UpdateRowBeforeAfterReqMultiError(errors)
	}

	return nil
}

// UpdateRowBeforeAfterReqMultiError is an error wrapping multiple validation
// errors returned by UpdateRowBeforeAfterReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateRowBeforeAfterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRowBeforeAfterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRowBeforeAfterReqMultiError) AllErrors() []error { return m }

// UpdateRowBeforeAfterReqValidationError is the validation error returned by
// UpdateRowBeforeAfterReq.Validate if the designated constraints aren't met.
type UpdateRowBeforeAfterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRowBeforeAfterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRowBeforeAfterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRowBeforeAfterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRowBeforeAfterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRowBeforeAfterReqValidationError) ErrorName() string {
	return "UpdateRowBeforeAfterReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRowBeforeAfterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRowBeforeAfterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRowBeforeAfterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRowBeforeAfterReqValidationError{}

// Validate checks the field values on UpdateRowBeforeAfterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRowBeforeAfterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRowBeforeAfterReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRowBeforeAfterReplyMultiError, or nil if none found.
func (m *UpdateRowBeforeAfterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRowBeforeAfterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowId

	if len(errors) > 0 {
		return UpdateRowBeforeAfterReplyMultiError(errors)
	}

	return nil
}

// UpdateRowBeforeAfterReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateRowBeforeAfterReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateRowBeforeAfterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRowBeforeAfterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRowBeforeAfterReplyMultiError) AllErrors() []error { return m }

// UpdateRowBeforeAfterReplyValidationError is the validation error returned by
// UpdateRowBeforeAfterReply.Validate if the designated constraints aren't met.
type UpdateRowBeforeAfterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRowBeforeAfterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRowBeforeAfterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRowBeforeAfterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRowBeforeAfterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRowBeforeAfterReplyValidationError) ErrorName() string {
	return "UpdateRowBeforeAfterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRowBeforeAfterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRowBeforeAfterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRowBeforeAfterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRowBeforeAfterReplyValidationError{}

// Validate checks the field values on GetRelationListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationListReqMultiError, or nil if none found.
func (m *GetRelationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for RowId

	if len(errors) > 0 {
		return GetRelationListReqMultiError(errors)
	}

	return nil
}

// GetRelationListReqMultiError is an error wrapping multiple validation errors
// returned by GetRelationListReq.ValidateAll() if the designated constraints
// aren't met.
type GetRelationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationListReqMultiError) AllErrors() []error { return m }

// GetRelationListReqValidationError is the validation error returned by
// GetRelationListReq.Validate if the designated constraints aren't met.
type GetRelationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationListReqValidationError) ErrorName() string {
	return "GetRelationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationListReqValidationError{}

// Validate checks the field values on GetRelationListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationListReplyMultiError, or nil if none found.
func (m *GetRelationListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetRelateList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRelationListReplyValidationError{
						field:  fmt.Sprintf("RelateList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRelationListReplyValidationError{
						field:  fmt.Sprintf("RelateList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRelationListReplyValidationError{
					field:  fmt.Sprintf("RelateList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBeRelatedList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRelationListReplyValidationError{
						field:  fmt.Sprintf("BeRelatedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRelationListReplyValidationError{
						field:  fmt.Sprintf("BeRelatedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRelationListReplyValidationError{
					field:  fmt.Sprintf("BeRelatedList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRelationListReplyMultiError(errors)
	}

	return nil
}

// GetRelationListReplyMultiError is an error wrapping multiple validation
// errors returned by GetRelationListReply.ValidateAll() if the designated
// constraints aren't met.
type GetRelationListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationListReplyMultiError) AllErrors() []error { return m }

// GetRelationListReplyValidationError is the validation error returned by
// GetRelationListReply.Validate if the designated constraints aren't met.
type GetRelationListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationListReplyValidationError) ErrorName() string {
	return "GetRelationListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationListReplyValidationError{}

// Validate checks the field values on GetBeforeAfterRowListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBeforeAfterRowListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBeforeAfterRowListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBeforeAfterRowListReqMultiError, or nil if none found.
func (m *GetBeforeAfterRowListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBeforeAfterRowListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for RowId

	if len(errors) > 0 {
		return GetBeforeAfterRowListReqMultiError(errors)
	}

	return nil
}

// GetBeforeAfterRowListReqMultiError is an error wrapping multiple validation
// errors returned by GetBeforeAfterRowListReq.ValidateAll() if the designated
// constraints aren't met.
type GetBeforeAfterRowListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBeforeAfterRowListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBeforeAfterRowListReqMultiError) AllErrors() []error { return m }

// GetBeforeAfterRowListReqValidationError is the validation error returned by
// GetBeforeAfterRowListReq.Validate if the designated constraints aren't met.
type GetBeforeAfterRowListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBeforeAfterRowListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBeforeAfterRowListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBeforeAfterRowListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBeforeAfterRowListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBeforeAfterRowListReqValidationError) ErrorName() string {
	return "GetBeforeAfterRowListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBeforeAfterRowListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBeforeAfterRowListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBeforeAfterRowListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBeforeAfterRowListReqValidationError{}

// Validate checks the field values on GetBeforeAfterRowListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBeforeAfterRowListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBeforeAfterRowListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBeforeAfterRowListReplyMultiError, or nil if none found.
func (m *GetBeforeAfterRowListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBeforeAfterRowListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BeforeNum

	// no validation rules for AfterNum

	for idx, item := range m.GetBeforeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBeforeAfterRowListReplyValidationError{
						field:  fmt.Sprintf("BeforeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBeforeAfterRowListReplyValidationError{
						field:  fmt.Sprintf("BeforeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBeforeAfterRowListReplyValidationError{
					field:  fmt.Sprintf("BeforeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAfterList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBeforeAfterRowListReplyValidationError{
						field:  fmt.Sprintf("AfterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBeforeAfterRowListReplyValidationError{
						field:  fmt.Sprintf("AfterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBeforeAfterRowListReplyValidationError{
					field:  fmt.Sprintf("AfterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBeforeAfterRowListReplyMultiError(errors)
	}

	return nil
}

// GetBeforeAfterRowListReplyMultiError is an error wrapping multiple
// validation errors returned by GetBeforeAfterRowListReply.ValidateAll() if
// the designated constraints aren't met.
type GetBeforeAfterRowListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBeforeAfterRowListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBeforeAfterRowListReplyMultiError) AllErrors() []error { return m }

// GetBeforeAfterRowListReplyValidationError is the validation error returned
// by GetBeforeAfterRowListReply.Validate if the designated constraints aren't met.
type GetBeforeAfterRowListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBeforeAfterRowListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBeforeAfterRowListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBeforeAfterRowListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBeforeAfterRowListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBeforeAfterRowListReplyValidationError) ErrorName() string {
	return "GetBeforeAfterRowListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetBeforeAfterRowListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBeforeAfterRowListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBeforeAfterRowListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBeforeAfterRowListReplyValidationError{}

// Validate checks the field values on ReadOrgTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrgTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrgTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrgTablesRequestMultiError, or nil if none found.
func (m *ReadOrgTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrgTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadOrgTablesRequestMultiError(errors)
	}

	return nil
}

// ReadOrgTablesRequestMultiError is an error wrapping multiple validation
// errors returned by ReadOrgTablesRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadOrgTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrgTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrgTablesRequestMultiError) AllErrors() []error { return m }

// ReadOrgTablesRequestValidationError is the validation error returned by
// ReadOrgTablesRequest.Validate if the designated constraints aren't met.
type ReadOrgTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrgTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrgTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrgTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrgTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrgTablesRequestValidationError) ErrorName() string {
	return "ReadOrgTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrgTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrgTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrgTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrgTablesRequestValidationError{}

// Validate checks the field values on ReadOrgTablesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrgTablesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrgTablesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrgTablesReplyMultiError, or nil if none found.
func (m *ReadOrgTablesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrgTablesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadOrgTablesReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadOrgTablesReplyValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadOrgTablesReplyValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadOrgTablesReplyMultiError(errors)
	}

	return nil
}

// ReadOrgTablesReplyMultiError is an error wrapping multiple validation errors
// returned by ReadOrgTablesReply.ValidateAll() if the designated constraints
// aren't met.
type ReadOrgTablesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrgTablesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrgTablesReplyMultiError) AllErrors() []error { return m }

// ReadOrgTablesReplyValidationError is the validation error returned by
// ReadOrgTablesReply.Validate if the designated constraints aren't met.
type ReadOrgTablesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrgTablesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrgTablesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrgTablesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrgTablesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrgTablesReplyValidationError) ErrorName() string {
	return "ReadOrgTablesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrgTablesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrgTablesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrgTablesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrgTablesReplyValidationError{}
