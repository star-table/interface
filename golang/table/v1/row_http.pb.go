// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type RowsHTTPServer interface {
	CheckIsAppCollaborator(context.Context, *CheckIsAppCollaboratorRequest) (*CheckIsAppCollaboratorReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	DeleteValues(context.Context, *DeleteValuesRequest) (*DeleteValuesReply, error)
	ExchangeSummaryCondition(context.Context, *ExchangeSummaryConditionRequest) (*ExchangeSummaryConditionReply, error)
	GetAppCollaboratorRoles(context.Context, *GetAppCollaboratorRolesRequest) (*GetAppCollaboratorRolesReply, error)
	GetDataCollaborators(context.Context, *GetDataCollaboratorsRequest) (*GetDataCollaboratorsReply, error)
	GetUserAppCollaboratorRoles(context.Context, *GetUserAppCollaboratorRolesRequest) (*GetUserAppCollaboratorRolesReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	ListRaw(context.Context, *ListRawRequest) (*ListRawReply, error)
	RecoverAttachment(context.Context, *RecoverAttachmentRequest) (*RecoverAttachmentReply, error)
	RecycleAttachment(context.Context, *RecycleAttachmentRequest) (*RecycleAttachmentReply, error)
}

func RegisterRowsHTTPServer(s *http.Server, srv RowsHTTPServer) {
	r := s.Route("/")
	r.POST("/inner/v1/rows/attachment/recycle", _Rows_RecycleAttachment0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/attachment/recover", _Rows_RecoverAttachment0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/values/delete", _Rows_DeleteValues0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/list", _Rows_List0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/raw/list", _Rows_ListRaw0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/delete", _Rows_Delete0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/isAppCollaborator", _Rows_CheckIsAppCollaborator0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/userAppCollaboratorRoles", _Rows_GetUserAppCollaboratorRoles0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/appCollaboratorRoles", _Rows_GetAppCollaboratorRoles0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/dataCollaborators", _Rows_GetDataCollaborators0_HTTP_Handler(srv))
	r.POST("/inner/v1/rows/exchangeCondition", _Rows_ExchangeSummaryCondition0_HTTP_Handler(srv))
}

func _Rows_RecycleAttachment0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecycleAttachmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/RecycleAttachment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecycleAttachment(ctx, req.(*RecycleAttachmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecycleAttachmentReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_RecoverAttachment0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecoverAttachmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/RecoverAttachment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecoverAttachment(ctx, req.(*RecoverAttachmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecoverAttachmentReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_DeleteValues0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteValuesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/DeleteValues")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteValues(ctx, req.(*DeleteValuesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteValuesReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_List0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/List")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_ListRaw0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRawRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/ListRaw")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRaw(ctx, req.(*ListRawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRawReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_Delete0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_CheckIsAppCollaborator0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckIsAppCollaboratorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/CheckIsAppCollaborator")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckIsAppCollaborator(ctx, req.(*CheckIsAppCollaboratorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckIsAppCollaboratorReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_GetUserAppCollaboratorRoles0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserAppCollaboratorRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/GetUserAppCollaboratorRoles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserAppCollaboratorRoles(ctx, req.(*GetUserAppCollaboratorRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserAppCollaboratorRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_GetAppCollaboratorRoles0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppCollaboratorRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/GetAppCollaboratorRoles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAppCollaboratorRoles(ctx, req.(*GetAppCollaboratorRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAppCollaboratorRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_GetDataCollaborators0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataCollaboratorsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/GetDataCollaborators")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDataCollaborators(ctx, req.(*GetDataCollaboratorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataCollaboratorsReply)
		return ctx.Result(200, reply)
	}
}

func _Rows_ExchangeSummaryCondition0_HTTP_Handler(srv RowsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeSummaryConditionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Rows/ExchangeSummaryCondition")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeSummaryCondition(ctx, req.(*ExchangeSummaryConditionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeSummaryConditionReply)
		return ctx.Result(200, reply)
	}
}

type RowsHTTPClient interface {
	CheckIsAppCollaborator(ctx context.Context, req *CheckIsAppCollaboratorRequest, opts ...http.CallOption) (rsp *CheckIsAppCollaboratorReply, err error)
	Delete(ctx context.Context, req *DeleteRequest, opts ...http.CallOption) (rsp *DeleteReply, err error)
	DeleteValues(ctx context.Context, req *DeleteValuesRequest, opts ...http.CallOption) (rsp *DeleteValuesReply, err error)
	ExchangeSummaryCondition(ctx context.Context, req *ExchangeSummaryConditionRequest, opts ...http.CallOption) (rsp *ExchangeSummaryConditionReply, err error)
	GetAppCollaboratorRoles(ctx context.Context, req *GetAppCollaboratorRolesRequest, opts ...http.CallOption) (rsp *GetAppCollaboratorRolesReply, err error)
	GetDataCollaborators(ctx context.Context, req *GetDataCollaboratorsRequest, opts ...http.CallOption) (rsp *GetDataCollaboratorsReply, err error)
	GetUserAppCollaboratorRoles(ctx context.Context, req *GetUserAppCollaboratorRolesRequest, opts ...http.CallOption) (rsp *GetUserAppCollaboratorRolesReply, err error)
	List(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	ListRaw(ctx context.Context, req *ListRawRequest, opts ...http.CallOption) (rsp *ListRawReply, err error)
	RecoverAttachment(ctx context.Context, req *RecoverAttachmentRequest, opts ...http.CallOption) (rsp *RecoverAttachmentReply, err error)
	RecycleAttachment(ctx context.Context, req *RecycleAttachmentRequest, opts ...http.CallOption) (rsp *RecycleAttachmentReply, err error)
}

type RowsHTTPClientImpl struct {
	cc *http.Client
}

func NewRowsHTTPClient(client *http.Client) RowsHTTPClient {
	return &RowsHTTPClientImpl{client}
}

func (c *RowsHTTPClientImpl) CheckIsAppCollaborator(ctx context.Context, in *CheckIsAppCollaboratorRequest, opts ...http.CallOption) (*CheckIsAppCollaboratorReply, error) {
	var out CheckIsAppCollaboratorReply
	pattern := "/inner/v1/rows/isAppCollaborator"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/CheckIsAppCollaborator"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) Delete(ctx context.Context, in *DeleteRequest, opts ...http.CallOption) (*DeleteReply, error) {
	var out DeleteReply
	pattern := "/inner/v1/rows/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) DeleteValues(ctx context.Context, in *DeleteValuesRequest, opts ...http.CallOption) (*DeleteValuesReply, error) {
	var out DeleteValuesReply
	pattern := "/inner/v1/rows/values/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/DeleteValues"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) ExchangeSummaryCondition(ctx context.Context, in *ExchangeSummaryConditionRequest, opts ...http.CallOption) (*ExchangeSummaryConditionReply, error) {
	var out ExchangeSummaryConditionReply
	pattern := "/inner/v1/rows/exchangeCondition"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/ExchangeSummaryCondition"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) GetAppCollaboratorRoles(ctx context.Context, in *GetAppCollaboratorRolesRequest, opts ...http.CallOption) (*GetAppCollaboratorRolesReply, error) {
	var out GetAppCollaboratorRolesReply
	pattern := "/inner/v1/rows/appCollaboratorRoles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/GetAppCollaboratorRoles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) GetDataCollaborators(ctx context.Context, in *GetDataCollaboratorsRequest, opts ...http.CallOption) (*GetDataCollaboratorsReply, error) {
	var out GetDataCollaboratorsReply
	pattern := "/inner/v1/rows/dataCollaborators"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/GetDataCollaborators"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) GetUserAppCollaboratorRoles(ctx context.Context, in *GetUserAppCollaboratorRolesRequest, opts ...http.CallOption) (*GetUserAppCollaboratorRolesReply, error) {
	var out GetUserAppCollaboratorRolesReply
	pattern := "/inner/v1/rows/userAppCollaboratorRoles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/GetUserAppCollaboratorRoles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) List(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/inner/v1/rows/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/List"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) ListRaw(ctx context.Context, in *ListRawRequest, opts ...http.CallOption) (*ListRawReply, error) {
	var out ListRawReply
	pattern := "/inner/v1/rows/raw/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/ListRaw"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) RecoverAttachment(ctx context.Context, in *RecoverAttachmentRequest, opts ...http.CallOption) (*RecoverAttachmentReply, error) {
	var out RecoverAttachmentReply
	pattern := "/inner/v1/rows/attachment/recover"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/RecoverAttachment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RowsHTTPClientImpl) RecycleAttachment(ctx context.Context, in *RecycleAttachmentRequest, opts ...http.CallOption) (*RecycleAttachmentReply, error) {
	var out RecycleAttachmentReply
	pattern := "/inner/v1/rows/attachment/recycle"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Rows/RecycleAttachment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
