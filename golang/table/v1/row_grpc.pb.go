// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: row.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RowsClient is the client API for Rows service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RowsClient interface {
	// 附件放入回收站
	RecycleAttachment(ctx context.Context, in *RecycleAttachmentRequest, opts ...grpc.CallOption) (*RecycleAttachmentReply, error)
	// 附件还原
	RecoverAttachment(ctx context.Context, in *RecoverAttachmentRequest, opts ...grpc.CallOption) (*RecoverAttachmentReply, error)
	// 删除某些keyPath的值
	DeleteValues(ctx context.Context, in *DeleteValuesRequest, opts ...grpc.CallOption) (*DeleteValuesReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	ListRaw(ctx context.Context, in *ListRawRequest, opts ...grpc.CallOption) (*ListRawReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	// 是否是app的协作人
	CheckIsAppCollaborator(ctx context.Context, in *CheckIsAppCollaboratorRequest, opts ...grpc.CallOption) (*CheckIsAppCollaboratorReply, error)
	// 获取用户在App中的协作人角色列表
	GetUserAppCollaboratorRoles(ctx context.Context, in *GetUserAppCollaboratorRolesRequest, opts ...grpc.CallOption) (*GetUserAppCollaboratorRolesReply, error)
	// 获取App的协作人角色列表
	GetAppCollaboratorRoles(ctx context.Context, in *GetAppCollaboratorRolesRequest, opts ...grpc.CallOption) (*GetAppCollaboratorRolesReply, error)
	// 获取任务的协作人列表
	GetDataCollaborators(ctx context.Context, in *GetDataCollaboratorsRequest, opts ...grpc.CallOption) (*GetDataCollaboratorsReply, error)
	// 有些汇总表的条件需要转换查询数据
	ExchangeSummaryCondition(ctx context.Context, in *ExchangeSummaryConditionRequest, opts ...grpc.CallOption) (*ExchangeSummaryConditionReply, error)
}

type rowsClient struct {
	cc grpc.ClientConnInterface
}

func NewRowsClient(cc grpc.ClientConnInterface) RowsClient {
	return &rowsClient{cc}
}

func (c *rowsClient) RecycleAttachment(ctx context.Context, in *RecycleAttachmentRequest, opts ...grpc.CallOption) (*RecycleAttachmentReply, error) {
	out := new(RecycleAttachmentReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/RecycleAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) RecoverAttachment(ctx context.Context, in *RecoverAttachmentRequest, opts ...grpc.CallOption) (*RecoverAttachmentReply, error) {
	out := new(RecoverAttachmentReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/RecoverAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) DeleteValues(ctx context.Context, in *DeleteValuesRequest, opts ...grpc.CallOption) (*DeleteValuesReply, error) {
	out := new(DeleteValuesReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/DeleteValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) ListRaw(ctx context.Context, in *ListRawRequest, opts ...grpc.CallOption) (*ListRawReply, error) {
	out := new(ListRawReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/ListRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) CheckIsAppCollaborator(ctx context.Context, in *CheckIsAppCollaboratorRequest, opts ...grpc.CallOption) (*CheckIsAppCollaboratorReply, error) {
	out := new(CheckIsAppCollaboratorReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/CheckIsAppCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) GetUserAppCollaboratorRoles(ctx context.Context, in *GetUserAppCollaboratorRolesRequest, opts ...grpc.CallOption) (*GetUserAppCollaboratorRolesReply, error) {
	out := new(GetUserAppCollaboratorRolesReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/GetUserAppCollaboratorRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) GetAppCollaboratorRoles(ctx context.Context, in *GetAppCollaboratorRolesRequest, opts ...grpc.CallOption) (*GetAppCollaboratorRolesReply, error) {
	out := new(GetAppCollaboratorRolesReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/GetAppCollaboratorRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) GetDataCollaborators(ctx context.Context, in *GetDataCollaboratorsRequest, opts ...grpc.CallOption) (*GetDataCollaboratorsReply, error) {
	out := new(GetDataCollaboratorsReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/GetDataCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) ExchangeSummaryCondition(ctx context.Context, in *ExchangeSummaryConditionRequest, opts ...grpc.CallOption) (*ExchangeSummaryConditionReply, error) {
	out := new(ExchangeSummaryConditionReply)
	err := c.cc.Invoke(ctx, "/table.v1.Rows/ExchangeSummaryCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RowsServer is the server API for Rows service.
// All implementations must embed UnimplementedRowsServer
// for forward compatibility
type RowsServer interface {
	// 附件放入回收站
	RecycleAttachment(context.Context, *RecycleAttachmentRequest) (*RecycleAttachmentReply, error)
	// 附件还原
	RecoverAttachment(context.Context, *RecoverAttachmentRequest) (*RecoverAttachmentReply, error)
	// 删除某些keyPath的值
	DeleteValues(context.Context, *DeleteValuesRequest) (*DeleteValuesReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	ListRaw(context.Context, *ListRawRequest) (*ListRawReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	// 是否是app的协作人
	CheckIsAppCollaborator(context.Context, *CheckIsAppCollaboratorRequest) (*CheckIsAppCollaboratorReply, error)
	// 获取用户在App中的协作人角色列表
	GetUserAppCollaboratorRoles(context.Context, *GetUserAppCollaboratorRolesRequest) (*GetUserAppCollaboratorRolesReply, error)
	// 获取App的协作人角色列表
	GetAppCollaboratorRoles(context.Context, *GetAppCollaboratorRolesRequest) (*GetAppCollaboratorRolesReply, error)
	// 获取任务的协作人列表
	GetDataCollaborators(context.Context, *GetDataCollaboratorsRequest) (*GetDataCollaboratorsReply, error)
	// 有些汇总表的条件需要转换查询数据
	ExchangeSummaryCondition(context.Context, *ExchangeSummaryConditionRequest) (*ExchangeSummaryConditionReply, error)
	mustEmbedUnimplementedRowsServer()
}

// UnimplementedRowsServer must be embedded to have forward compatible implementations.
type UnimplementedRowsServer struct {
}

func (UnimplementedRowsServer) RecycleAttachment(context.Context, *RecycleAttachmentRequest) (*RecycleAttachmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleAttachment not implemented")
}
func (UnimplementedRowsServer) RecoverAttachment(context.Context, *RecoverAttachmentRequest) (*RecoverAttachmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAttachment not implemented")
}
func (UnimplementedRowsServer) DeleteValues(context.Context, *DeleteValuesRequest) (*DeleteValuesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValues not implemented")
}
func (UnimplementedRowsServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRowsServer) ListRaw(context.Context, *ListRawRequest) (*ListRawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRaw not implemented")
}
func (UnimplementedRowsServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRowsServer) CheckIsAppCollaborator(context.Context, *CheckIsAppCollaboratorRequest) (*CheckIsAppCollaboratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsAppCollaborator not implemented")
}
func (UnimplementedRowsServer) GetUserAppCollaboratorRoles(context.Context, *GetUserAppCollaboratorRolesRequest) (*GetUserAppCollaboratorRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAppCollaboratorRoles not implemented")
}
func (UnimplementedRowsServer) GetAppCollaboratorRoles(context.Context, *GetAppCollaboratorRolesRequest) (*GetAppCollaboratorRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCollaboratorRoles not implemented")
}
func (UnimplementedRowsServer) GetDataCollaborators(context.Context, *GetDataCollaboratorsRequest) (*GetDataCollaboratorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataCollaborators not implemented")
}
func (UnimplementedRowsServer) ExchangeSummaryCondition(context.Context, *ExchangeSummaryConditionRequest) (*ExchangeSummaryConditionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeSummaryCondition not implemented")
}
func (UnimplementedRowsServer) mustEmbedUnimplementedRowsServer() {}

// UnsafeRowsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RowsServer will
// result in compilation errors.
type UnsafeRowsServer interface {
	mustEmbedUnimplementedRowsServer()
}

func RegisterRowsServer(s grpc.ServiceRegistrar, srv RowsServer) {
	s.RegisterService(&Rows_ServiceDesc, srv)
}

func _Rows_RecycleAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).RecycleAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/RecycleAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).RecycleAttachment(ctx, req.(*RecycleAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_RecoverAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).RecoverAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/RecoverAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).RecoverAttachment(ctx, req.(*RecoverAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_DeleteValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).DeleteValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/DeleteValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).DeleteValues(ctx, req.(*DeleteValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_ListRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).ListRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/ListRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).ListRaw(ctx, req.(*ListRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_CheckIsAppCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsAppCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).CheckIsAppCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/CheckIsAppCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).CheckIsAppCollaborator(ctx, req.(*CheckIsAppCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_GetUserAppCollaboratorRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAppCollaboratorRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).GetUserAppCollaboratorRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/GetUserAppCollaboratorRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).GetUserAppCollaboratorRoles(ctx, req.(*GetUserAppCollaboratorRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_GetAppCollaboratorRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCollaboratorRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).GetAppCollaboratorRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/GetAppCollaboratorRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).GetAppCollaboratorRoles(ctx, req.(*GetAppCollaboratorRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_GetDataCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).GetDataCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/GetDataCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).GetDataCollaborators(ctx, req.(*GetDataCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_ExchangeSummaryCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeSummaryConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).ExchangeSummaryCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.v1.Rows/ExchangeSummaryCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).ExchangeSummaryCondition(ctx, req.(*ExchangeSummaryConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rows_ServiceDesc is the grpc.ServiceDesc for Rows service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rows_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "table.v1.Rows",
	HandlerType: (*RowsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecycleAttachment",
			Handler:    _Rows_RecycleAttachment_Handler,
		},
		{
			MethodName: "RecoverAttachment",
			Handler:    _Rows_RecoverAttachment_Handler,
		},
		{
			MethodName: "DeleteValues",
			Handler:    _Rows_DeleteValues_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Rows_List_Handler,
		},
		{
			MethodName: "ListRaw",
			Handler:    _Rows_ListRaw_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Rows_Delete_Handler,
		},
		{
			MethodName: "CheckIsAppCollaborator",
			Handler:    _Rows_CheckIsAppCollaborator_Handler,
		},
		{
			MethodName: "GetUserAppCollaboratorRoles",
			Handler:    _Rows_GetUserAppCollaboratorRoles_Handler,
		},
		{
			MethodName: "GetAppCollaboratorRoles",
			Handler:    _Rows_GetAppCollaboratorRoles_Handler,
		},
		{
			MethodName: "GetDataCollaborators",
			Handler:    _Rows_GetDataCollaborators_Handler,
		},
		{
			MethodName: "ExchangeSummaryCondition",
			Handler:    _Rows_ExchangeSummaryCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "row.proto",
}
