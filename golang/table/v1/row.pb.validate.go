// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: row.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExchangeSummaryConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeSummaryConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeSummaryConditionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExchangeSummaryConditionRequestMultiError, or nil if none found.
func (m *ExchangeSummaryConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeSummaryConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for Condition

	if len(errors) > 0 {
		return ExchangeSummaryConditionRequestMultiError(errors)
	}

	return nil
}

// ExchangeSummaryConditionRequestMultiError is an error wrapping multiple
// validation errors returned by ExchangeSummaryConditionRequest.ValidateAll()
// if the designated constraints aren't met.
type ExchangeSummaryConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeSummaryConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeSummaryConditionRequestMultiError) AllErrors() []error { return m }

// ExchangeSummaryConditionRequestValidationError is the validation error
// returned by ExchangeSummaryConditionRequest.Validate if the designated
// constraints aren't met.
type ExchangeSummaryConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeSummaryConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeSummaryConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeSummaryConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeSummaryConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeSummaryConditionRequestValidationError) ErrorName() string {
	return "ExchangeSummaryConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeSummaryConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeSummaryConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeSummaryConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeSummaryConditionRequestValidationError{}

// Validate checks the field values on ExchangeSummaryConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeSummaryConditionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeSummaryConditionReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExchangeSummaryConditionReplyMultiError, or nil if none found.
func (m *ExchangeSummaryConditionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeSummaryConditionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for Condition

	if len(errors) > 0 {
		return ExchangeSummaryConditionReplyMultiError(errors)
	}

	return nil
}

// ExchangeSummaryConditionReplyMultiError is an error wrapping multiple
// validation errors returned by ExchangeSummaryConditionReply.ValidateAll()
// if the designated constraints aren't met.
type ExchangeSummaryConditionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeSummaryConditionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeSummaryConditionReplyMultiError) AllErrors() []error { return m }

// ExchangeSummaryConditionReplyValidationError is the validation error
// returned by ExchangeSummaryConditionReply.Validate if the designated
// constraints aren't met.
type ExchangeSummaryConditionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeSummaryConditionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeSummaryConditionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeSummaryConditionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeSummaryConditionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeSummaryConditionReplyValidationError) ErrorName() string {
	return "ExchangeSummaryConditionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeSummaryConditionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeSummaryConditionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeSummaryConditionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeSummaryConditionReplyValidationError{}

// Validate checks the field values on RecycleAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecycleAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecycleAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecycleAttachmentRequestMultiError, or nil if none found.
func (m *RecycleAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecycleAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := RecycleAttachmentRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIssueIds()) < 1 {
		err := RecycleAttachmentRequestValidationError{
			field:  "IssueIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetResourceIds()) < 1 {
		err := RecycleAttachmentRequestValidationError{
			field:  "ResourceIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecycleAttachmentRequestMultiError(errors)
	}

	return nil
}

// RecycleAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by RecycleAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type RecycleAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecycleAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecycleAttachmentRequestMultiError) AllErrors() []error { return m }

// RecycleAttachmentRequestValidationError is the validation error returned by
// RecycleAttachmentRequest.Validate if the designated constraints aren't met.
type RecycleAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecycleAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecycleAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecycleAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecycleAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecycleAttachmentRequestValidationError) ErrorName() string {
	return "RecycleAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecycleAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecycleAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecycleAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecycleAttachmentRequestValidationError{}

// Validate checks the field values on RecycleAttachmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecycleAttachmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecycleAttachmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecycleAttachmentReplyMultiError, or nil if none found.
func (m *RecycleAttachmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecycleAttachmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecycleAttachmentReplyMultiError(errors)
	}

	return nil
}

// RecycleAttachmentReplyMultiError is an error wrapping multiple validation
// errors returned by RecycleAttachmentReply.ValidateAll() if the designated
// constraints aren't met.
type RecycleAttachmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecycleAttachmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecycleAttachmentReplyMultiError) AllErrors() []error { return m }

// RecycleAttachmentReplyValidationError is the validation error returned by
// RecycleAttachmentReply.Validate if the designated constraints aren't met.
type RecycleAttachmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecycleAttachmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecycleAttachmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecycleAttachmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecycleAttachmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecycleAttachmentReplyValidationError) ErrorName() string {
	return "RecycleAttachmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecycleAttachmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecycleAttachmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecycleAttachmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecycleAttachmentReplyValidationError{}

// Validate checks the field values on RecoverAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoverAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoverAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoverAttachmentRequestMultiError, or nil if none found.
func (m *RecoverAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoverAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := RecoverAttachmentRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIssueIds()) < 1 {
		err := RecoverAttachmentRequestValidationError{
			field:  "IssueIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetResourceIds()) < 1 {
		err := RecoverAttachmentRequestValidationError{
			field:  "ResourceIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecoverAttachmentRequestMultiError(errors)
	}

	return nil
}

// RecoverAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by RecoverAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type RecoverAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoverAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoverAttachmentRequestMultiError) AllErrors() []error { return m }

// RecoverAttachmentRequestValidationError is the validation error returned by
// RecoverAttachmentRequest.Validate if the designated constraints aren't met.
type RecoverAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoverAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoverAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoverAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoverAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoverAttachmentRequestValidationError) ErrorName() string {
	return "RecoverAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecoverAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoverAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoverAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoverAttachmentRequestValidationError{}

// Validate checks the field values on RecoverAttachmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoverAttachmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoverAttachmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoverAttachmentReplyMultiError, or nil if none found.
func (m *RecoverAttachmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoverAttachmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecoverAttachmentReplyMultiError(errors)
	}

	return nil
}

// RecoverAttachmentReplyMultiError is an error wrapping multiple validation
// errors returned by RecoverAttachmentReply.ValidateAll() if the designated
// constraints aren't met.
type RecoverAttachmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoverAttachmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoverAttachmentReplyMultiError) AllErrors() []error { return m }

// RecoverAttachmentReplyValidationError is the validation error returned by
// RecoverAttachmentReply.Validate if the designated constraints aren't met.
type RecoverAttachmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoverAttachmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoverAttachmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoverAttachmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoverAttachmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoverAttachmentReplyValidationError) ErrorName() string {
	return "RecoverAttachmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecoverAttachmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoverAttachmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoverAttachmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoverAttachmentReplyValidationError{}

// Validate checks the field values on DeleteValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteValuesRequestMultiError, or nil if none found.
func (m *DeleteValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIssueIds()) < 1 {
		err := DeleteValuesRequestValidationError{
			field:  "IssueIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetKeyPaths()) < 1 {
		err := DeleteValuesRequestValidationError{
			field:  "KeyPaths",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteValuesRequestMultiError(errors)
	}

	return nil
}

// DeleteValuesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteValuesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteValuesRequestMultiError) AllErrors() []error { return m }

// DeleteValuesRequestValidationError is the validation error returned by
// DeleteValuesRequest.Validate if the designated constraints aren't met.
type DeleteValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValuesRequestValidationError) ErrorName() string {
	return "DeleteValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValuesRequestValidationError{}

// Validate checks the field values on DeleteValuesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteValuesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteValuesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteValuesReplyMultiError, or nil if none found.
func (m *DeleteValuesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteValuesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteValuesReplyMultiError(errors)
	}

	return nil
}

// DeleteValuesReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteValuesReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteValuesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteValuesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteValuesReplyMultiError) AllErrors() []error { return m }

// DeleteValuesReplyValidationError is the validation error returned by
// DeleteValuesReply.Validate if the designated constraints aren't met.
type DeleteValuesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValuesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValuesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValuesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValuesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValuesReplyValidationError) ErrorName() string {
	return "DeleteValuesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteValuesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteValuesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValuesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValuesReplyValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for DbType

	// no validation rules for TableId

	// no validation rules for AppAuthData

	// no validation rules for NeedChangeId

	// no validation rules for NeedTotal

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListSpecialReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSpecialReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpecialReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpecialReplyMultiError, or nil if none found.
func (m *ListSpecialReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpecialReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpecialData

	if len(errors) > 0 {
		return ListSpecialReplyMultiError(errors)
	}

	return nil
}

// ListSpecialReplyMultiError is an error wrapping multiple validation errors
// returned by ListSpecialReply.ValidateAll() if the designated constraints
// aren't met.
type ListSpecialReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpecialReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpecialReplyMultiError) AllErrors() []error { return m }

// ListSpecialReplyValidationError is the validation error returned by
// ListSpecialReply.Validate if the designated constraints aren't met.
type ListSpecialReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpecialReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpecialReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpecialReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpecialReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpecialReplyValidationError) ErrorName() string { return "ListSpecialReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSpecialReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpecialReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpecialReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpecialReplyValidationError{}

// Validate checks the field values on ListReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListReplyMultiError, or nil
// if none found.
func (m *ListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for LastUpdateTime

	// no validation rules for Count

	// no validation rules for RelateData

	if len(errors) > 0 {
		return ListReplyMultiError(errors)
	}

	return nil
}

// ListReplyMultiError is an error wrapping multiple validation errors returned
// by ListReply.ValidateAll() if the designated constraints aren't met.
type ListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReplyMultiError) AllErrors() []error { return m }

// ListReplyValidationError is the validation error returned by
// ListReply.Validate if the designated constraints aren't met.
type ListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReplyValidationError) ErrorName() string { return "ListReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReplyValidationError{}

// Validate checks the field values on ListRawRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRawRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRawRequestMultiError,
// or nil if none found.
func (m *ListRawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DbType

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRawRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRawRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRawRequestValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRawRequestValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRawRequestValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRawRequestValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for TableId

	if len(errors) > 0 {
		return ListRawRequestMultiError(errors)
	}

	return nil
}

// ListRawRequestMultiError is an error wrapping multiple validation errors
// returned by ListRawRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRawRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRawRequestMultiError) AllErrors() []error { return m }

// ListRawRequestValidationError is the validation error returned by
// ListRawRequest.Validate if the designated constraints aren't met.
type ListRawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRawRequestValidationError) ErrorName() string { return "ListRawRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRawRequestValidationError{}

// Validate checks the field values on ListRawReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRawReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRawReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRawReplyMultiError, or
// nil if none found.
func (m *ListRawReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRawReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ListRawReplyMultiError(errors)
	}

	return nil
}

// ListRawReplyMultiError is an error wrapping multiple validation errors
// returned by ListRawReply.ValidateAll() if the designated constraints aren't met.
type ListRawReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRawReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRawReplyMultiError) AllErrors() []error { return m }

// ListRawReplyValidationError is the validation error returned by
// ListRawReply.Validate if the designated constraints aren't met.
type ListRawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRawReplyValidationError) ErrorName() string { return "ListRawReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRawReplyValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Condition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionMultiError, or nil
// if none found.
func (m *Condition) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	// no validation rules for Column

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConditionMultiError(errors)
	}

	return nil
}

// ConditionMultiError is an error wrapping multiple validation errors returned
// by Condition.ValidateAll() if the designated constraints aren't met.
type ConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionMultiError) AllErrors() []error { return m }

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Column

	// no validation rules for Asc

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRequestValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteReplyMultiError, or
// nil if none found.
func (m *DeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return DeleteReplyMultiError(errors)
	}

	return nil
}

// DeleteReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteReply.ValidateAll() if the designated constraints aren't met.
type DeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReplyMultiError) AllErrors() []error { return m }

// DeleteReplyValidationError is the validation error returned by
// DeleteReply.Validate if the designated constraints aren't met.
type DeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReplyValidationError) ErrorName() string { return "DeleteReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReplyValidationError{}
