// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: table_model.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TableMin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TableMin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableMin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TableMinMultiError, or nil
// if none found.
func (m *TableMin) ValidateAll() error {
	return m.validate(true)
}

func (m *TableMin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	if len(errors) > 0 {
		return TableMinMultiError(errors)
	}

	return nil
}

// TableMinMultiError is an error wrapping multiple validation errors returned
// by TableMin.ValidateAll() if the designated constraints aren't met.
type TableMinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableMinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableMinMultiError) AllErrors() []error { return m }

// TableMinValidationError is the validation error returned by
// TableMin.Validate if the designated constraints aren't met.
type TableMinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableMinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableMinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableMinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableMinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableMinValidationError) ErrorName() string { return "TableMinValidationError" }

// Error satisfies the builtin error interface
func (e TableMinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableMin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableMinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableMinValidationError{}

// Validate checks the field values on TableMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TableMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TableMetaMultiError, or nil
// if none found.
func (m *TableMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *TableMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	// no validation rules for Name

	// no validation rules for AutoScheduleFlag

	// no validation rules for SummaryFlag

	if len(errors) > 0 {
		return TableMetaMultiError(errors)
	}

	return nil
}

// TableMetaMultiError is an error wrapping multiple validation errors returned
// by TableMeta.ValidateAll() if the designated constraints aren't met.
type TableMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableMetaMultiError) AllErrors() []error { return m }

// TableMetaValidationError is the validation error returned by
// TableMeta.Validate if the designated constraints aren't met.
type TableMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableMetaValidationError) ErrorName() string { return "TableMetaValidationError" }

// Error satisfies the builtin error interface
func (e TableMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableMetaValidationError{}

// Validate checks the field values on Column with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Column with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ColumnMultiError, or nil if none found.
func (m *Column) ValidateAll() error {
	return m.validate(true)
}

func (m *Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Label

	// no validation rules for AliasTitle

	// no validation rules for Description

	// no validation rules for IsSys

	// no validation rules for IsOrg

	// no validation rules for Writable

	// no validation rules for Editable

	// no validation rules for Unique

	// no validation rules for UniquePreHandler

	// no validation rules for SensitiveStrategy

	// no validation rules for SensitiveFlag

	if all {
		switch v := interface{}(m.GetField()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ColumnValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ColumnValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetField()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ColumnValidationError{
				field:  "Field",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsSysHiden

	// no validation rules for SummaryFlag

	if len(errors) > 0 {
		return ColumnMultiError(errors)
	}

	return nil
}

// ColumnMultiError is an error wrapping multiple validation errors returned by
// Column.ValidateAll() if the designated constraints aren't met.
type ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnMultiError) AllErrors() []error { return m }

// ColumnValidationError is the validation error returned by Column.Validate if
// the designated constraints aren't met.
type ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnValidationError) ErrorName() string { return "ColumnValidationError" }

// Error satisfies the builtin error interface
func (e ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnValidationError{}

// Validate checks the field values on ColumnOption with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ColumnOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ColumnOptionMultiError, or
// nil if none found.
func (m *ColumnOption) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for CustomType

	// no validation rules for DataType

	if all {
		switch v := interface{}(m.GetProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ColumnOptionValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ColumnOptionValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ColumnOptionValidationError{
				field:  "Props",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ColumnOptionMultiError(errors)
	}

	return nil
}

// ColumnOptionMultiError is an error wrapping multiple validation errors
// returned by ColumnOption.ValidateAll() if the designated constraints aren't met.
type ColumnOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnOptionMultiError) AllErrors() []error { return m }

// ColumnOptionValidationError is the validation error returned by
// ColumnOption.Validate if the designated constraints aren't met.
type ColumnOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnOptionValidationError) ErrorName() string { return "ColumnOptionValidationError" }

// Error satisfies the builtin error interface
func (e ColumnOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnOptionValidationError{}

// Validate checks the field values on ConditionRefSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConditionRefSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConditionRefSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConditionRefSettingMultiError, or nil if none found.
func (m *ConditionRefSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *ConditionRefSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for ColumnId

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConditionRefSettingValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConditionRefSettingValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditionRefSettingValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AggFunc

	// no validation rules for NumberType

	if len(errors) > 0 {
		return ConditionRefSettingMultiError(errors)
	}

	return nil
}

// ConditionRefSettingMultiError is an error wrapping multiple validation
// errors returned by ConditionRefSetting.ValidateAll() if the designated
// constraints aren't met.
type ConditionRefSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionRefSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionRefSettingMultiError) AllErrors() []error { return m }

// ConditionRefSettingValidationError is the validation error returned by
// ConditionRefSetting.Validate if the designated constraints aren't met.
type ConditionRefSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionRefSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionRefSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionRefSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionRefSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionRefSettingValidationError) ErrorName() string {
	return "ConditionRefSettingValidationError"
}

// Error satisfies the builtin error interface
func (e ConditionRefSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditionRefSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionRefSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionRefSettingValidationError{}

// Validate checks the field values on Columns with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Columns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Columns with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ColumnsMultiError, or nil if none found.
func (m *Columns) ValidateAll() error {
	return m.validate(true)
}

func (m *Columns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColumnsValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColumnsValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColumnsValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetCustomConfig()))
		i := 0
		for key := range m.GetCustomConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCustomConfig()[key]
			_ = val

			// no validation rules for CustomConfig[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ColumnsValidationError{
							field:  fmt.Sprintf("CustomConfig[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ColumnsValidationError{
							field:  fmt.Sprintf("CustomConfig[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ColumnsValidationError{
						field:  fmt.Sprintf("CustomConfig[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ColumnsMultiError(errors)
	}

	return nil
}

// ColumnsMultiError is an error wrapping multiple validation errors returned
// by Columns.ValidateAll() if the designated constraints aren't met.
type ColumnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnsMultiError) AllErrors() []error { return m }

// ColumnsValidationError is the validation error returned by Columns.Validate
// if the designated constraints aren't met.
type ColumnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnsValidationError) ErrorName() string { return "ColumnsValidationError" }

// Error satisfies the builtin error interface
func (e ColumnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnsValidationError{}

// Validate checks the field values on TableColumnSchema with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TableColumnSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableColumnSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TableColumnSchemaMultiError, or nil if none found.
func (m *TableColumnSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *TableColumnSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	if all {
		switch v := interface{}(m.GetColumn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableColumnSchemaValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableColumnSchemaValidationError{
					field:  "Column",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColumn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableColumnSchemaValidationError{
				field:  "Column",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TableColumnSchemaMultiError(errors)
	}

	return nil
}

// TableColumnSchemaMultiError is an error wrapping multiple validation errors
// returned by TableColumnSchema.ValidateAll() if the designated constraints
// aren't met.
type TableColumnSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableColumnSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableColumnSchemaMultiError) AllErrors() []error { return m }

// TableColumnSchemaValidationError is the validation error returned by
// TableColumnSchema.Validate if the designated constraints aren't met.
type TableColumnSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableColumnSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableColumnSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableColumnSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableColumnSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableColumnSchemaValidationError) ErrorName() string {
	return "TableColumnSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e TableColumnSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableColumnSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableColumnSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableColumnSchemaValidationError{}

// Validate checks the field values on TableSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TableSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TableSchemaMultiError, or
// nil if none found.
func (m *TableSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *TableSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	// no validation rules for Name

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TableSchemaValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TableSchemaValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableSchemaValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AutoScheduleFlag

	if len(errors) > 0 {
		return TableSchemaMultiError(errors)
	}

	return nil
}

// TableSchemaMultiError is an error wrapping multiple validation errors
// returned by TableSchema.ValidateAll() if the designated constraints aren't met.
type TableSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableSchemaMultiError) AllErrors() []error { return m }

// TableSchemaValidationError is the validation error returned by
// TableSchema.Validate if the designated constraints aren't met.
type TableSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableSchemaValidationError) ErrorName() string { return "TableSchemaValidationError" }

// Error satisfies the builtin error interface
func (e TableSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableSchemaValidationError{}

// Validate checks the field values on RelationRowMeta with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelationRowMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationRowMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationRowMetaMultiError, or nil if none found.
func (m *RelationRowMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationRowMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowId

	for idx, item := range m.GetOwner() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationRowMetaValidationError{
						field:  fmt.Sprintf("Owner[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationRowMetaValidationError{
						field:  fmt.Sprintf("Owner[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationRowMetaValidationError{
					field:  fmt.Sprintf("Owner[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TableId

	// no validation rules for TableName

	// no validation rules for StatusId

	// no validation rules for StatusName

	// no validation rules for Title

	if len(errors) > 0 {
		return RelationRowMetaMultiError(errors)
	}

	return nil
}

// RelationRowMetaMultiError is an error wrapping multiple validation errors
// returned by RelationRowMeta.ValidateAll() if the designated constraints
// aren't met.
type RelationRowMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationRowMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationRowMetaMultiError) AllErrors() []error { return m }

// RelationRowMetaValidationError is the validation error returned by
// RelationRowMeta.Validate if the designated constraints aren't met.
type RelationRowMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationRowMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationRowMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationRowMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationRowMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationRowMetaValidationError) ErrorName() string { return "RelationRowMetaValidationError" }

// Error satisfies the builtin error interface
func (e RelationRowMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationRowMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationRowMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationRowMetaValidationError{}

// Validate checks the field values on Owner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Owner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Owner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OwnerMultiError, or nil if none found.
func (m *Owner) ValidateAll() error {
	return m.validate(true)
}

func (m *Owner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for OwnerName

	if len(errors) > 0 {
		return OwnerMultiError(errors)
	}

	return nil
}

// OwnerMultiError is an error wrapping multiple validation errors returned by
// Owner.ValidateAll() if the designated constraints aren't met.
type OwnerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OwnerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OwnerMultiError) AllErrors() []error { return m }

// OwnerValidationError is the validation error returned by Owner.Validate if
// the designated constraints aren't met.
type OwnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OwnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OwnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OwnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OwnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OwnerValidationError) ErrorName() string { return "OwnerValidationError" }

// Error satisfies the builtin error interface
func (e OwnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOwner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OwnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OwnerValidationError{}

// Validate checks the field values on AppTables with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppTables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppTables with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppTablesMultiError, or nil
// if none found.
func (m *AppTables) ValidateAll() error {
	return m.validate(true)
}

func (m *AppTables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppTablesValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppTablesValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppTablesValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppTablesMultiError(errors)
	}

	return nil
}

// AppTablesMultiError is an error wrapping multiple validation errors returned
// by AppTables.ValidateAll() if the designated constraints aren't met.
type AppTablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppTablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppTablesMultiError) AllErrors() []error { return m }

// AppTablesValidationError is the validation error returned by
// AppTables.Validate if the designated constraints aren't met.
type AppTablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppTablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppTablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppTablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppTablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppTablesValidationError) ErrorName() string { return "AppTablesValidationError" }

// Error satisfies the builtin error interface
func (e AppTablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppTables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppTablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppTablesValidationError{}
