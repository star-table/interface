// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: collaborator_model.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckIsAppCollaboratorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIsAppCollaboratorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIsAppCollaboratorRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckIsAppCollaboratorRequestMultiError, or nil if none found.
func (m *CheckIsAppCollaboratorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIsAppCollaboratorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CheckIsAppCollaboratorRequestMultiError(errors)
	}

	return nil
}

// CheckIsAppCollaboratorRequestMultiError is an error wrapping multiple
// validation errors returned by CheckIsAppCollaboratorRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckIsAppCollaboratorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIsAppCollaboratorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIsAppCollaboratorRequestMultiError) AllErrors() []error { return m }

// CheckIsAppCollaboratorRequestValidationError is the validation error
// returned by CheckIsAppCollaboratorRequest.Validate if the designated
// constraints aren't met.
type CheckIsAppCollaboratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIsAppCollaboratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIsAppCollaboratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIsAppCollaboratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIsAppCollaboratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIsAppCollaboratorRequestValidationError) ErrorName() string {
	return "CheckIsAppCollaboratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIsAppCollaboratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIsAppCollaboratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIsAppCollaboratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIsAppCollaboratorRequestValidationError{}

// Validate checks the field values on CheckIsAppCollaboratorReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIsAppCollaboratorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIsAppCollaboratorReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIsAppCollaboratorReplyMultiError, or nil if none found.
func (m *CheckIsAppCollaboratorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIsAppCollaboratorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CheckIsAppCollaboratorReplyMultiError(errors)
	}

	return nil
}

// CheckIsAppCollaboratorReplyMultiError is an error wrapping multiple
// validation errors returned by CheckIsAppCollaboratorReply.ValidateAll() if
// the designated constraints aren't met.
type CheckIsAppCollaboratorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIsAppCollaboratorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIsAppCollaboratorReplyMultiError) AllErrors() []error { return m }

// CheckIsAppCollaboratorReplyValidationError is the validation error returned
// by CheckIsAppCollaboratorReply.Validate if the designated constraints
// aren't met.
type CheckIsAppCollaboratorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIsAppCollaboratorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIsAppCollaboratorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIsAppCollaboratorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIsAppCollaboratorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIsAppCollaboratorReplyValidationError) ErrorName() string {
	return "CheckIsAppCollaboratorReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIsAppCollaboratorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIsAppCollaboratorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIsAppCollaboratorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIsAppCollaboratorReplyValidationError{}

// Validate checks the field values on GetUserAppCollaboratorRolesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserAppCollaboratorRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAppCollaboratorRolesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserAppCollaboratorRolesRequestMultiError, or nil if none found.
func (m *GetUserAppCollaboratorRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAppCollaboratorRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserAppCollaboratorRolesRequestMultiError(errors)
	}

	return nil
}

// GetUserAppCollaboratorRolesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserAppCollaboratorRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAppCollaboratorRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAppCollaboratorRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAppCollaboratorRolesRequestMultiError) AllErrors() []error { return m }

// GetUserAppCollaboratorRolesRequestValidationError is the validation error
// returned by GetUserAppCollaboratorRolesRequest.Validate if the designated
// constraints aren't met.
type GetUserAppCollaboratorRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAppCollaboratorRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAppCollaboratorRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAppCollaboratorRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAppCollaboratorRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAppCollaboratorRolesRequestValidationError) ErrorName() string {
	return "GetUserAppCollaboratorRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAppCollaboratorRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAppCollaboratorRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAppCollaboratorRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAppCollaboratorRolesRequestValidationError{}

// Validate checks the field values on GetUserAppCollaboratorRolesReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserAppCollaboratorRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAppCollaboratorRolesReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserAppCollaboratorRolesReplyMultiError, or nil if none found.
func (m *GetUserAppCollaboratorRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAppCollaboratorRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserAppCollaboratorRolesReplyMultiError(errors)
	}

	return nil
}

// GetUserAppCollaboratorRolesReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetUserAppCollaboratorRolesReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserAppCollaboratorRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAppCollaboratorRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAppCollaboratorRolesReplyMultiError) AllErrors() []error { return m }

// GetUserAppCollaboratorRolesReplyValidationError is the validation error
// returned by GetUserAppCollaboratorRolesReply.Validate if the designated
// constraints aren't met.
type GetUserAppCollaboratorRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAppCollaboratorRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAppCollaboratorRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAppCollaboratorRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAppCollaboratorRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAppCollaboratorRolesReplyValidationError) ErrorName() string {
	return "GetUserAppCollaboratorRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAppCollaboratorRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAppCollaboratorRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAppCollaboratorRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAppCollaboratorRolesReplyValidationError{}

// Validate checks the field values on GetAppCollaboratorRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppCollaboratorRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppCollaboratorRolesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAppCollaboratorRolesRequestMultiError, or nil if none found.
func (m *GetAppCollaboratorRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppCollaboratorRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if len(errors) > 0 {
		return GetAppCollaboratorRolesRequestMultiError(errors)
	}

	return nil
}

// GetAppCollaboratorRolesRequestMultiError is an error wrapping multiple
// validation errors returned by GetAppCollaboratorRolesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAppCollaboratorRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppCollaboratorRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppCollaboratorRolesRequestMultiError) AllErrors() []error { return m }

// GetAppCollaboratorRolesRequestValidationError is the validation error
// returned by GetAppCollaboratorRolesRequest.Validate if the designated
// constraints aren't met.
type GetAppCollaboratorRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppCollaboratorRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppCollaboratorRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppCollaboratorRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppCollaboratorRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppCollaboratorRolesRequestValidationError) ErrorName() string {
	return "GetAppCollaboratorRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppCollaboratorRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppCollaboratorRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppCollaboratorRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppCollaboratorRolesRequestValidationError{}

// Validate checks the field values on CollaboratorRole with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollaboratorRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollaboratorRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollaboratorRoleMultiError, or nil if none found.
func (m *CollaboratorRole) ValidateAll() error {
	return m.validate(true)
}

func (m *CollaboratorRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CollaboratorRoleMultiError(errors)
	}

	return nil
}

// CollaboratorRoleMultiError is an error wrapping multiple validation errors
// returned by CollaboratorRole.ValidateAll() if the designated constraints
// aren't met.
type CollaboratorRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorRoleMultiError) AllErrors() []error { return m }

// CollaboratorRoleValidationError is the validation error returned by
// CollaboratorRole.Validate if the designated constraints aren't met.
type CollaboratorRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorRoleValidationError) ErrorName() string { return "CollaboratorRoleValidationError" }

// Error satisfies the builtin error interface
func (e CollaboratorRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaboratorRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorRoleValidationError{}

// Validate checks the field values on GetAppCollaboratorRolesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppCollaboratorRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppCollaboratorRolesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppCollaboratorRolesReplyMultiError, or nil if none found.
func (m *GetAppCollaboratorRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppCollaboratorRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollaboratorRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppCollaboratorRolesReplyValidationError{
						field:  fmt.Sprintf("CollaboratorRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppCollaboratorRolesReplyValidationError{
						field:  fmt.Sprintf("CollaboratorRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppCollaboratorRolesReplyValidationError{
					field:  fmt.Sprintf("CollaboratorRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppCollaboratorRolesReplyMultiError(errors)
	}

	return nil
}

// GetAppCollaboratorRolesReplyMultiError is an error wrapping multiple
// validation errors returned by GetAppCollaboratorRolesReply.ValidateAll() if
// the designated constraints aren't met.
type GetAppCollaboratorRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppCollaboratorRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppCollaboratorRolesReplyMultiError) AllErrors() []error { return m }

// GetAppCollaboratorRolesReplyValidationError is the validation error returned
// by GetAppCollaboratorRolesReply.Validate if the designated constraints
// aren't met.
type GetAppCollaboratorRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppCollaboratorRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppCollaboratorRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppCollaboratorRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppCollaboratorRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppCollaboratorRolesReplyValidationError) ErrorName() string {
	return "GetAppCollaboratorRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppCollaboratorRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppCollaboratorRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppCollaboratorRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppCollaboratorRolesReplyValidationError{}

// Validate checks the field values on GetDataCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataCollaboratorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataCollaboratorsRequestMultiError, or nil if none found.
func (m *GetDataCollaboratorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataCollaboratorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDataCollaboratorsRequestMultiError(errors)
	}

	return nil
}

// GetDataCollaboratorsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDataCollaboratorsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDataCollaboratorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataCollaboratorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataCollaboratorsRequestMultiError) AllErrors() []error { return m }

// GetDataCollaboratorsRequestValidationError is the validation error returned
// by GetDataCollaboratorsRequest.Validate if the designated constraints
// aren't met.
type GetDataCollaboratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataCollaboratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataCollaboratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataCollaboratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataCollaboratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataCollaboratorsRequestValidationError) ErrorName() string {
	return "GetDataCollaboratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataCollaboratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataCollaboratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataCollaboratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataCollaboratorsRequestValidationError{}

// Validate checks the field values on DataCollaborators with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataCollaborators) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataCollaborators with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataCollaboratorsMultiError, or nil if none found.
func (m *DataCollaborators) ValidateAll() error {
	return m.validate(true)
}

func (m *DataCollaborators) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	if len(errors) > 0 {
		return DataCollaboratorsMultiError(errors)
	}

	return nil
}

// DataCollaboratorsMultiError is an error wrapping multiple validation errors
// returned by DataCollaborators.ValidateAll() if the designated constraints
// aren't met.
type DataCollaboratorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataCollaboratorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataCollaboratorsMultiError) AllErrors() []error { return m }

// DataCollaboratorsValidationError is the validation error returned by
// DataCollaborators.Validate if the designated constraints aren't met.
type DataCollaboratorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataCollaboratorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataCollaboratorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataCollaboratorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataCollaboratorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataCollaboratorsValidationError) ErrorName() string {
	return "DataCollaboratorsValidationError"
}

// Error satisfies the builtin error interface
func (e DataCollaboratorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataCollaborators.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataCollaboratorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataCollaboratorsValidationError{}

// Validate checks the field values on GetDataCollaboratorsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataCollaboratorsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataCollaboratorsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataCollaboratorsReplyMultiError, or nil if none found.
func (m *GetDataCollaboratorsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataCollaboratorsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollaborators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDataCollaboratorsReplyValidationError{
						field:  fmt.Sprintf("Collaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDataCollaboratorsReplyValidationError{
						field:  fmt.Sprintf("Collaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDataCollaboratorsReplyValidationError{
					field:  fmt.Sprintf("Collaborators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDataCollaboratorsReplyMultiError(errors)
	}

	return nil
}

// GetDataCollaboratorsReplyMultiError is an error wrapping multiple validation
// errors returned by GetDataCollaboratorsReply.ValidateAll() if the
// designated constraints aren't met.
type GetDataCollaboratorsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataCollaboratorsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataCollaboratorsReplyMultiError) AllErrors() []error { return m }

// GetDataCollaboratorsReplyValidationError is the validation error returned by
// GetDataCollaboratorsReply.Validate if the designated constraints aren't met.
type GetDataCollaboratorsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataCollaboratorsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataCollaboratorsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataCollaboratorsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataCollaboratorsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataCollaboratorsReplyValidationError) ErrorName() string {
	return "GetDataCollaboratorsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataCollaboratorsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataCollaboratorsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataCollaboratorsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataCollaboratorsReplyValidationError{}
