// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.7.1
// source: table_model_enum.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageColumnType int32

const (
	StorageColumnType_STRING    StorageColumnType = 0
	StorageColumnType_TEXT      StorageColumnType = 1
	StorageColumnType_LONG_TEXT StorageColumnType = 2
	StorageColumnType_DATE      StorageColumnType = 3
	StorageColumnType_LONG      StorageColumnType = 4
	StorageColumnType_INT       StorageColumnType = 5
	StorageColumnType_FLOAT     StorageColumnType = 6
	StorageColumnType_DOUBLE    StorageColumnType = 7
	StorageColumnType_ARRAY     StorageColumnType = 8
	StorageColumnType_CUSTOM    StorageColumnType = 9
)

// Enum value maps for StorageColumnType.
var (
	StorageColumnType_name = map[int32]string{
		0: "STRING",
		1: "TEXT",
		2: "LONG_TEXT",
		3: "DATE",
		4: "LONG",
		5: "INT",
		6: "FLOAT",
		7: "DOUBLE",
		8: "ARRAY",
		9: "CUSTOM",
	}
	StorageColumnType_value = map[string]int32{
		"STRING":    0,
		"TEXT":      1,
		"LONG_TEXT": 2,
		"DATE":      3,
		"LONG":      4,
		"INT":       5,
		"FLOAT":     6,
		"DOUBLE":    7,
		"ARRAY":     8,
		"CUSTOM":    9,
	}
)

func (x StorageColumnType) Enum() *StorageColumnType {
	p := new(StorageColumnType)
	*p = x
	return p
}

func (x StorageColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_table_model_enum_proto_enumTypes[0].Descriptor()
}

func (StorageColumnType) Type() protoreflect.EnumType {
	return &file_table_model_enum_proto_enumTypes[0]
}

func (x StorageColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageColumnType.Descriptor instead.
func (StorageColumnType) EnumDescriptor() ([]byte, []int) {
	return file_table_model_enum_proto_rawDescGZIP(), []int{0}
}

type ColumnType int32

const (
	ColumnType_input          ColumnType = 0  // 单行文本
	ColumnType_textarea       ColumnType = 1  // 多行文本
	ColumnType_datepicker     ColumnType = 2  // 日期
	ColumnType_email          ColumnType = 3  // 邮箱
	ColumnType_mobile         ColumnType = 4  // 手机
	ColumnType_inputnumber    ColumnType = 5  // 数字
	ColumnType_member         ColumnType = 11 // 成员
	ColumnType_dept           ColumnType = 12 // 部门
	ColumnType_treeSelect     ColumnType = 13 // 树形单选
	ColumnType_select         ColumnType = 15 // 单选
	ColumnType_status         ColumnType = 18 // 启用状态
	ColumnType_amount         ColumnType = 20 // 金额
	ColumnType_document       ColumnType = 21 // 附件
	ColumnType_multiselect    ColumnType = 24 // 多选下拉框
	ColumnType_region         ColumnType = 25 // 省市区
	ColumnType_link           ColumnType = 26 // 链接
	ColumnType_richtext       ColumnType = 27 // 富文本
	ColumnType_image          ColumnType = 28 // 图片
	ColumnType_quoteTable     ColumnType = 30 // 引用
	ColumnType_operate        ColumnType = 31 // 操作
	ColumnType_recycleFlag    ColumnType = 32 // 回收
	ColumnType_relateTablePro ColumnType = 33 // 高级关联
	ColumnType_logTable       ColumnType = 34 // 日志表格
	ColumnType_rangeNumber    ColumnType = 35 // 数字区间
	ColumnType_customField    ColumnType = 36 // 自定义字段
	ColumnType_identityCard   ColumnType = 37 // 身份证
	ColumnType_role           ColumnType = 38 // 角色
	ColumnType_gps            ColumnType = 39 // 定位坐标
	ColumnType_groupSelect    ColumnType = 40 // 分组单选
	ColumnType_relating       ColumnType = 41 // 关联
	ColumnType_baRelating     ColumnType = 42 // 前后置
	ColumnType_workHour       ColumnType = 43 // 工时
	ColumnType_attachment     ColumnType = 44 // 附件
	ColumnType_singleRelating ColumnType = 45 // 单向关联
	ColumnType_conditionRef   ColumnType = 46 // 条件引用
	ColumnType_formula        ColumnType = 47 // 公式
	ColumnType_reference      ColumnType = 48 // 引用
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0:  "input",
		1:  "textarea",
		2:  "datepicker",
		3:  "email",
		4:  "mobile",
		5:  "inputnumber",
		11: "member",
		12: "dept",
		13: "treeSelect",
		15: "select",
		18: "status",
		20: "amount",
		21: "document",
		24: "multiselect",
		25: "region",
		26: "link",
		27: "richtext",
		28: "image",
		30: "quoteTable",
		31: "operate",
		32: "recycleFlag",
		33: "relateTablePro",
		34: "logTable",
		35: "rangeNumber",
		36: "customField",
		37: "identityCard",
		38: "role",
		39: "gps",
		40: "groupSelect",
		41: "relating",
		42: "baRelating",
		43: "workHour",
		44: "attachment",
		45: "singleRelating",
		46: "conditionRef",
		47: "formula",
		48: "reference",
	}
	ColumnType_value = map[string]int32{
		"input":          0,
		"textarea":       1,
		"datepicker":     2,
		"email":          3,
		"mobile":         4,
		"inputnumber":    5,
		"member":         11,
		"dept":           12,
		"treeSelect":     13,
		"select":         15,
		"status":         18,
		"amount":         20,
		"document":       21,
		"multiselect":    24,
		"region":         25,
		"link":           26,
		"richtext":       27,
		"image":          28,
		"quoteTable":     30,
		"operate":        31,
		"recycleFlag":    32,
		"relateTablePro": 33,
		"logTable":       34,
		"rangeNumber":    35,
		"customField":    36,
		"identityCard":   37,
		"role":           38,
		"gps":            39,
		"groupSelect":    40,
		"relating":       41,
		"baRelating":     42,
		"workHour":       43,
		"attachment":     44,
		"singleRelating": 45,
		"conditionRef":   46,
		"formula":        47,
		"reference":      48,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_table_model_enum_proto_enumTypes[1].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_table_model_enum_proto_enumTypes[1]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_table_model_enum_proto_rawDescGZIP(), []int{1}
}

type TableType int32

const (
	TableType_unowned      TableType = 0
	TableType_issueSummary TableType = 1
	TableType_normal       TableType = 2
	TableType_crmSummary   TableType = 3
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		0: "unowned",
		1: "issueSummary",
		2: "normal",
		3: "crmSummary",
	}
	TableType_value = map[string]int32{
		"unowned":      0,
		"issueSummary": 1,
		"normal":       2,
		"crmSummary":   3,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_table_model_enum_proto_enumTypes[2].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_table_model_enum_proto_enumTypes[2]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_table_model_enum_proto_rawDescGZIP(), []int{2}
}

type ConditionType int32

const (
	ConditionType_between   ConditionType = 0
	ConditionType_equal     ConditionType = 1
	ConditionType_gt        ConditionType = 2
	ConditionType_gte       ConditionType = 3
	ConditionType_in        ConditionType = 4
	ConditionType_like      ConditionType = 5
	ConditionType_lt        ConditionType = 6
	ConditionType_lte       ConditionType = 7
	ConditionType_not_in    ConditionType = 8
	ConditionType_not_like  ConditionType = 9
	ConditionType_not_null  ConditionType = 10
	ConditionType_is_null   ConditionType = 11
	ConditionType_all_in    ConditionType = 12
	ConditionType_values_in ConditionType = 13
	ConditionType_and       ConditionType = 14
	ConditionType_or        ConditionType = 15
	ConditionType_un_equal  ConditionType = 16
	ConditionType_raw_sql   ConditionType = 17
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0:  "between",
		1:  "equal",
		2:  "gt",
		3:  "gte",
		4:  "in",
		5:  "like",
		6:  "lt",
		7:  "lte",
		8:  "not_in",
		9:  "not_like",
		10: "not_null",
		11: "is_null",
		12: "all_in",
		13: "values_in",
		14: "and",
		15: "or",
		16: "un_equal",
		17: "raw_sql",
	}
	ConditionType_value = map[string]int32{
		"between":   0,
		"equal":     1,
		"gt":        2,
		"gte":       3,
		"in":        4,
		"like":      5,
		"lt":        6,
		"lte":       7,
		"not_in":    8,
		"not_like":  9,
		"not_null":  10,
		"is_null":   11,
		"all_in":    12,
		"values_in": 13,
		"and":       14,
		"or":        15,
		"un_equal":  16,
		"raw_sql":   17,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_table_model_enum_proto_enumTypes[3].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_table_model_enum_proto_enumTypes[3]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_table_model_enum_proto_rawDescGZIP(), []int{3}
}

type ValueType int32

const (
	ValueType_string ValueType = 0
	ValueType_int    ValueType = 1
	ValueType_float  ValueType = 2
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "string",
		1: "int",
		2: "float",
	}
	ValueType_value = map[string]int32{
		"string": 0,
		"int":    1,
		"float":  2,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_table_model_enum_proto_enumTypes[4].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_table_model_enum_proto_enumTypes[4]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_table_model_enum_proto_rawDescGZIP(), []int{4}
}

type DbType int32

const (
	DbType_master DbType = 0
	DbType_slave1 DbType = 1
	DbType_slave2 DbType = 2
	DbType_slave3 DbType = 3
)

// Enum value maps for DbType.
var (
	DbType_name = map[int32]string{
		0: "master",
		1: "slave1",
		2: "slave2",
		3: "slave3",
	}
	DbType_value = map[string]int32{
		"master": 0,
		"slave1": 1,
		"slave2": 2,
		"slave3": 3,
	}
)

func (x DbType) Enum() *DbType {
	p := new(DbType)
	*p = x
	return p
}

func (x DbType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbType) Descriptor() protoreflect.EnumDescriptor {
	return file_table_model_enum_proto_enumTypes[5].Descriptor()
}

func (DbType) Type() protoreflect.EnumType {
	return &file_table_model_enum_proto_enumTypes[5]
}

func (x DbType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbType.Descriptor instead.
func (DbType) EnumDescriptor() ([]byte, []int) {
	return file_table_model_enum_proto_rawDescGZIP(), []int{5}
}

var File_table_model_enum_proto protoreflect.FileDescriptor

var file_table_model_enum_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2a, 0x83, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x09, 0x2a, 0x9b, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x10, 0x0c, 0x12, 0x0e,
	0x0a, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x0d, 0x12, 0x0a,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x15,
	0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10,
	0x18, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x19, 0x12, 0x08, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x69, 0x63, 0x68, 0x74,
	0x65, 0x78, 0x74, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x1c,
	0x12, 0x0e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x1e,
	0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x1f, 0x12, 0x0f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x10, 0x20, 0x12, 0x12,
	0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x22,
	0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10,
	0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x10, 0x24, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x10, 0x25, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x10, 0x26, 0x12, 0x07,
	0x0a, 0x03, 0x67, 0x70, 0x73, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x29, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x61, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f,
	0x75, 0x72, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x10, 0x2f, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x10, 0x30, 0x2a, 0x46, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x63, 0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x03, 0x2a, 0xd7,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x67, 0x74, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x6e, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x6c,
	0x74, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10,
	0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x10, 0x0c, 0x12, 0x0d, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x10, 0x0e, 0x12, 0x06, 0x0a, 0x02, 0x6f, 0x72, 0x10, 0x0f, 0x12, 0x0c, 0x0a,
	0x08, 0x75, 0x6e, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x71, 0x6c, 0x10, 0x11, 0x2a, 0x2b, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x06, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x33, 0x10, 0x03, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x65, 0x61, 0x2e, 0x62, 0x6a, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x4c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_table_model_enum_proto_rawDescOnce sync.Once
	file_table_model_enum_proto_rawDescData = file_table_model_enum_proto_rawDesc
)

func file_table_model_enum_proto_rawDescGZIP() []byte {
	file_table_model_enum_proto_rawDescOnce.Do(func() {
		file_table_model_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_table_model_enum_proto_rawDescData)
	})
	return file_table_model_enum_proto_rawDescData
}

var file_table_model_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_table_model_enum_proto_goTypes = []interface{}{
	(StorageColumnType)(0), // 0: table.v1.StorageColumnType
	(ColumnType)(0),        // 1: table.v1.ColumnType
	(TableType)(0),         // 2: table.v1.TableType
	(ConditionType)(0),     // 3: table.v1.ConditionType
	(ValueType)(0),         // 4: table.v1.ValueType
	(DbType)(0),            // 5: table.v1.DbType
}
var file_table_model_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_table_model_enum_proto_init() }
func file_table_model_enum_proto_init() {
	if File_table_model_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_table_model_enum_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_table_model_enum_proto_goTypes,
		DependencyIndexes: file_table_model_enum_proto_depIdxs,
		EnumInfos:         file_table_model_enum_proto_enumTypes,
	}.Build()
	File_table_model_enum_proto = out.File
	file_table_model_enum_proto_rawDesc = nil
	file_table_model_enum_proto_goTypes = nil
	file_table_model_enum_proto_depIdxs = nil
}
