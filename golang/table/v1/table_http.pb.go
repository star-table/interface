// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type TableHTTPServer interface {
	CopyColumn(context.Context, *CopyColumnRequest) (*CopyColumnReply, error)
	CopyRow(context.Context, *CopyRowRequest) (*CopyRowReply, error)
	CopyTables(context.Context, *CopyTablesRequest) (*CopyTablesReply, error)
	CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error)
	CreateMultiSummeryTable(context.Context, *CreateMultiSummeryTableRequest) (*CreateMultiSummeryTableReply, error)
	CreateOrgColumn(context.Context, *CreateOrgColumnRequest) (*CreateOrgColumnReply, error)
	CreateRows(context.Context, *CreateRowsRequest) (*CreateRowsReply, error)
	CreateSummeryTable(context.Context, *CreateSummeryTableRequest) (*CreateSummeryTableReply, error)
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableReply, error)
	DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnReply, error)
	DeleteOrgColumn(context.Context, *DeleteOrgColumnRequest) (*DeleteOrgColumnReply, error)
	DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowReply, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableReply, error)
	GetBeforeAfterRowList(context.Context, *GetBeforeAfterRowListReq) (*GetBeforeAfterRowListReply, error)
	GetRowRelationList(context.Context, *GetRelationListReq) (*GetRelationListReply, error)
	InitOrgColumns(context.Context, *InitOrgColumnsRequest) (*InitOrgColumnsReply, error)
	MoveRow(context.Context, *MoveRowRequest) (*MoveRowReply, error)
	ReadOrgColumns(context.Context, *ReadOrgColumnsRequest) (*ReadOrgColumnsReply, error)
	ReadOrgTableSchemas(context.Context, *ReadOrgTableSchemasRequest) (*ReadOrgTableSchemasReply, error)
	ReadOrgTables(context.Context, *ReadOrgTablesRequest) (*ReadOrgTablesReply, error)
	ReadSummeryTableId(context.Context, *ReadSummeryTableIdRequest) (*ReadSummeryTableIdReply, error)
	ReadTable(context.Context, *ReadTableRequest) (*ReadTableReply, error)
	ReadTableSchemas(context.Context, *ReadTableSchemasRequest) (*ReadTableSchemasReply, error)
	ReadTableSchemasByAppId(context.Context, *ReadTableSchemasByAppIdRequest) (*ReadTableSchemasByAppIdReply, error)
	ReadTables(context.Context, *ReadTablesRequest) (*ReadTablesReply, error)
	ReadTablesByApps(context.Context, *ReadTablesByAppsRequest) (*ReadTablesByAppsReply, error)
	RenameTable(context.Context, *RenameTableRequest) (*RenameTableReply, error)
	SetAutoSchedule(context.Context, *SetAutoScheduleRequest) (*SetAutoScheduleReply, error)
	UpdateColumn(context.Context, *UpdateColumnRequest) (*UpdateColumnReply, error)
	UpdateColumnDescription(context.Context, *UpdateColumnDescriptionRequest) (*UpdateColumnDescriptionReply, error)
	UpdateRowBeforeAfter(context.Context, *UpdateRowBeforeAfterReq) (*UpdateRowBeforeAfterReply, error)
	UpdateRowRelate(context.Context, *UpdateRowRelateReq) (*UpdateRowRelateReply, error)
}

func RegisterTableHTTPServer(s *http.Server, srv TableHTTPServer) {
	r := s.Route("/")
	r.POST("/inner/v1/table/createSummery", _Table_CreateSummeryTable0_HTTP_Handler(srv))
	r.POST("/inner/v1/table/createMultiSummery", _Table_CreateMultiSummeryTable0_HTTP_Handler(srv))
	r.POST("/inner/v1/table/create", _Table_CreateTable0_HTTP_Handler(srv))
	r.POST("/inner/v1/table/rename", _Table_RenameTable0_HTTP_Handler(srv))
	r.POST("/inner/v1/table/copy", _Table_CopyTables0_HTTP_Handler(srv))
	r.POST("/inner/v1/table/delete", _Table_DeleteTable0_HTTP_Handler(srv))
	r.POST("/inner/v1/table/setAutoSchedule", _Table_SetAutoSchedule0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/tables", _Table_ReadTables0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/table", _Table_ReadTable0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/tablesByApps", _Table_ReadTablesByApps0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/org/tables", _Table_ReadOrgTables0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/tableSchemas", _Table_ReadTableSchemas0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/tableSchemasByAppId", _Table_ReadTableSchemasByAppId0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/orgTableSchemas", _Table_ReadOrgTableSchemas0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/summeryTableId", _Table_ReadSummeryTableId0_HTTP_Handler(srv))
	r.POST("/inner/v1/org/columns/init", _Table_InitOrgColumns0_HTTP_Handler(srv))
	r.POST("/inner/v1/read/org/columns", _Table_ReadOrgColumns0_HTTP_Handler(srv))
	r.POST("/inner/v1/org/column/create", _Table_CreateOrgColumn0_HTTP_Handler(srv))
	r.POST("/inner/v1/org/column/delete", _Table_DeleteOrgColumn0_HTTP_Handler(srv))
	r.POST("/inner/v1/column/create", _Table_CreateColumn0_HTTP_Handler(srv))
	r.POST("/inner/v1/column/copy", _Table_CopyColumn0_HTTP_Handler(srv))
	r.POST("/inner/v1/column/update", _Table_UpdateColumn0_HTTP_Handler(srv))
	r.POST("/inner/v1/column/description/update", _Table_UpdateColumnDescription0_HTTP_Handler(srv))
	r.POST("/inner/v1/column/delete", _Table_DeleteColumn0_HTTP_Handler(srv))
	r.POST("/inner/v1/row/create", _Table_CreateRows0_HTTP_Handler(srv))
	r.POST("/inner/v1/row/move", _Table_MoveRow0_HTTP_Handler(srv))
	r.POST("/inner/v1/row/copy", _Table_CopyRow0_HTTP_Handler(srv))
	r.POST("/inner/v1/row/delete", _Table_DeleteRow0_HTTP_Handler(srv))
	r.POST("/inner/v1/row/relation/updateRowRelate", _Table_UpdateRowRelate0_HTTP_Handler(srv))
	r.POST("/inner/v1/row/relation/updateRowBeforeAfter", _Table_UpdateRowBeforeAfter0_HTTP_Handler(srv))
	r.GET("/inner/v1/row/{rowId}/relation", _Table_GetRowRelationList0_HTTP_Handler(srv))
	r.GET("/inner/v1/row/{rowId}/beforeAfter", _Table_GetBeforeAfterRowList0_HTTP_Handler(srv))
}

func _Table_CreateSummeryTable0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSummeryTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CreateSummeryTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSummeryTable(ctx, req.(*CreateSummeryTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSummeryTableReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CreateMultiSummeryTable0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMultiSummeryTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CreateMultiSummeryTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMultiSummeryTable(ctx, req.(*CreateMultiSummeryTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMultiSummeryTableReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CreateTable0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CreateTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTable(ctx, req.(*CreateTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTableReply)
		return ctx.Result(200, reply)
	}
}

func _Table_RenameTable0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RenameTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/RenameTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RenameTable(ctx, req.(*RenameTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RenameTableReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CopyTables0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyTablesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CopyTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CopyTables(ctx, req.(*CopyTablesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CopyTablesReply)
		return ctx.Result(200, reply)
	}
}

func _Table_DeleteTable0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/DeleteTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTable(ctx, req.(*DeleteTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTableReply)
		return ctx.Result(200, reply)
	}
}

func _Table_SetAutoSchedule0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetAutoScheduleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/SetAutoSchedule")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetAutoSchedule(ctx, req.(*SetAutoScheduleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetAutoScheduleReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadTables0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadTablesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadTables(ctx, req.(*ReadTablesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadTablesReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadTable0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadTable(ctx, req.(*ReadTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadTableReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadTablesByApps0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadTablesByAppsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadTablesByApps")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadTablesByApps(ctx, req.(*ReadTablesByAppsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadTablesByAppsReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadOrgTables0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadOrgTablesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadOrgTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadOrgTables(ctx, req.(*ReadOrgTablesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadOrgTablesReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadTableSchemas0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadTableSchemasRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadTableSchemas")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadTableSchemas(ctx, req.(*ReadTableSchemasRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadTableSchemasReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadTableSchemasByAppId0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadTableSchemasByAppIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadTableSchemasByAppId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadTableSchemasByAppId(ctx, req.(*ReadTableSchemasByAppIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadTableSchemasByAppIdReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadOrgTableSchemas0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadOrgTableSchemasRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadOrgTableSchemas")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadOrgTableSchemas(ctx, req.(*ReadOrgTableSchemasRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadOrgTableSchemasReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadSummeryTableId0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadSummeryTableIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadSummeryTableId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadSummeryTableId(ctx, req.(*ReadSummeryTableIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadSummeryTableIdReply)
		return ctx.Result(200, reply)
	}
}

func _Table_InitOrgColumns0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitOrgColumnsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/InitOrgColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitOrgColumns(ctx, req.(*InitOrgColumnsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitOrgColumnsReply)
		return ctx.Result(200, reply)
	}
}

func _Table_ReadOrgColumns0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadOrgColumnsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/ReadOrgColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadOrgColumns(ctx, req.(*ReadOrgColumnsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadOrgColumnsReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CreateOrgColumn0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrgColumnRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CreateOrgColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrgColumn(ctx, req.(*CreateOrgColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrgColumnReply)
		return ctx.Result(200, reply)
	}
}

func _Table_DeleteOrgColumn0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrgColumnRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/DeleteOrgColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrgColumn(ctx, req.(*DeleteOrgColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOrgColumnReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CreateColumn0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateColumnRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CreateColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateColumn(ctx, req.(*CreateColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateColumnReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CopyColumn0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyColumnRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CopyColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CopyColumn(ctx, req.(*CopyColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CopyColumnReply)
		return ctx.Result(200, reply)
	}
}

func _Table_UpdateColumn0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateColumnRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/UpdateColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateColumn(ctx, req.(*UpdateColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateColumnReply)
		return ctx.Result(200, reply)
	}
}

func _Table_UpdateColumnDescription0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateColumnDescriptionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/UpdateColumnDescription")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateColumnDescription(ctx, req.(*UpdateColumnDescriptionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateColumnDescriptionReply)
		return ctx.Result(200, reply)
	}
}

func _Table_DeleteColumn0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteColumnRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/DeleteColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteColumn(ctx, req.(*DeleteColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteColumnReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CreateRows0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRowsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CreateRows")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRows(ctx, req.(*CreateRowsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRowsReply)
		return ctx.Result(200, reply)
	}
}

func _Table_MoveRow0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MoveRowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/MoveRow")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MoveRow(ctx, req.(*MoveRowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MoveRowReply)
		return ctx.Result(200, reply)
	}
}

func _Table_CopyRow0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyRowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/CopyRow")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CopyRow(ctx, req.(*CopyRowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CopyRowReply)
		return ctx.Result(200, reply)
	}
}

func _Table_DeleteRow0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/DeleteRow")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRow(ctx, req.(*DeleteRowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRowReply)
		return ctx.Result(200, reply)
	}
}

func _Table_UpdateRowRelate0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRowRelateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/UpdateRowRelate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRowRelate(ctx, req.(*UpdateRowRelateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRowRelateReply)
		return ctx.Result(200, reply)
	}
}

func _Table_UpdateRowBeforeAfter0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRowBeforeAfterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/UpdateRowBeforeAfter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRowBeforeAfter(ctx, req.(*UpdateRowBeforeAfterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRowBeforeAfterReply)
		return ctx.Result(200, reply)
	}
}

func _Table_GetRowRelationList0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRelationListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/GetRowRelationList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRowRelationList(ctx, req.(*GetRelationListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRelationListReply)
		return ctx.Result(200, reply)
	}
}

func _Table_GetBeforeAfterRowList0_HTTP_Handler(srv TableHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBeforeAfterRowListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/table.v1.Table/GetBeforeAfterRowList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBeforeAfterRowList(ctx, req.(*GetBeforeAfterRowListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBeforeAfterRowListReply)
		return ctx.Result(200, reply)
	}
}

type TableHTTPClient interface {
	CopyColumn(ctx context.Context, req *CopyColumnRequest, opts ...http.CallOption) (rsp *CopyColumnReply, err error)
	CopyRow(ctx context.Context, req *CopyRowRequest, opts ...http.CallOption) (rsp *CopyRowReply, err error)
	CopyTables(ctx context.Context, req *CopyTablesRequest, opts ...http.CallOption) (rsp *CopyTablesReply, err error)
	CreateColumn(ctx context.Context, req *CreateColumnRequest, opts ...http.CallOption) (rsp *CreateColumnReply, err error)
	CreateMultiSummeryTable(ctx context.Context, req *CreateMultiSummeryTableRequest, opts ...http.CallOption) (rsp *CreateMultiSummeryTableReply, err error)
	CreateOrgColumn(ctx context.Context, req *CreateOrgColumnRequest, opts ...http.CallOption) (rsp *CreateOrgColumnReply, err error)
	CreateRows(ctx context.Context, req *CreateRowsRequest, opts ...http.CallOption) (rsp *CreateRowsReply, err error)
	CreateSummeryTable(ctx context.Context, req *CreateSummeryTableRequest, opts ...http.CallOption) (rsp *CreateSummeryTableReply, err error)
	CreateTable(ctx context.Context, req *CreateTableRequest, opts ...http.CallOption) (rsp *CreateTableReply, err error)
	DeleteColumn(ctx context.Context, req *DeleteColumnRequest, opts ...http.CallOption) (rsp *DeleteColumnReply, err error)
	DeleteOrgColumn(ctx context.Context, req *DeleteOrgColumnRequest, opts ...http.CallOption) (rsp *DeleteOrgColumnReply, err error)
	DeleteRow(ctx context.Context, req *DeleteRowRequest, opts ...http.CallOption) (rsp *DeleteRowReply, err error)
	DeleteTable(ctx context.Context, req *DeleteTableRequest, opts ...http.CallOption) (rsp *DeleteTableReply, err error)
	GetBeforeAfterRowList(ctx context.Context, req *GetBeforeAfterRowListReq, opts ...http.CallOption) (rsp *GetBeforeAfterRowListReply, err error)
	GetRowRelationList(ctx context.Context, req *GetRelationListReq, opts ...http.CallOption) (rsp *GetRelationListReply, err error)
	InitOrgColumns(ctx context.Context, req *InitOrgColumnsRequest, opts ...http.CallOption) (rsp *InitOrgColumnsReply, err error)
	MoveRow(ctx context.Context, req *MoveRowRequest, opts ...http.CallOption) (rsp *MoveRowReply, err error)
	ReadOrgColumns(ctx context.Context, req *ReadOrgColumnsRequest, opts ...http.CallOption) (rsp *ReadOrgColumnsReply, err error)
	ReadOrgTableSchemas(ctx context.Context, req *ReadOrgTableSchemasRequest, opts ...http.CallOption) (rsp *ReadOrgTableSchemasReply, err error)
	ReadOrgTables(ctx context.Context, req *ReadOrgTablesRequest, opts ...http.CallOption) (rsp *ReadOrgTablesReply, err error)
	ReadSummeryTableId(ctx context.Context, req *ReadSummeryTableIdRequest, opts ...http.CallOption) (rsp *ReadSummeryTableIdReply, err error)
	ReadTable(ctx context.Context, req *ReadTableRequest, opts ...http.CallOption) (rsp *ReadTableReply, err error)
	ReadTableSchemas(ctx context.Context, req *ReadTableSchemasRequest, opts ...http.CallOption) (rsp *ReadTableSchemasReply, err error)
	ReadTableSchemasByAppId(ctx context.Context, req *ReadTableSchemasByAppIdRequest, opts ...http.CallOption) (rsp *ReadTableSchemasByAppIdReply, err error)
	ReadTables(ctx context.Context, req *ReadTablesRequest, opts ...http.CallOption) (rsp *ReadTablesReply, err error)
	ReadTablesByApps(ctx context.Context, req *ReadTablesByAppsRequest, opts ...http.CallOption) (rsp *ReadTablesByAppsReply, err error)
	RenameTable(ctx context.Context, req *RenameTableRequest, opts ...http.CallOption) (rsp *RenameTableReply, err error)
	SetAutoSchedule(ctx context.Context, req *SetAutoScheduleRequest, opts ...http.CallOption) (rsp *SetAutoScheduleReply, err error)
	UpdateColumn(ctx context.Context, req *UpdateColumnRequest, opts ...http.CallOption) (rsp *UpdateColumnReply, err error)
	UpdateColumnDescription(ctx context.Context, req *UpdateColumnDescriptionRequest, opts ...http.CallOption) (rsp *UpdateColumnDescriptionReply, err error)
	UpdateRowBeforeAfter(ctx context.Context, req *UpdateRowBeforeAfterReq, opts ...http.CallOption) (rsp *UpdateRowBeforeAfterReply, err error)
	UpdateRowRelate(ctx context.Context, req *UpdateRowRelateReq, opts ...http.CallOption) (rsp *UpdateRowRelateReply, err error)
}

type TableHTTPClientImpl struct {
	cc *http.Client
}

func NewTableHTTPClient(client *http.Client) TableHTTPClient {
	return &TableHTTPClientImpl{client}
}

func (c *TableHTTPClientImpl) CopyColumn(ctx context.Context, in *CopyColumnRequest, opts ...http.CallOption) (*CopyColumnReply, error) {
	var out CopyColumnReply
	pattern := "/inner/v1/column/copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CopyColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CopyRow(ctx context.Context, in *CopyRowRequest, opts ...http.CallOption) (*CopyRowReply, error) {
	var out CopyRowReply
	pattern := "/inner/v1/row/copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CopyRow"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CopyTables(ctx context.Context, in *CopyTablesRequest, opts ...http.CallOption) (*CopyTablesReply, error) {
	var out CopyTablesReply
	pattern := "/inner/v1/table/copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CopyTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...http.CallOption) (*CreateColumnReply, error) {
	var out CreateColumnReply
	pattern := "/inner/v1/column/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CreateColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CreateMultiSummeryTable(ctx context.Context, in *CreateMultiSummeryTableRequest, opts ...http.CallOption) (*CreateMultiSummeryTableReply, error) {
	var out CreateMultiSummeryTableReply
	pattern := "/inner/v1/table/createMultiSummery"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CreateMultiSummeryTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CreateOrgColumn(ctx context.Context, in *CreateOrgColumnRequest, opts ...http.CallOption) (*CreateOrgColumnReply, error) {
	var out CreateOrgColumnReply
	pattern := "/inner/v1/org/column/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CreateOrgColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CreateRows(ctx context.Context, in *CreateRowsRequest, opts ...http.CallOption) (*CreateRowsReply, error) {
	var out CreateRowsReply
	pattern := "/inner/v1/row/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CreateRows"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CreateSummeryTable(ctx context.Context, in *CreateSummeryTableRequest, opts ...http.CallOption) (*CreateSummeryTableReply, error) {
	var out CreateSummeryTableReply
	pattern := "/inner/v1/table/createSummery"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CreateSummeryTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...http.CallOption) (*CreateTableReply, error) {
	var out CreateTableReply
	pattern := "/inner/v1/table/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/CreateTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...http.CallOption) (*DeleteColumnReply, error) {
	var out DeleteColumnReply
	pattern := "/inner/v1/column/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/DeleteColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) DeleteOrgColumn(ctx context.Context, in *DeleteOrgColumnRequest, opts ...http.CallOption) (*DeleteOrgColumnReply, error) {
	var out DeleteOrgColumnReply
	pattern := "/inner/v1/org/column/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/DeleteOrgColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...http.CallOption) (*DeleteRowReply, error) {
	var out DeleteRowReply
	pattern := "/inner/v1/row/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/DeleteRow"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...http.CallOption) (*DeleteTableReply, error) {
	var out DeleteTableReply
	pattern := "/inner/v1/table/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/DeleteTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) GetBeforeAfterRowList(ctx context.Context, in *GetBeforeAfterRowListReq, opts ...http.CallOption) (*GetBeforeAfterRowListReply, error) {
	var out GetBeforeAfterRowListReply
	pattern := "/inner/v1/row/{rowId}/beforeAfter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/table.v1.Table/GetBeforeAfterRowList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) GetRowRelationList(ctx context.Context, in *GetRelationListReq, opts ...http.CallOption) (*GetRelationListReply, error) {
	var out GetRelationListReply
	pattern := "/inner/v1/row/{rowId}/relation"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/table.v1.Table/GetRowRelationList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) InitOrgColumns(ctx context.Context, in *InitOrgColumnsRequest, opts ...http.CallOption) (*InitOrgColumnsReply, error) {
	var out InitOrgColumnsReply
	pattern := "/inner/v1/org/columns/init"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/InitOrgColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) MoveRow(ctx context.Context, in *MoveRowRequest, opts ...http.CallOption) (*MoveRowReply, error) {
	var out MoveRowReply
	pattern := "/inner/v1/row/move"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/MoveRow"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadOrgColumns(ctx context.Context, in *ReadOrgColumnsRequest, opts ...http.CallOption) (*ReadOrgColumnsReply, error) {
	var out ReadOrgColumnsReply
	pattern := "/inner/v1/read/org/columns"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadOrgColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadOrgTableSchemas(ctx context.Context, in *ReadOrgTableSchemasRequest, opts ...http.CallOption) (*ReadOrgTableSchemasReply, error) {
	var out ReadOrgTableSchemasReply
	pattern := "/inner/v1/read/orgTableSchemas"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadOrgTableSchemas"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadOrgTables(ctx context.Context, in *ReadOrgTablesRequest, opts ...http.CallOption) (*ReadOrgTablesReply, error) {
	var out ReadOrgTablesReply
	pattern := "/inner/v1/read/org/tables"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadOrgTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadSummeryTableId(ctx context.Context, in *ReadSummeryTableIdRequest, opts ...http.CallOption) (*ReadSummeryTableIdReply, error) {
	var out ReadSummeryTableIdReply
	pattern := "/inner/v1/read/summeryTableId"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadSummeryTableId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadTable(ctx context.Context, in *ReadTableRequest, opts ...http.CallOption) (*ReadTableReply, error) {
	var out ReadTableReply
	pattern := "/inner/v1/read/table"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadTableSchemas(ctx context.Context, in *ReadTableSchemasRequest, opts ...http.CallOption) (*ReadTableSchemasReply, error) {
	var out ReadTableSchemasReply
	pattern := "/inner/v1/read/tableSchemas"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadTableSchemas"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadTableSchemasByAppId(ctx context.Context, in *ReadTableSchemasByAppIdRequest, opts ...http.CallOption) (*ReadTableSchemasByAppIdReply, error) {
	var out ReadTableSchemasByAppIdReply
	pattern := "/inner/v1/read/tableSchemasByAppId"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadTableSchemasByAppId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadTables(ctx context.Context, in *ReadTablesRequest, opts ...http.CallOption) (*ReadTablesReply, error) {
	var out ReadTablesReply
	pattern := "/inner/v1/read/tables"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) ReadTablesByApps(ctx context.Context, in *ReadTablesByAppsRequest, opts ...http.CallOption) (*ReadTablesByAppsReply, error) {
	var out ReadTablesByAppsReply
	pattern := "/inner/v1/read/tablesByApps"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/ReadTablesByApps"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) RenameTable(ctx context.Context, in *RenameTableRequest, opts ...http.CallOption) (*RenameTableReply, error) {
	var out RenameTableReply
	pattern := "/inner/v1/table/rename"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/RenameTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) SetAutoSchedule(ctx context.Context, in *SetAutoScheduleRequest, opts ...http.CallOption) (*SetAutoScheduleReply, error) {
	var out SetAutoScheduleReply
	pattern := "/inner/v1/table/setAutoSchedule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/SetAutoSchedule"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...http.CallOption) (*UpdateColumnReply, error) {
	var out UpdateColumnReply
	pattern := "/inner/v1/column/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/UpdateColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) UpdateColumnDescription(ctx context.Context, in *UpdateColumnDescriptionRequest, opts ...http.CallOption) (*UpdateColumnDescriptionReply, error) {
	var out UpdateColumnDescriptionReply
	pattern := "/inner/v1/column/description/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/UpdateColumnDescription"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) UpdateRowBeforeAfter(ctx context.Context, in *UpdateRowBeforeAfterReq, opts ...http.CallOption) (*UpdateRowBeforeAfterReply, error) {
	var out UpdateRowBeforeAfterReply
	pattern := "/inner/v1/row/relation/updateRowBeforeAfter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/UpdateRowBeforeAfter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TableHTTPClientImpl) UpdateRowRelate(ctx context.Context, in *UpdateRowRelateReq, opts ...http.CallOption) (*UpdateRowRelateReply, error) {
	var out UpdateRowRelateReply
	pattern := "/inner/v1/row/relation/updateRowRelate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/table.v1.Table/UpdateRowRelate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
