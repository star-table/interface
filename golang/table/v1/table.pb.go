// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.7.1
// source: table.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSummeryTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64     `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Columns []*Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *CreateSummeryTableRequest) Reset() {
	*x = CreateSummeryTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSummeryTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSummeryTableRequest) ProtoMessage() {}

func (x *CreateSummeryTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSummeryTableRequest.ProtoReflect.Descriptor instead.
func (*CreateSummeryTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSummeryTableRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateSummeryTableRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type CreateSummeryTableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64 `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *CreateSummeryTableReply) Reset() {
	*x = CreateSummeryTableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSummeryTableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSummeryTableReply) ProtoMessage() {}

func (x *CreateSummeryTableReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSummeryTableReply.ProtoReflect.Descriptor instead.
func (*CreateSummeryTableReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSummeryTableReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateSummeryTableReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

type CreateMultiSummeryTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SummeryTableRequest `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CreateMultiSummeryTableRequest) Reset() {
	*x = CreateMultiSummeryTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultiSummeryTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultiSummeryTableRequest) ProtoMessage() {}

func (x *CreateMultiSummeryTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultiSummeryTableRequest.ProtoReflect.Descriptor instead.
func (*CreateMultiSummeryTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMultiSummeryTableRequest) GetList() []*SummeryTableRequest {
	if x != nil {
		return x.List
	}
	return nil
}

type SummeryTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64     `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableType TableType `protobuf:"varint,2,opt,name=tableType,proto3,enum=table.v1.TableType" json:"tableType,omitempty"`
	Columns   []*Column `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *SummeryTableRequest) Reset() {
	*x = SummeryTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummeryTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummeryTableRequest) ProtoMessage() {}

func (x *SummeryTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummeryTableRequest.ProtoReflect.Descriptor instead.
func (*SummeryTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{3}
}

func (x *SummeryTableRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *SummeryTableRequest) GetTableType() TableType {
	if x != nil {
		return x.TableType
	}
	return TableType_unowned
}

func (x *SummeryTableRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type CreateMultiSummeryTableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CreateMultiSummeryTableData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CreateMultiSummeryTableReply) Reset() {
	*x = CreateMultiSummeryTableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultiSummeryTableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultiSummeryTableReply) ProtoMessage() {}

func (x *CreateMultiSummeryTableReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultiSummeryTableReply.ProtoReflect.Descriptor instead.
func (*CreateMultiSummeryTableReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMultiSummeryTableReply) GetList() []*CreateMultiSummeryTableData {
	if x != nil {
		return x.List
	}
	return nil
}

type CreateMultiSummeryTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64 `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *CreateMultiSummeryTableData) Reset() {
	*x = CreateMultiSummeryTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultiSummeryTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultiSummeryTableData) ProtoMessage() {}

func (x *CreateMultiSummeryTableData) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultiSummeryTableData.ProtoReflect.Descriptor instead.
func (*CreateMultiSummeryTableData) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{5}
}

func (x *CreateMultiSummeryTableData) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateMultiSummeryTableData) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// CreateTable
type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                   int64     `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	AppType                 int32     `protobuf:"varint,2,opt,name=appType,proto3" json:"appType,omitempty"`
	Name                    string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	BasicColumns            []string  `protobuf:"bytes,4,rep,name=basicColumns,proto3" json:"basicColumns,omitempty"`
	IsNeedStoreTable        bool      `protobuf:"varint,5,opt,name=isNeedStoreTable,proto3" json:"isNeedStoreTable,omitempty"`              // 是否需要pg数据表，目前来说，极星都存在汇总表内，所以创建project的时候其实只需要创建表头，不需要数据表
	IsNeedColumn            bool      `protobuf:"varint,6,opt,name=isNeedColumn,proto3" json:"isNeedColumn,omitempty"`                      // 是否需要表头，有些app其实不需要表头数据，只是创建了一个表记录，不创建表头数据
	Columns                 []*Column `protobuf:"bytes,7,rep,name=columns,proto3" json:"columns,omitempty"`                                 // 如果传了使用这，不传从汇总表合并
	NotNeedSummeryColumnIds []string  `protobuf:"bytes,8,rep,name=notNeedSummeryColumnIds,proto3" json:"notNeedSummeryColumnIds,omitempty"` // 不需要的汇总表字段
	BindSummeryAppId        int64     `protobuf:"varint,9,opt,name=bindSummeryAppId,proto3" json:"bindSummeryAppId,omitempty"`              // 绑定的汇总表appId
	SummaryFlag             int32     `protobuf:"varint,10,opt,name=summaryFlag,proto3" json:"summaryFlag,omitempty"`                       // 汇总类型
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTableRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateTableRequest) GetAppType() int32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *CreateTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTableRequest) GetBasicColumns() []string {
	if x != nil {
		return x.BasicColumns
	}
	return nil
}

func (x *CreateTableRequest) GetIsNeedStoreTable() bool {
	if x != nil {
		return x.IsNeedStoreTable
	}
	return false
}

func (x *CreateTableRequest) GetIsNeedColumn() bool {
	if x != nil {
		return x.IsNeedColumn
	}
	return false
}

func (x *CreateTableRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateTableRequest) GetNotNeedSummeryColumnIds() []string {
	if x != nil {
		return x.NotNeedSummeryColumnIds
	}
	return nil
}

func (x *CreateTableRequest) GetBindSummeryAppId() int64 {
	if x != nil {
		return x.BindSummeryAppId
	}
	return 0
}

func (x *CreateTableRequest) GetSummaryFlag() int32 {
	if x != nil {
		return x.SummaryFlag
	}
	return 0
}

type CreateTableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId int64        `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Table *TableSchema `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *CreateTableReply) Reset() {
	*x = CreateTableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableReply) ProtoMessage() {}

func (x *CreateTableReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableReply.ProtoReflect.Descriptor instead.
func (*CreateTableReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTableReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateTableReply) GetTable() *TableSchema {
	if x != nil {
		return x.Table
	}
	return nil
}

// RenameTable
type RenameTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64  `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RenameTableRequest) Reset() {
	*x = RenameTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTableRequest) ProtoMessage() {}

func (x *RenameTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTableRequest.ProtoReflect.Descriptor instead.
func (*RenameTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{8}
}

func (x *RenameTableRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RenameTableRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RenameTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenameTableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64  `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RenameTableReply) Reset() {
	*x = RenameTableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTableReply) ProtoMessage() {}

func (x *RenameTableReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTableReply.ProtoReflect.Descriptor instead.
func (*RenameTableReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{9}
}

func (x *RenameTableReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RenameTableReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CopyTables
type CopyTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcAppId           int64           `protobuf:"varint,1,opt,name=srcAppId,proto3" json:"srcAppId,omitempty"`
	SrcTableIds        []int64         `protobuf:"varint,2,rep,packed,name=srcTableIds,proto3" json:"srcTableIds,omitempty"`
	DstAppId           int64           `protobuf:"varint,3,opt,name=dstAppId,proto3" json:"dstAppId,omitempty"`
	OldToNewPermission map[int64]int64 `protobuf:"bytes,4,rep,name=oldToNewPermission,proto3" json:"oldToNewPermission,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //权限替换
}

func (x *CopyTablesRequest) Reset() {
	*x = CopyTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTablesRequest) ProtoMessage() {}

func (x *CopyTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTablesRequest.ProtoReflect.Descriptor instead.
func (*CopyTablesRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{10}
}

func (x *CopyTablesRequest) GetSrcAppId() int64 {
	if x != nil {
		return x.SrcAppId
	}
	return 0
}

func (x *CopyTablesRequest) GetSrcTableIds() []int64 {
	if x != nil {
		return x.SrcTableIds
	}
	return nil
}

func (x *CopyTablesRequest) GetDstAppId() int64 {
	if x != nil {
		return x.DstAppId
	}
	return 0
}

func (x *CopyTablesRequest) GetOldToNewPermission() map[int64]int64 {
	if x != nil {
		return x.OldToNewPermission
	}
	return nil
}

type CopyTablesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           int64           `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Tables          []*TableSchema  `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	OldToNewTableId map[int64]int64 `protobuf:"bytes,3,rep,name=oldToNewTableId,proto3" json:"oldToNewTableId,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CopyTablesReply) Reset() {
	*x = CopyTablesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTablesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTablesReply) ProtoMessage() {}

func (x *CopyTablesReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTablesReply.ProtoReflect.Descriptor instead.
func (*CopyTablesReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{11}
}

func (x *CopyTablesReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CopyTablesReply) GetTables() []*TableSchema {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *CopyTablesReply) GetOldToNewTableId() map[int64]int64 {
	if x != nil {
		return x.OldToNewTableId
	}
	return nil
}

// DeleteTable
type DeleteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64 `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *DeleteTableRequest) Reset() {
	*x = DeleteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequest) ProtoMessage() {}

func (x *DeleteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTableRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *DeleteTableRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

type DeleteTableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *DeleteTableReply) Reset() {
	*x = DeleteTableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableReply) ProtoMessage() {}

func (x *DeleteTableReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableReply.ProtoReflect.Descriptor instead.
func (*DeleteTableReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteTableReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// SetAutoSchedule
type SetAutoScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            int64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId          int64 `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	AutoScheduleFlag int32 `protobuf:"varint,3,opt,name=autoScheduleFlag,proto3" json:"autoScheduleFlag,omitempty"`
}

func (x *SetAutoScheduleRequest) Reset() {
	*x = SetAutoScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAutoScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAutoScheduleRequest) ProtoMessage() {}

func (x *SetAutoScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAutoScheduleRequest.ProtoReflect.Descriptor instead.
func (*SetAutoScheduleRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{14}
}

func (x *SetAutoScheduleRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *SetAutoScheduleRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *SetAutoScheduleRequest) GetAutoScheduleFlag() int32 {
	if x != nil {
		return x.AutoScheduleFlag
	}
	return 0
}

type SetAutoScheduleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId          int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	AutoScheduleFlag int32 `protobuf:"varint,2,opt,name=autoScheduleFlag,proto3" json:"autoScheduleFlag,omitempty"`
}

func (x *SetAutoScheduleReply) Reset() {
	*x = SetAutoScheduleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAutoScheduleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAutoScheduleReply) ProtoMessage() {}

func (x *SetAutoScheduleReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAutoScheduleReply.ProtoReflect.Descriptor instead.
func (*SetAutoScheduleReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{15}
}

func (x *SetAutoScheduleReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *SetAutoScheduleReply) GetAutoScheduleFlag() int32 {
	if x != nil {
		return x.AutoScheduleFlag
	}
	return 0
}

// ReadTables
type ReadTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId int64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *ReadTablesRequest) Reset() {
	*x = ReadTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTablesRequest) ProtoMessage() {}

func (x *ReadTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTablesRequest.ProtoReflect.Descriptor instead.
func (*ReadTablesRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{16}
}

func (x *ReadTablesRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

type ReadTablesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  int64        `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Tables []*TableMeta `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ReadTablesReply) Reset() {
	*x = ReadTablesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTablesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTablesReply) ProtoMessage() {}

func (x *ReadTablesReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTablesReply.ProtoReflect.Descriptor instead.
func (*ReadTablesReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{17}
}

func (x *ReadTablesReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ReadTablesReply) GetTables() []*TableMeta {
	if x != nil {
		return x.Tables
	}
	return nil
}

type ReadTablesByAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppIds []int64 `protobuf:"varint,1,rep,packed,name=appIds,proto3" json:"appIds,omitempty"`
}

func (x *ReadTablesByAppsRequest) Reset() {
	*x = ReadTablesByAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTablesByAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTablesByAppsRequest) ProtoMessage() {}

func (x *ReadTablesByAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTablesByAppsRequest.ProtoReflect.Descriptor instead.
func (*ReadTablesByAppsRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{18}
}

func (x *ReadTablesByAppsRequest) GetAppIds() []int64 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

type ReadTablesByAppsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppsTables []*AppTables `protobuf:"bytes,1,rep,name=appsTables,proto3" json:"appsTables,omitempty"`
}

func (x *ReadTablesByAppsReply) Reset() {
	*x = ReadTablesByAppsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTablesByAppsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTablesByAppsReply) ProtoMessage() {}

func (x *ReadTablesByAppsReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTablesByAppsReply.ProtoReflect.Descriptor instead.
func (*ReadTablesByAppsReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{19}
}

func (x *ReadTablesByAppsReply) GetAppsTables() []*AppTables {
	if x != nil {
		return x.AppsTables
	}
	return nil
}

// ReadTableSchemas
type ReadTableSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIds           []int64  `protobuf:"varint,1,rep,packed,name=tableIds,proto3" json:"tableIds,omitempty"`
	ColumnIds          []string `protobuf:"bytes,2,rep,name=columnIds,proto3" json:"columnIds,omitempty"`
	IsNeedDescription  bool     `protobuf:"varint,3,opt,name=isNeedDescription,proto3" json:"isNeedDescription,omitempty"`   // 是否需要描述，默认描述是不取出来的，根据场景传入，而且限制了只有单个表格的时候返回
	IsNeedCommonColumn bool     `protobuf:"varint,4,opt,name=isNeedCommonColumn,proto3" json:"isNeedCommonColumn,omitempty"` // 是否需要通用字段
}

func (x *ReadTableSchemasRequest) Reset() {
	*x = ReadTableSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableSchemasRequest) ProtoMessage() {}

func (x *ReadTableSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableSchemasRequest.ProtoReflect.Descriptor instead.
func (*ReadTableSchemasRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{20}
}

func (x *ReadTableSchemasRequest) GetTableIds() []int64 {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *ReadTableSchemasRequest) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *ReadTableSchemasRequest) GetIsNeedDescription() bool {
	if x != nil {
		return x.IsNeedDescription
	}
	return false
}

func (x *ReadTableSchemasRequest) GetIsNeedCommonColumn() bool {
	if x != nil {
		return x.IsNeedCommonColumn
	}
	return false
}

type ReadTableSchemasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableSchema `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ReadTableSchemasReply) Reset() {
	*x = ReadTableSchemasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableSchemasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableSchemasReply) ProtoMessage() {}

func (x *ReadTableSchemasReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableSchemasReply.ProtoReflect.Descriptor instead.
func (*ReadTableSchemasReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{21}
}

func (x *ReadTableSchemasReply) GetTables() []*TableSchema {
	if x != nil {
		return x.Tables
	}
	return nil
}

type ReadTableSchemasByAppIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              int64    `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	ColumnIds          []string `protobuf:"bytes,2,rep,name=columnIds,proto3" json:"columnIds,omitempty"`
	IsNeedCommonColumn bool     `protobuf:"varint,3,opt,name=isNeedCommonColumn,proto3" json:"isNeedCommonColumn,omitempty"` // 是否需要通用字段
}

func (x *ReadTableSchemasByAppIdRequest) Reset() {
	*x = ReadTableSchemasByAppIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableSchemasByAppIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableSchemasByAppIdRequest) ProtoMessage() {}

func (x *ReadTableSchemasByAppIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableSchemasByAppIdRequest.ProtoReflect.Descriptor instead.
func (*ReadTableSchemasByAppIdRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{22}
}

func (x *ReadTableSchemasByAppIdRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ReadTableSchemasByAppIdRequest) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *ReadTableSchemasByAppIdRequest) GetIsNeedCommonColumn() bool {
	if x != nil {
		return x.IsNeedCommonColumn
	}
	return false
}

type ReadTableSchemasByAppIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableSchema `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ReadTableSchemasByAppIdReply) Reset() {
	*x = ReadTableSchemasByAppIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableSchemasByAppIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableSchemasByAppIdReply) ProtoMessage() {}

func (x *ReadTableSchemasByAppIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableSchemasByAppIdReply.ProtoReflect.Descriptor instead.
func (*ReadTableSchemasByAppIdReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{23}
}

func (x *ReadTableSchemasByAppIdReply) GetTables() []*TableSchema {
	if x != nil {
		return x.Tables
	}
	return nil
}

type ReadSummeryTableIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadSummeryTableIdRequest) Reset() {
	*x = ReadSummeryTableIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSummeryTableIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSummeryTableIdRequest) ProtoMessage() {}

func (x *ReadSummeryTableIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSummeryTableIdRequest.ProtoReflect.Descriptor instead.
func (*ReadSummeryTableIdRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{24}
}

type ReadSummeryTableIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	AppId   int64 `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *ReadSummeryTableIdReply) Reset() {
	*x = ReadSummeryTableIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSummeryTableIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSummeryTableIdReply) ProtoMessage() {}

func (x *ReadSummeryTableIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSummeryTableIdReply.ProtoReflect.Descriptor instead.
func (*ReadSummeryTableIdReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{25}
}

func (x *ReadSummeryTableIdReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ReadSummeryTableIdReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

type ReadTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *ReadTableRequest) Reset() {
	*x = ReadTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableRequest) ProtoMessage() {}

func (x *ReadTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableRequest.ProtoReflect.Descriptor instead.
func (*ReadTableRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{26}
}

func (x *ReadTableRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

type ReadTableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *TableMeta `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *ReadTableReply) Reset() {
	*x = ReadTableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableReply) ProtoMessage() {}

func (x *ReadTableReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableReply.ProtoReflect.Descriptor instead.
func (*ReadTableReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{27}
}

func (x *ReadTableReply) GetTable() *TableMeta {
	if x != nil {
		return x.Table
	}
	return nil
}

type ReadOrgTableSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnIds []string `protobuf:"bytes,1,rep,name=columnIds,proto3" json:"columnIds,omitempty"` // 需要获取的列key
}

func (x *ReadOrgTableSchemasRequest) Reset() {
	*x = ReadOrgTableSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrgTableSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrgTableSchemasRequest) ProtoMessage() {}

func (x *ReadOrgTableSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrgTableSchemasRequest.ProtoReflect.Descriptor instead.
func (*ReadOrgTableSchemasRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{28}
}

func (x *ReadOrgTableSchemasRequest) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

type ReadOrgTableSchemasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableSchema `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ReadOrgTableSchemasReply) Reset() {
	*x = ReadOrgTableSchemasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrgTableSchemasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrgTableSchemasReply) ProtoMessage() {}

func (x *ReadOrgTableSchemasReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrgTableSchemasReply.ProtoReflect.Descriptor instead.
func (*ReadOrgTableSchemasReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{29}
}

func (x *ReadOrgTableSchemasReply) GetTables() []*TableSchema {
	if x != nil {
		return x.Tables
	}
	return nil
}

// OrgColumns
type InitOrgColumnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *InitOrgColumnsRequest) Reset() {
	*x = InitOrgColumnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitOrgColumnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitOrgColumnsRequest) ProtoMessage() {}

func (x *InitOrgColumnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitOrgColumnsRequest.ProtoReflect.Descriptor instead.
func (*InitOrgColumnsRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{30}
}

func (x *InitOrgColumnsRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type InitOrgColumnsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitOrgColumnsReply) Reset() {
	*x = InitOrgColumnsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitOrgColumnsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitOrgColumnsReply) ProtoMessage() {}

func (x *InitOrgColumnsReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitOrgColumnsReply.ProtoReflect.Descriptor instead.
func (*InitOrgColumnsReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{31}
}

type ReadOrgColumnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadOrgColumnsRequest) Reset() {
	*x = ReadOrgColumnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrgColumnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrgColumnsRequest) ProtoMessage() {}

func (x *ReadOrgColumnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrgColumnsRequest.ProtoReflect.Descriptor instead.
func (*ReadOrgColumnsRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{32}
}

type ReadOrgColumnsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *ReadOrgColumnsReply) Reset() {
	*x = ReadOrgColumnsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrgColumnsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrgColumnsReply) ProtoMessage() {}

func (x *ReadOrgColumnsReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrgColumnsReply.ProtoReflect.Descriptor instead.
func (*ReadOrgColumnsReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{33}
}

func (x *ReadOrgColumnsReply) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type CreateOrgColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column *Column `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CreateOrgColumnRequest) Reset() {
	*x = CreateOrgColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgColumnRequest) ProtoMessage() {}

func (x *CreateOrgColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgColumnRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgColumnRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{34}
}

func (x *CreateOrgColumnRequest) GetColumn() *Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type CreateOrgColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrgColumnReply) Reset() {
	*x = CreateOrgColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgColumnReply) ProtoMessage() {}

func (x *CreateOrgColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgColumnReply.ProtoReflect.Descriptor instead.
func (*CreateOrgColumnReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{35}
}

type DeleteOrgColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId string `protobuf:"bytes,1,opt,name=columnId,proto3" json:"columnId,omitempty"`
}

func (x *DeleteOrgColumnRequest) Reset() {
	*x = DeleteOrgColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgColumnRequest) ProtoMessage() {}

func (x *DeleteOrgColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgColumnRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrgColumnRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteOrgColumnRequest) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

type DeleteOrgColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOrgColumnReply) Reset() {
	*x = DeleteOrgColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgColumnReply) ProtoMessage() {}

func (x *DeleteOrgColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgColumnReply.ProtoReflect.Descriptor instead.
func (*DeleteOrgColumnReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{37}
}

// CreateColumn
type CreateColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId             int64   `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId           int64   `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Column            *Column `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	ActiveViewId      int64   `protobuf:"varint,4,opt,name=activeViewId,proto3" json:"activeViewId,omitempty"`
	SourceOrgColumnId string  `protobuf:"bytes,5,opt,name=sourceOrgColumnId,proto3" json:"sourceOrgColumnId,omitempty"` // 来源的团队字段的列名，用于记录对应关系
}

func (x *CreateColumnRequest) Reset() {
	*x = CreateColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateColumnRequest) ProtoMessage() {}

func (x *CreateColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateColumnRequest.ProtoReflect.Descriptor instead.
func (*CreateColumnRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{38}
}

func (x *CreateColumnRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateColumnRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CreateColumnRequest) GetColumn() *Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *CreateColumnRequest) GetActiveViewId() int64 {
	if x != nil {
		return x.ActiveViewId
	}
	return 0
}

func (x *CreateColumnRequest) GetSourceOrgColumnId() string {
	if x != nil {
		return x.SourceOrgColumnId
	}
	return ""
}

type CreateColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64   `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64   `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Column  *Column `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CreateColumnReply) Reset() {
	*x = CreateColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateColumnReply) ProtoMessage() {}

func (x *CreateColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateColumnReply.ProtoReflect.Descriptor instead.
func (*CreateColumnReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{39}
}

func (x *CreateColumnReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateColumnReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CreateColumnReply) GetColumn() *Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type CopyColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId     int64  `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	SrcColumnId string `protobuf:"bytes,3,opt,name=srcColumnId,proto3" json:"srcColumnId,omitempty"`
}

func (x *CopyColumnRequest) Reset() {
	*x = CopyColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyColumnRequest) ProtoMessage() {}

func (x *CopyColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyColumnRequest.ProtoReflect.Descriptor instead.
func (*CopyColumnRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{40}
}

func (x *CopyColumnRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CopyColumnRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CopyColumnRequest) GetSrcColumnId() string {
	if x != nil {
		return x.SrcColumnId
	}
	return ""
}

type CopyColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateColumnId string `protobuf:"bytes,1,opt,name=createColumnId,proto3" json:"createColumnId,omitempty"`
}

func (x *CopyColumnReply) Reset() {
	*x = CopyColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyColumnReply) ProtoMessage() {}

func (x *CopyColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyColumnReply.ProtoReflect.Descriptor instead.
func (*CopyColumnReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{41}
}

func (x *CopyColumnReply) GetCreateColumnId() string {
	if x != nil {
		return x.CreateColumnId
	}
	return ""
}

// UpdateColumn
type UpdateColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64   `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64   `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Column  *Column `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *UpdateColumnRequest) Reset() {
	*x = UpdateColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumnRequest) ProtoMessage() {}

func (x *UpdateColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumnRequest.ProtoReflect.Descriptor instead.
func (*UpdateColumnRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateColumnRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *UpdateColumnRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *UpdateColumnRequest) GetColumn() *Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type UpdateColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64   `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64   `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Column  *Column `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *UpdateColumnReply) Reset() {
	*x = UpdateColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumnReply) ProtoMessage() {}

func (x *UpdateColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumnReply.ProtoReflect.Descriptor instead.
func (*UpdateColumnReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateColumnReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *UpdateColumnReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *UpdateColumnReply) GetColumn() *Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type UpdateColumnDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId     int64  `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ColumnId    string `protobuf:"bytes,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateColumnDescriptionRequest) Reset() {
	*x = UpdateColumnDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumnDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumnDescriptionRequest) ProtoMessage() {}

func (x *UpdateColumnDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumnDescriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateColumnDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateColumnDescriptionRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *UpdateColumnDescriptionRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *UpdateColumnDescriptionRequest) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *UpdateColumnDescriptionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateColumnDescriptionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId int64 `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *UpdateColumnDescriptionReply) Reset() {
	*x = UpdateColumnDescriptionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumnDescriptionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumnDescriptionReply) ProtoMessage() {}

func (x *UpdateColumnDescriptionReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumnDescriptionReply.ProtoReflect.Descriptor instead.
func (*UpdateColumnDescriptionReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateColumnDescriptionReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *UpdateColumnDescriptionReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// DeleteColumn
type DeleteColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId  int64  `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ColumnId string `protobuf:"bytes,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
}

func (x *DeleteColumnRequest) Reset() {
	*x = DeleteColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteColumnRequest) ProtoMessage() {}

func (x *DeleteColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteColumnRequest.ProtoReflect.Descriptor instead.
func (*DeleteColumnRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteColumnRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *DeleteColumnRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DeleteColumnRequest) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

type DeleteColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TableId  int64  `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ColumnId string `protobuf:"bytes,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
}

func (x *DeleteColumnReply) Reset() {
	*x = DeleteColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteColumnReply) ProtoMessage() {}

func (x *DeleteColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteColumnReply.ProtoReflect.Descriptor instead.
func (*DeleteColumnReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteColumnReply) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *DeleteColumnReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DeleteColumnReply) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

// CreateRows
type CreateRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     int64             `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	AfterRowId  int64             `protobuf:"varint,2,opt,name=afterRowId,proto3" json:"afterRowId,omitempty"`
	BeforeRowId int64             `protobuf:"varint,3,opt,name=beforeRowId,proto3" json:"beforeRowId,omitempty"`
	IsAsc       bool              `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`
	IsImport    bool              `protobuf:"varint,5,opt,name=isImport,proto3" json:"isImport,omitempty"`
	Rows        []*_struct.Struct `protobuf:"bytes,6,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *CreateRowsRequest) Reset() {
	*x = CreateRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRowsRequest) ProtoMessage() {}

func (x *CreateRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRowsRequest.ProtoReflect.Descriptor instead.
func (*CreateRowsRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{48}
}

func (x *CreateRowsRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CreateRowsRequest) GetAfterRowId() int64 {
	if x != nil {
		return x.AfterRowId
	}
	return 0
}

func (x *CreateRowsRequest) GetBeforeRowId() int64 {
	if x != nil {
		return x.BeforeRowId
	}
	return 0
}

func (x *CreateRowsRequest) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *CreateRowsRequest) GetIsImport() bool {
	if x != nil {
		return x.IsImport
	}
	return false
}

func (x *CreateRowsRequest) GetRows() []*_struct.Struct {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CreateRowsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64             `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Rows    []*_struct.Struct `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *CreateRowsReply) Reset() {
	*x = CreateRowsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRowsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRowsReply) ProtoMessage() {}

func (x *CreateRowsReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRowsReply.ProtoReflect.Descriptor instead.
func (*CreateRowsReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{49}
}

func (x *CreateRowsReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CreateRowsReply) GetRows() []*_struct.Struct {
	if x != nil {
		return x.Rows
	}
	return nil
}

// MoveRow
type MoveRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTableId     int64 `protobuf:"varint,1,opt,name=srcTableId,proto3" json:"srcTableId,omitempty"`
	SrcRowId       int64 `protobuf:"varint,2,opt,name=srcRowId,proto3" json:"srcRowId,omitempty"`
	DstTableId     int64 `protobuf:"varint,3,opt,name=dstTableId,proto3" json:"dstTableId,omitempty"`
	DstParentRowId int64 `protobuf:"varint,4,opt,name=dstParentRowId,proto3" json:"dstParentRowId,omitempty"`
	DstBeforeRowId int64 `protobuf:"varint,5,opt,name=dstBeforeRowId,proto3" json:"dstBeforeRowId,omitempty"`
	DstAfterRowId  int64 `protobuf:"varint,6,opt,name=dstAfterRowId,proto3" json:"dstAfterRowId,omitempty"`
}

func (x *MoveRowRequest) Reset() {
	*x = MoveRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRowRequest) ProtoMessage() {}

func (x *MoveRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRowRequest.ProtoReflect.Descriptor instead.
func (*MoveRowRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{50}
}

func (x *MoveRowRequest) GetSrcTableId() int64 {
	if x != nil {
		return x.SrcTableId
	}
	return 0
}

func (x *MoveRowRequest) GetSrcRowId() int64 {
	if x != nil {
		return x.SrcRowId
	}
	return 0
}

func (x *MoveRowRequest) GetDstTableId() int64 {
	if x != nil {
		return x.DstTableId
	}
	return 0
}

func (x *MoveRowRequest) GetDstParentRowId() int64 {
	if x != nil {
		return x.DstParentRowId
	}
	return 0
}

func (x *MoveRowRequest) GetDstBeforeRowId() int64 {
	if x != nil {
		return x.DstBeforeRowId
	}
	return 0
}

func (x *MoveRowRequest) GetDstAfterRowId() int64 {
	if x != nil {
		return x.DstAfterRowId
	}
	return 0
}

type MoveRowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTableId     int64 `protobuf:"varint,1,opt,name=srcTableId,proto3" json:"srcTableId,omitempty"`
	SrcRowId       int64 `protobuf:"varint,2,opt,name=srcRowId,proto3" json:"srcRowId,omitempty"`
	DstTableId     int64 `protobuf:"varint,3,opt,name=dstTableId,proto3" json:"dstTableId,omitempty"`
	DstParentRowId int64 `protobuf:"varint,4,opt,name=dstParentRowId,proto3" json:"dstParentRowId,omitempty"`
	DstBeforeRowId int64 `protobuf:"varint,5,opt,name=dstBeforeRowId,proto3" json:"dstBeforeRowId,omitempty"`
	DstAfterRowId  int64 `protobuf:"varint,6,opt,name=dstAfterRowId,proto3" json:"dstAfterRowId,omitempty"`
}

func (x *MoveRowReply) Reset() {
	*x = MoveRowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRowReply) ProtoMessage() {}

func (x *MoveRowReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRowReply.ProtoReflect.Descriptor instead.
func (*MoveRowReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{51}
}

func (x *MoveRowReply) GetSrcTableId() int64 {
	if x != nil {
		return x.SrcTableId
	}
	return 0
}

func (x *MoveRowReply) GetSrcRowId() int64 {
	if x != nil {
		return x.SrcRowId
	}
	return 0
}

func (x *MoveRowReply) GetDstTableId() int64 {
	if x != nil {
		return x.DstTableId
	}
	return 0
}

func (x *MoveRowReply) GetDstParentRowId() int64 {
	if x != nil {
		return x.DstParentRowId
	}
	return 0
}

func (x *MoveRowReply) GetDstBeforeRowId() int64 {
	if x != nil {
		return x.DstBeforeRowId
	}
	return 0
}

func (x *MoveRowReply) GetDstAfterRowId() int64 {
	if x != nil {
		return x.DstAfterRowId
	}
	return 0
}

// CopyRow
type CopyRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTableId int64 `protobuf:"varint,1,opt,name=srcTableId,proto3" json:"srcTableId,omitempty"`
	SrcRowId   int64 `protobuf:"varint,2,opt,name=srcRowId,proto3" json:"srcRowId,omitempty"`
	DstTableId int64 `protobuf:"varint,3,opt,name=dstTableId,proto3" json:"dstTableId,omitempty"`
}

func (x *CopyRowRequest) Reset() {
	*x = CopyRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRowRequest) ProtoMessage() {}

func (x *CopyRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRowRequest.ProtoReflect.Descriptor instead.
func (*CopyRowRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{52}
}

func (x *CopyRowRequest) GetSrcTableId() int64 {
	if x != nil {
		return x.SrcTableId
	}
	return 0
}

func (x *CopyRowRequest) GetSrcRowId() int64 {
	if x != nil {
		return x.SrcRowId
	}
	return 0
}

func (x *CopyRowRequest) GetDstTableId() int64 {
	if x != nil {
		return x.DstTableId
	}
	return 0
}

type CopyRowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTableId int64 `protobuf:"varint,1,opt,name=srcTableId,proto3" json:"srcTableId,omitempty"`
	SrcRowId   int64 `protobuf:"varint,2,opt,name=srcRowId,proto3" json:"srcRowId,omitempty"`
	DstTableId int64 `protobuf:"varint,3,opt,name=dstTableId,proto3" json:"dstTableId,omitempty"`
	DstRowId   int64 `protobuf:"varint,4,opt,name=dstRowId,proto3" json:"dstRowId,omitempty"`
}

func (x *CopyRowReply) Reset() {
	*x = CopyRowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyRowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRowReply) ProtoMessage() {}

func (x *CopyRowReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRowReply.ProtoReflect.Descriptor instead.
func (*CopyRowReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{53}
}

func (x *CopyRowReply) GetSrcTableId() int64 {
	if x != nil {
		return x.SrcTableId
	}
	return 0
}

func (x *CopyRowReply) GetSrcRowId() int64 {
	if x != nil {
		return x.SrcRowId
	}
	return 0
}

func (x *CopyRowReply) GetDstTableId() int64 {
	if x != nil {
		return x.DstTableId
	}
	return 0
}

func (x *CopyRowReply) GetDstRowId() int64 {
	if x != nil {
		return x.DstRowId
	}
	return 0
}

// DeleteRow
type DeleteRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	RowId   int64 `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
}

func (x *DeleteRowRequest) Reset() {
	*x = DeleteRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowRequest) ProtoMessage() {}

func (x *DeleteRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowRequest.ProtoReflect.Descriptor instead.
func (*DeleteRowRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteRowRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DeleteRowRequest) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

type DeleteRowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	RowId   int64 `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
}

func (x *DeleteRowReply) Reset() {
	*x = DeleteRowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowReply) ProtoMessage() {}

func (x *DeleteRowReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowReply.ProtoReflect.Descriptor instead.
func (*DeleteRowReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteRowReply) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DeleteRowReply) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

type UpdateRowRelateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId        int64   `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	RowId          int64   `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
	AddRelationIds []int64 `protobuf:"varint,3,rep,packed,name=addRelationIds,proto3" json:"addRelationIds,omitempty"`
	DelRelationIds []int64 `protobuf:"varint,4,rep,packed,name=delRelationIds,proto3" json:"delRelationIds,omitempty"`
}

func (x *UpdateRowRelateReq) Reset() {
	*x = UpdateRowRelateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowRelateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowRelateReq) ProtoMessage() {}

func (x *UpdateRowRelateReq) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowRelateReq.ProtoReflect.Descriptor instead.
func (*UpdateRowRelateReq) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateRowRelateReq) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *UpdateRowRelateReq) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

func (x *UpdateRowRelateReq) GetAddRelationIds() []int64 {
	if x != nil {
		return x.AddRelationIds
	}
	return nil
}

func (x *UpdateRowRelateReq) GetDelRelationIds() []int64 {
	if x != nil {
		return x.DelRelationIds
	}
	return nil
}

type UpdateRowRelateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowId int64 `protobuf:"varint,1,opt,name=rowId,proto3" json:"rowId,omitempty"`
}

func (x *UpdateRowRelateReply) Reset() {
	*x = UpdateRowRelateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowRelateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowRelateReply) ProtoMessage() {}

func (x *UpdateRowRelateReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowRelateReply.ProtoReflect.Descriptor instead.
func (*UpdateRowRelateReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateRowRelateReply) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

type UpdateRowBeforeAfterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           BeforeAndAfterType `protobuf:"varint,1,opt,name=type,proto3,enum=table.v1.BeforeAndAfterType" json:"type,omitempty"`
	RowId          int64              `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
	TableId        int64              `protobuf:"varint,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	AddRelationIds []int64            `protobuf:"varint,4,rep,packed,name=addRelationIds,proto3" json:"addRelationIds,omitempty"`
	DelRelationIds []int64            `protobuf:"varint,5,rep,packed,name=delRelationIds,proto3" json:"delRelationIds,omitempty"`
}

func (x *UpdateRowBeforeAfterReq) Reset() {
	*x = UpdateRowBeforeAfterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowBeforeAfterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowBeforeAfterReq) ProtoMessage() {}

func (x *UpdateRowBeforeAfterReq) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowBeforeAfterReq.ProtoReflect.Descriptor instead.
func (*UpdateRowBeforeAfterReq) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateRowBeforeAfterReq) GetType() BeforeAndAfterType {
	if x != nil {
		return x.Type
	}
	return BeforeAndAfterType_UNKNOWN_BEFORE_AND_AFTER
}

func (x *UpdateRowBeforeAfterReq) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

func (x *UpdateRowBeforeAfterReq) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *UpdateRowBeforeAfterReq) GetAddRelationIds() []int64 {
	if x != nil {
		return x.AddRelationIds
	}
	return nil
}

func (x *UpdateRowBeforeAfterReq) GetDelRelationIds() []int64 {
	if x != nil {
		return x.DelRelationIds
	}
	return nil
}

type UpdateRowBeforeAfterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowId int64 `protobuf:"varint,1,opt,name=rowId,proto3" json:"rowId,omitempty"`
}

func (x *UpdateRowBeforeAfterReply) Reset() {
	*x = UpdateRowBeforeAfterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowBeforeAfterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowBeforeAfterReply) ProtoMessage() {}

func (x *UpdateRowBeforeAfterReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowBeforeAfterReply.ProtoReflect.Descriptor instead.
func (*UpdateRowBeforeAfterReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateRowBeforeAfterReply) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

type GetRelationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	RowId   int64 `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
}

func (x *GetRelationListReq) Reset() {
	*x = GetRelationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationListReq) ProtoMessage() {}

func (x *GetRelationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationListReq.ProtoReflect.Descriptor instead.
func (*GetRelationListReq) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{60}
}

func (x *GetRelationListReq) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetRelationListReq) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

type GetRelationListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 关联列表
	RelateList []*RelationRowMeta `protobuf:"bytes,2,rep,name=relateList,proto3" json:"relateList,omitempty"`
	// 被关联列表
	BeRelatedList []*RelationRowMeta `protobuf:"bytes,3,rep,name=beRelatedList,proto3" json:"beRelatedList,omitempty"`
}

func (x *GetRelationListReply) Reset() {
	*x = GetRelationListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationListReply) ProtoMessage() {}

func (x *GetRelationListReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationListReply.ProtoReflect.Descriptor instead.
func (*GetRelationListReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{61}
}

func (x *GetRelationListReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRelationListReply) GetRelateList() []*RelationRowMeta {
	if x != nil {
		return x.RelateList
	}
	return nil
}

func (x *GetRelationListReply) GetBeRelatedList() []*RelationRowMeta {
	if x != nil {
		return x.BeRelatedList
	}
	return nil
}

type GetBeforeAfterRowListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	RowId   int64 `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
}

func (x *GetBeforeAfterRowListReq) Reset() {
	*x = GetBeforeAfterRowListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeforeAfterRowListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeforeAfterRowListReq) ProtoMessage() {}

func (x *GetBeforeAfterRowListReq) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeforeAfterRowListReq.ProtoReflect.Descriptor instead.
func (*GetBeforeAfterRowListReq) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{62}
}

func (x *GetBeforeAfterRowListReq) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetBeforeAfterRowListReq) GetRowId() int64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

type GetBeforeAfterRowListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeforeNum  int32              `protobuf:"varint,1,opt,name=beforeNum,proto3" json:"beforeNum,omitempty"`
	AfterNum   int32              `protobuf:"varint,2,opt,name=afterNum,proto3" json:"afterNum,omitempty"`
	BeforeList []*RelationRowMeta `protobuf:"bytes,3,rep,name=beforeList,proto3" json:"beforeList,omitempty"`
	AfterList  []*RelationRowMeta `protobuf:"bytes,4,rep,name=afterList,proto3" json:"afterList,omitempty"`
}

func (x *GetBeforeAfterRowListReply) Reset() {
	*x = GetBeforeAfterRowListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeforeAfterRowListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeforeAfterRowListReply) ProtoMessage() {}

func (x *GetBeforeAfterRowListReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeforeAfterRowListReply.ProtoReflect.Descriptor instead.
func (*GetBeforeAfterRowListReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{63}
}

func (x *GetBeforeAfterRowListReply) GetBeforeNum() int32 {
	if x != nil {
		return x.BeforeNum
	}
	return 0
}

func (x *GetBeforeAfterRowListReply) GetAfterNum() int32 {
	if x != nil {
		return x.AfterNum
	}
	return 0
}

func (x *GetBeforeAfterRowListReply) GetBeforeList() []*RelationRowMeta {
	if x != nil {
		return x.BeforeList
	}
	return nil
}

func (x *GetBeforeAfterRowListReply) GetAfterList() []*RelationRowMeta {
	if x != nil {
		return x.AfterList
	}
	return nil
}

type ReadOrgTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadOrgTablesRequest) Reset() {
	*x = ReadOrgTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrgTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrgTablesRequest) ProtoMessage() {}

func (x *ReadOrgTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrgTablesRequest.ProtoReflect.Descriptor instead.
func (*ReadOrgTablesRequest) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{64}
}

type ReadOrgTablesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableMeta `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ReadOrgTablesReply) Reset() {
	*x = ReadOrgTablesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrgTablesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrgTablesReply) ProtoMessage() {}

func (x *ReadOrgTablesReply) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrgTablesReply.ProtoReflect.Descriptor instead.
func (*ReadOrgTablesReply) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{65}
}

func (x *ReadOrgTablesReply) GetTables() []*TableMeta {
	if x != nil {
		return x.Tables
	}
	return nil
}

var File_table_proto protoreflect.FileDescriptor

var file_table_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x22, 0x59, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa1, 0x03, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x4e, 0x65,
	0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x4e, 0x65, 0x65,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x69, 0x6e,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x1a, 0x08, 0x30, 0x00, 0x30, 0x02, 0x30, 0x03, 0x30,
	0x04, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x55,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a,
	0x11, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x08, 0x64, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x63,
	0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x17, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6f, 0x6c,
	0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x42, 0x0a,
	0x14, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x56, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x02, 0x28, 0x01, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x5c, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x32, 0x0a, 0x11, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x61, 0x70, 0x70, 0x49, 0x64, 0x73,
	0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xbb,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x46, 0x0a, 0x15,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x4d, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x49, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x3a, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x18, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x0a, 0x15,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x16, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xdd, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x43,
	0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a,
	0x0f, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x6d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22,
	0x5f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x22, 0xce, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0x58, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0e,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x73,
	0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x49, 0x64,
	0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x77, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x40,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x72, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x41, 0x6e, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f,
	0x77, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x32, 0xbb, 0x1e, 0x0a, 0x05,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x9a,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x62, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x61, 0x64, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x21, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22,
	0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72,
	0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x24, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x1e, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f,
	0x6f, 0x72, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0e, 0x49,
	0x6e, 0x69, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x69,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a,
	0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x6f,
	0x72, 0x67, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x20, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x3a, 0x01, 0x2a, 0x12,
	0x6e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x9b, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x07, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x12,
	0x18, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x5a, 0x0a, 0x07, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x82, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x21,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b,
	0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x7a,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x7b, 0x72, 0x6f, 0x77, 0x49, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2f, 0x7b, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x65, 0x61, 0x2e, 0x62, 0x6a, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x4c, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_table_proto_rawDescOnce sync.Once
	file_table_proto_rawDescData = file_table_proto_rawDesc
)

func file_table_proto_rawDescGZIP() []byte {
	file_table_proto_rawDescOnce.Do(func() {
		file_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_table_proto_rawDescData)
	})
	return file_table_proto_rawDescData
}

var file_table_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_table_proto_goTypes = []interface{}{
	(*CreateSummeryTableRequest)(nil),      // 0: table.v1.CreateSummeryTableRequest
	(*CreateSummeryTableReply)(nil),        // 1: table.v1.CreateSummeryTableReply
	(*CreateMultiSummeryTableRequest)(nil), // 2: table.v1.CreateMultiSummeryTableRequest
	(*SummeryTableRequest)(nil),            // 3: table.v1.SummeryTableRequest
	(*CreateMultiSummeryTableReply)(nil),   // 4: table.v1.CreateMultiSummeryTableReply
	(*CreateMultiSummeryTableData)(nil),    // 5: table.v1.CreateMultiSummeryTableData
	(*CreateTableRequest)(nil),             // 6: table.v1.CreateTableRequest
	(*CreateTableReply)(nil),               // 7: table.v1.CreateTableReply
	(*RenameTableRequest)(nil),             // 8: table.v1.RenameTableRequest
	(*RenameTableReply)(nil),               // 9: table.v1.RenameTableReply
	(*CopyTablesRequest)(nil),              // 10: table.v1.CopyTablesRequest
	(*CopyTablesReply)(nil),                // 11: table.v1.CopyTablesReply
	(*DeleteTableRequest)(nil),             // 12: table.v1.DeleteTableRequest
	(*DeleteTableReply)(nil),               // 13: table.v1.DeleteTableReply
	(*SetAutoScheduleRequest)(nil),         // 14: table.v1.SetAutoScheduleRequest
	(*SetAutoScheduleReply)(nil),           // 15: table.v1.SetAutoScheduleReply
	(*ReadTablesRequest)(nil),              // 16: table.v1.ReadTablesRequest
	(*ReadTablesReply)(nil),                // 17: table.v1.ReadTablesReply
	(*ReadTablesByAppsRequest)(nil),        // 18: table.v1.ReadTablesByAppsRequest
	(*ReadTablesByAppsReply)(nil),          // 19: table.v1.ReadTablesByAppsReply
	(*ReadTableSchemasRequest)(nil),        // 20: table.v1.ReadTableSchemasRequest
	(*ReadTableSchemasReply)(nil),          // 21: table.v1.ReadTableSchemasReply
	(*ReadTableSchemasByAppIdRequest)(nil), // 22: table.v1.ReadTableSchemasByAppIdRequest
	(*ReadTableSchemasByAppIdReply)(nil),   // 23: table.v1.ReadTableSchemasByAppIdReply
	(*ReadSummeryTableIdRequest)(nil),      // 24: table.v1.ReadSummeryTableIdRequest
	(*ReadSummeryTableIdReply)(nil),        // 25: table.v1.ReadSummeryTableIdReply
	(*ReadTableRequest)(nil),               // 26: table.v1.ReadTableRequest
	(*ReadTableReply)(nil),                 // 27: table.v1.ReadTableReply
	(*ReadOrgTableSchemasRequest)(nil),     // 28: table.v1.ReadOrgTableSchemasRequest
	(*ReadOrgTableSchemasReply)(nil),       // 29: table.v1.ReadOrgTableSchemasReply
	(*InitOrgColumnsRequest)(nil),          // 30: table.v1.InitOrgColumnsRequest
	(*InitOrgColumnsReply)(nil),            // 31: table.v1.InitOrgColumnsReply
	(*ReadOrgColumnsRequest)(nil),          // 32: table.v1.ReadOrgColumnsRequest
	(*ReadOrgColumnsReply)(nil),            // 33: table.v1.ReadOrgColumnsReply
	(*CreateOrgColumnRequest)(nil),         // 34: table.v1.CreateOrgColumnRequest
	(*CreateOrgColumnReply)(nil),           // 35: table.v1.CreateOrgColumnReply
	(*DeleteOrgColumnRequest)(nil),         // 36: table.v1.DeleteOrgColumnRequest
	(*DeleteOrgColumnReply)(nil),           // 37: table.v1.DeleteOrgColumnReply
	(*CreateColumnRequest)(nil),            // 38: table.v1.CreateColumnRequest
	(*CreateColumnReply)(nil),              // 39: table.v1.CreateColumnReply
	(*CopyColumnRequest)(nil),              // 40: table.v1.CopyColumnRequest
	(*CopyColumnReply)(nil),                // 41: table.v1.CopyColumnReply
	(*UpdateColumnRequest)(nil),            // 42: table.v1.UpdateColumnRequest
	(*UpdateColumnReply)(nil),              // 43: table.v1.UpdateColumnReply
	(*UpdateColumnDescriptionRequest)(nil), // 44: table.v1.UpdateColumnDescriptionRequest
	(*UpdateColumnDescriptionReply)(nil),   // 45: table.v1.UpdateColumnDescriptionReply
	(*DeleteColumnRequest)(nil),            // 46: table.v1.DeleteColumnRequest
	(*DeleteColumnReply)(nil),              // 47: table.v1.DeleteColumnReply
	(*CreateRowsRequest)(nil),              // 48: table.v1.CreateRowsRequest
	(*CreateRowsReply)(nil),                // 49: table.v1.CreateRowsReply
	(*MoveRowRequest)(nil),                 // 50: table.v1.MoveRowRequest
	(*MoveRowReply)(nil),                   // 51: table.v1.MoveRowReply
	(*CopyRowRequest)(nil),                 // 52: table.v1.CopyRowRequest
	(*CopyRowReply)(nil),                   // 53: table.v1.CopyRowReply
	(*DeleteRowRequest)(nil),               // 54: table.v1.DeleteRowRequest
	(*DeleteRowReply)(nil),                 // 55: table.v1.DeleteRowReply
	(*UpdateRowRelateReq)(nil),             // 56: table.v1.UpdateRowRelateReq
	(*UpdateRowRelateReply)(nil),           // 57: table.v1.UpdateRowRelateReply
	(*UpdateRowBeforeAfterReq)(nil),        // 58: table.v1.UpdateRowBeforeAfterReq
	(*UpdateRowBeforeAfterReply)(nil),      // 59: table.v1.UpdateRowBeforeAfterReply
	(*GetRelationListReq)(nil),             // 60: table.v1.GetRelationListReq
	(*GetRelationListReply)(nil),           // 61: table.v1.GetRelationListReply
	(*GetBeforeAfterRowListReq)(nil),       // 62: table.v1.GetBeforeAfterRowListReq
	(*GetBeforeAfterRowListReply)(nil),     // 63: table.v1.GetBeforeAfterRowListReply
	(*ReadOrgTablesRequest)(nil),           // 64: table.v1.ReadOrgTablesRequest
	(*ReadOrgTablesReply)(nil),             // 65: table.v1.ReadOrgTablesReply
	nil,                                    // 66: table.v1.CopyTablesRequest.OldToNewPermissionEntry
	nil,                                    // 67: table.v1.CopyTablesReply.OldToNewTableIdEntry
	(*Column)(nil),                         // 68: table.v1.Column
	(TableType)(0),                         // 69: table.v1.TableType
	(*TableSchema)(nil),                    // 70: table.v1.TableSchema
	(*TableMeta)(nil),                      // 71: table.v1.TableMeta
	(*AppTables)(nil),                      // 72: table.v1.AppTables
	(*_struct.Struct)(nil),                 // 73: google.protobuf.Struct
	(BeforeAndAfterType)(0),                // 74: table.v1.BeforeAndAfterType
	(*RelationRowMeta)(nil),                // 75: table.v1.RelationRowMeta
}
var file_table_proto_depIdxs = []int32{
	68, // 0: table.v1.CreateSummeryTableRequest.columns:type_name -> table.v1.Column
	3,  // 1: table.v1.CreateMultiSummeryTableRequest.list:type_name -> table.v1.SummeryTableRequest
	69, // 2: table.v1.SummeryTableRequest.tableType:type_name -> table.v1.TableType
	68, // 3: table.v1.SummeryTableRequest.columns:type_name -> table.v1.Column
	5,  // 4: table.v1.CreateMultiSummeryTableReply.list:type_name -> table.v1.CreateMultiSummeryTableData
	68, // 5: table.v1.CreateTableRequest.columns:type_name -> table.v1.Column
	70, // 6: table.v1.CreateTableReply.table:type_name -> table.v1.TableSchema
	66, // 7: table.v1.CopyTablesRequest.oldToNewPermission:type_name -> table.v1.CopyTablesRequest.OldToNewPermissionEntry
	70, // 8: table.v1.CopyTablesReply.tables:type_name -> table.v1.TableSchema
	67, // 9: table.v1.CopyTablesReply.oldToNewTableId:type_name -> table.v1.CopyTablesReply.OldToNewTableIdEntry
	71, // 10: table.v1.ReadTablesReply.tables:type_name -> table.v1.TableMeta
	72, // 11: table.v1.ReadTablesByAppsReply.appsTables:type_name -> table.v1.AppTables
	70, // 12: table.v1.ReadTableSchemasReply.tables:type_name -> table.v1.TableSchema
	70, // 13: table.v1.ReadTableSchemasByAppIdReply.tables:type_name -> table.v1.TableSchema
	71, // 14: table.v1.ReadTableReply.table:type_name -> table.v1.TableMeta
	70, // 15: table.v1.ReadOrgTableSchemasReply.tables:type_name -> table.v1.TableSchema
	68, // 16: table.v1.InitOrgColumnsRequest.columns:type_name -> table.v1.Column
	68, // 17: table.v1.ReadOrgColumnsReply.columns:type_name -> table.v1.Column
	68, // 18: table.v1.CreateOrgColumnRequest.column:type_name -> table.v1.Column
	68, // 19: table.v1.CreateColumnRequest.column:type_name -> table.v1.Column
	68, // 20: table.v1.CreateColumnReply.column:type_name -> table.v1.Column
	68, // 21: table.v1.UpdateColumnRequest.column:type_name -> table.v1.Column
	68, // 22: table.v1.UpdateColumnReply.column:type_name -> table.v1.Column
	73, // 23: table.v1.CreateRowsRequest.rows:type_name -> google.protobuf.Struct
	73, // 24: table.v1.CreateRowsReply.rows:type_name -> google.protobuf.Struct
	74, // 25: table.v1.UpdateRowBeforeAfterReq.type:type_name -> table.v1.BeforeAndAfterType
	75, // 26: table.v1.GetRelationListReply.relateList:type_name -> table.v1.RelationRowMeta
	75, // 27: table.v1.GetRelationListReply.beRelatedList:type_name -> table.v1.RelationRowMeta
	75, // 28: table.v1.GetBeforeAfterRowListReply.beforeList:type_name -> table.v1.RelationRowMeta
	75, // 29: table.v1.GetBeforeAfterRowListReply.afterList:type_name -> table.v1.RelationRowMeta
	71, // 30: table.v1.ReadOrgTablesReply.tables:type_name -> table.v1.TableMeta
	0,  // 31: table.v1.Table.CreateSummeryTable:input_type -> table.v1.CreateSummeryTableRequest
	2,  // 32: table.v1.Table.CreateMultiSummeryTable:input_type -> table.v1.CreateMultiSummeryTableRequest
	6,  // 33: table.v1.Table.CreateTable:input_type -> table.v1.CreateTableRequest
	8,  // 34: table.v1.Table.RenameTable:input_type -> table.v1.RenameTableRequest
	10, // 35: table.v1.Table.CopyTables:input_type -> table.v1.CopyTablesRequest
	12, // 36: table.v1.Table.DeleteTable:input_type -> table.v1.DeleteTableRequest
	14, // 37: table.v1.Table.SetAutoSchedule:input_type -> table.v1.SetAutoScheduleRequest
	16, // 38: table.v1.Table.ReadTables:input_type -> table.v1.ReadTablesRequest
	26, // 39: table.v1.Table.ReadTable:input_type -> table.v1.ReadTableRequest
	18, // 40: table.v1.Table.ReadTablesByApps:input_type -> table.v1.ReadTablesByAppsRequest
	64, // 41: table.v1.Table.ReadOrgTables:input_type -> table.v1.ReadOrgTablesRequest
	20, // 42: table.v1.Table.ReadTableSchemas:input_type -> table.v1.ReadTableSchemasRequest
	22, // 43: table.v1.Table.ReadTableSchemasByAppId:input_type -> table.v1.ReadTableSchemasByAppIdRequest
	28, // 44: table.v1.Table.ReadOrgTableSchemas:input_type -> table.v1.ReadOrgTableSchemasRequest
	24, // 45: table.v1.Table.ReadSummeryTableId:input_type -> table.v1.ReadSummeryTableIdRequest
	30, // 46: table.v1.Table.InitOrgColumns:input_type -> table.v1.InitOrgColumnsRequest
	32, // 47: table.v1.Table.ReadOrgColumns:input_type -> table.v1.ReadOrgColumnsRequest
	34, // 48: table.v1.Table.CreateOrgColumn:input_type -> table.v1.CreateOrgColumnRequest
	36, // 49: table.v1.Table.DeleteOrgColumn:input_type -> table.v1.DeleteOrgColumnRequest
	38, // 50: table.v1.Table.CreateColumn:input_type -> table.v1.CreateColumnRequest
	40, // 51: table.v1.Table.CopyColumn:input_type -> table.v1.CopyColumnRequest
	42, // 52: table.v1.Table.UpdateColumn:input_type -> table.v1.UpdateColumnRequest
	44, // 53: table.v1.Table.UpdateColumnDescription:input_type -> table.v1.UpdateColumnDescriptionRequest
	46, // 54: table.v1.Table.DeleteColumn:input_type -> table.v1.DeleteColumnRequest
	48, // 55: table.v1.Table.CreateRows:input_type -> table.v1.CreateRowsRequest
	50, // 56: table.v1.Table.MoveRow:input_type -> table.v1.MoveRowRequest
	52, // 57: table.v1.Table.CopyRow:input_type -> table.v1.CopyRowRequest
	54, // 58: table.v1.Table.DeleteRow:input_type -> table.v1.DeleteRowRequest
	56, // 59: table.v1.Table.UpdateRowRelate:input_type -> table.v1.UpdateRowRelateReq
	58, // 60: table.v1.Table.UpdateRowBeforeAfter:input_type -> table.v1.UpdateRowBeforeAfterReq
	60, // 61: table.v1.Table.GetRowRelationList:input_type -> table.v1.GetRelationListReq
	62, // 62: table.v1.Table.GetBeforeAfterRowList:input_type -> table.v1.GetBeforeAfterRowListReq
	1,  // 63: table.v1.Table.CreateSummeryTable:output_type -> table.v1.CreateSummeryTableReply
	4,  // 64: table.v1.Table.CreateMultiSummeryTable:output_type -> table.v1.CreateMultiSummeryTableReply
	7,  // 65: table.v1.Table.CreateTable:output_type -> table.v1.CreateTableReply
	9,  // 66: table.v1.Table.RenameTable:output_type -> table.v1.RenameTableReply
	11, // 67: table.v1.Table.CopyTables:output_type -> table.v1.CopyTablesReply
	13, // 68: table.v1.Table.DeleteTable:output_type -> table.v1.DeleteTableReply
	15, // 69: table.v1.Table.SetAutoSchedule:output_type -> table.v1.SetAutoScheduleReply
	17, // 70: table.v1.Table.ReadTables:output_type -> table.v1.ReadTablesReply
	27, // 71: table.v1.Table.ReadTable:output_type -> table.v1.ReadTableReply
	19, // 72: table.v1.Table.ReadTablesByApps:output_type -> table.v1.ReadTablesByAppsReply
	65, // 73: table.v1.Table.ReadOrgTables:output_type -> table.v1.ReadOrgTablesReply
	21, // 74: table.v1.Table.ReadTableSchemas:output_type -> table.v1.ReadTableSchemasReply
	23, // 75: table.v1.Table.ReadTableSchemasByAppId:output_type -> table.v1.ReadTableSchemasByAppIdReply
	29, // 76: table.v1.Table.ReadOrgTableSchemas:output_type -> table.v1.ReadOrgTableSchemasReply
	25, // 77: table.v1.Table.ReadSummeryTableId:output_type -> table.v1.ReadSummeryTableIdReply
	31, // 78: table.v1.Table.InitOrgColumns:output_type -> table.v1.InitOrgColumnsReply
	33, // 79: table.v1.Table.ReadOrgColumns:output_type -> table.v1.ReadOrgColumnsReply
	35, // 80: table.v1.Table.CreateOrgColumn:output_type -> table.v1.CreateOrgColumnReply
	37, // 81: table.v1.Table.DeleteOrgColumn:output_type -> table.v1.DeleteOrgColumnReply
	39, // 82: table.v1.Table.CreateColumn:output_type -> table.v1.CreateColumnReply
	41, // 83: table.v1.Table.CopyColumn:output_type -> table.v1.CopyColumnReply
	43, // 84: table.v1.Table.UpdateColumn:output_type -> table.v1.UpdateColumnReply
	45, // 85: table.v1.Table.UpdateColumnDescription:output_type -> table.v1.UpdateColumnDescriptionReply
	47, // 86: table.v1.Table.DeleteColumn:output_type -> table.v1.DeleteColumnReply
	49, // 87: table.v1.Table.CreateRows:output_type -> table.v1.CreateRowsReply
	51, // 88: table.v1.Table.MoveRow:output_type -> table.v1.MoveRowReply
	53, // 89: table.v1.Table.CopyRow:output_type -> table.v1.CopyRowReply
	55, // 90: table.v1.Table.DeleteRow:output_type -> table.v1.DeleteRowReply
	57, // 91: table.v1.Table.UpdateRowRelate:output_type -> table.v1.UpdateRowRelateReply
	59, // 92: table.v1.Table.UpdateRowBeforeAfter:output_type -> table.v1.UpdateRowBeforeAfterReply
	61, // 93: table.v1.Table.GetRowRelationList:output_type -> table.v1.GetRelationListReply
	63, // 94: table.v1.Table.GetBeforeAfterRowList:output_type -> table.v1.GetBeforeAfterRowListReply
	63, // [63:95] is the sub-list for method output_type
	31, // [31:63] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_table_proto_init() }
func file_table_proto_init() {
	if File_table_proto != nil {
		return
	}
	file_table_model_proto_init()
	file_table_model_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSummeryTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSummeryTableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultiSummeryTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummeryTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultiSummeryTableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultiSummeryTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTablesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAutoScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAutoScheduleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTablesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTablesByAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTablesByAppsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableSchemasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableSchemasByAppIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableSchemasByAppIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSummeryTableIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSummeryTableIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrgTableSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrgTableSchemasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitOrgColumnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitOrgColumnsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrgColumnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrgColumnsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumnDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumnDescriptionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRowsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyRowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowRelateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowRelateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowBeforeAfterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowBeforeAfterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBeforeAfterRowListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBeforeAfterRowListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrgTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrgTablesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_table_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_table_proto_goTypes,
		DependencyIndexes: file_table_proto_depIdxs,
		MessageInfos:      file_table_proto_msgTypes,
	}.Build()
	File_table_proto = out.File
	file_table_proto_rawDesc = nil
	file_table_proto_goTypes = nil
	file_table_proto_depIdxs = nil
}
