// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: document.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRequestMultiError, or nil if none found.
func (m *GetDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := GetDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDocumentRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRequestMultiError is an error wrapping multiple validation errors
// returned by GetDocumentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRequestMultiError) AllErrors() []error { return m }

// GetDocumentRequestValidationError is the validation error returned by
// GetDocumentRequest.Validate if the designated constraints aren't met.
type GetDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRequestValidationError) ErrorName() string {
	return "GetDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRequestValidationError{}

// Validate checks the field values on GetDocumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentReplyMultiError, or nil if none found.
func (m *GetDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentReplyValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentReplyMultiError(errors)
	}

	return nil
}

// GetDocumentReplyMultiError is an error wrapping multiple validation errors
// returned by GetDocumentReply.ValidateAll() if the designated constraints
// aren't met.
type GetDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReplyMultiError) AllErrors() []error { return m }

// GetDocumentReplyValidationError is the validation error returned by
// GetDocumentReply.Validate if the designated constraints aren't met.
type GetDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReplyValidationError) ErrorName() string { return "GetDocumentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReplyValidationError{}

// Validate checks the field values on ListTreeDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTreeDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTreeDocumentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTreeDocumentRequestMultiError, or nil if none found.
func (m *ListTreeDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTreeDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IndexDocumentId

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := ListTreeDocumentRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTreeDocumentRequestMultiError(errors)
	}

	return nil
}

// ListTreeDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by ListTreeDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTreeDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTreeDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTreeDocumentRequestMultiError) AllErrors() []error { return m }

// ListTreeDocumentRequestValidationError is the validation error returned by
// ListTreeDocumentRequest.Validate if the designated constraints aren't met.
type ListTreeDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTreeDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTreeDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTreeDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTreeDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTreeDocumentRequestValidationError) ErrorName() string {
	return "ListTreeDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTreeDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTreeDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTreeDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTreeDocumentRequestValidationError{}

// Validate checks the field values on ListTreeDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTreeDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTreeDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTreeDocumentReplyMultiError, or nil if none found.
func (m *ListTreeDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTreeDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTreeDocumentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTreeDocumentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTreeDocumentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTreeDocumentReplyValidationError{
						field:  fmt.Sprintf("TopList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTreeDocumentReplyValidationError{
						field:  fmt.Sprintf("TopList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTreeDocumentReplyValidationError{
					field:  fmt.Sprintf("TopList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTreeDocumentReplyMultiError(errors)
	}

	return nil
}

// ListTreeDocumentReplyMultiError is an error wrapping multiple validation
// errors returned by ListTreeDocumentReply.ValidateAll() if the designated
// constraints aren't met.
type ListTreeDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTreeDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTreeDocumentReplyMultiError) AllErrors() []error { return m }

// ListTreeDocumentReplyValidationError is the validation error returned by
// ListTreeDocumentReply.Validate if the designated constraints aren't met.
type ListTreeDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTreeDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTreeDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTreeDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTreeDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTreeDocumentReplyValidationError) ErrorName() string {
	return "ListTreeDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTreeDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTreeDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTreeDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTreeDocumentReplyValidationError{}

// Validate checks the field values on ListChildDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChildDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChildDocumentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChildDocumentRequestMultiError, or nil if none found.
func (m *ListChildDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChildDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := ListChildDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListChildDocumentRequestMultiError(errors)
	}

	return nil
}

// ListChildDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by ListChildDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListChildDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChildDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChildDocumentRequestMultiError) AllErrors() []error { return m }

// ListChildDocumentRequestValidationError is the validation error returned by
// ListChildDocumentRequest.Validate if the designated constraints aren't met.
type ListChildDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChildDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChildDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChildDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChildDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChildDocumentRequestValidationError) ErrorName() string {
	return "ListChildDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChildDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChildDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChildDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChildDocumentRequestValidationError{}

// Validate checks the field values on ListChildDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChildDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChildDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChildDocumentReplyMultiError, or nil if none found.
func (m *ListChildDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChildDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChildDocumentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChildDocumentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChildDocumentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChildDocumentReplyMultiError(errors)
	}

	return nil
}

// ListChildDocumentReplyMultiError is an error wrapping multiple validation
// errors returned by ListChildDocumentReply.ValidateAll() if the designated
// constraints aren't met.
type ListChildDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChildDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChildDocumentReplyMultiError) AllErrors() []error { return m }

// ListChildDocumentReplyValidationError is the validation error returned by
// ListChildDocumentReply.Validate if the designated constraints aren't met.
type ListChildDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChildDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChildDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChildDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChildDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChildDocumentReplyValidationError) ErrorName() string {
	return "ListChildDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListChildDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChildDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChildDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChildDocumentReplyValidationError{}

// Validate checks the field values on SearchDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchDocumentRequestMultiError, or nil if none found.
func (m *SearchDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := SearchDocumentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := SearchDocumentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() <= 0 {
		err := SearchDocumentRequestValidationError{
			field:  "Size",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SpaceId

	if len(errors) > 0 {
		return SearchDocumentRequestMultiError(errors)
	}

	return nil
}

// SearchDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by SearchDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDocumentRequestMultiError) AllErrors() []error { return m }

// SearchDocumentRequestValidationError is the validation error returned by
// SearchDocumentRequest.Validate if the designated constraints aren't met.
type SearchDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDocumentRequestValidationError) ErrorName() string {
	return "SearchDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDocumentRequestValidationError{}

// Validate checks the field values on SearchDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchDocumentReplyMultiError, or nil if none found.
func (m *SearchDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchDocumentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchDocumentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchDocumentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchDocumentReplyMultiError(errors)
	}

	return nil
}

// SearchDocumentReplyMultiError is an error wrapping multiple validation
// errors returned by SearchDocumentReply.ValidateAll() if the designated
// constraints aren't met.
type SearchDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDocumentReplyMultiError) AllErrors() []error { return m }

// SearchDocumentReplyValidationError is the validation error returned by
// SearchDocumentReply.Validate if the designated constraints aren't met.
type SearchDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDocumentReplyValidationError) ErrorName() string {
	return "SearchDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDocumentReplyValidationError{}

// Validate checks the field values on SaveDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveDocumentRequestMultiError, or nil if none found.
func (m *SaveDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for Content

	// no validation rules for Title

	// no validation rules for ParentId

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := SaveDocumentRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SaveDocumentRequestMultiError(errors)
	}

	return nil
}

// SaveDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by SaveDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDocumentRequestMultiError) AllErrors() []error { return m }

// SaveDocumentRequestValidationError is the validation error returned by
// SaveDocumentRequest.Validate if the designated constraints aren't met.
type SaveDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDocumentRequestValidationError) ErrorName() string {
	return "SaveDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDocumentRequestValidationError{}

// Validate checks the field values on SaveDocumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveDocumentReplyMultiError, or nil if none found.
func (m *SaveDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return SaveDocumentReplyMultiError(errors)
	}

	return nil
}

// SaveDocumentReplyMultiError is an error wrapping multiple validation errors
// returned by SaveDocumentReply.ValidateAll() if the designated constraints
// aren't met.
type SaveDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDocumentReplyMultiError) AllErrors() []error { return m }

// SaveDocumentReplyValidationError is the validation error returned by
// SaveDocumentReply.Validate if the designated constraints aren't met.
type SaveDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDocumentReplyValidationError) ErrorName() string {
	return "SaveDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDocumentReplyValidationError{}

// Validate checks the field values on DeleteDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentRequestMultiError, or nil if none found.
func (m *DeleteDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := DeleteDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithChild

	if len(errors) > 0 {
		return DeleteDocumentRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentRequestValidationError is the validation error returned by
// DeleteDocumentRequest.Validate if the designated constraints aren't met.
type DeleteDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentRequestValidationError) ErrorName() string {
	return "DeleteDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentRequestValidationError{}

// Validate checks the field values on DeleteDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentReplyMultiError, or nil if none found.
func (m *DeleteDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := DeleteDocumentReplyValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDocumentReplyMultiError(errors)
	}

	return nil
}

// DeleteDocumentReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentReplyMultiError) AllErrors() []error { return m }

// DeleteDocumentReplyValidationError is the validation error returned by
// DeleteDocumentReply.Validate if the designated constraints aren't met.
type DeleteDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentReplyValidationError) ErrorName() string {
	return "DeleteDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentReplyValidationError{}

// Validate checks the field values on CopyDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyDocumentRequestMultiError, or nil if none found.
func (m *CopyDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := CopyDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CopyDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if len(errors) > 0 {
		return CopyDocumentRequestMultiError(errors)
	}

	return nil
}

// CopyDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by CopyDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type CopyDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyDocumentRequestMultiError) AllErrors() []error { return m }

// CopyDocumentRequestValidationError is the validation error returned by
// CopyDocumentRequest.Validate if the designated constraints aren't met.
type CopyDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyDocumentRequestValidationError) ErrorName() string {
	return "CopyDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CopyDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyDocumentRequestValidationError{}

// Validate checks the field values on CopyDocumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyDocumentReplyMultiError, or nil if none found.
func (m *CopyDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return CopyDocumentReplyMultiError(errors)
	}

	return nil
}

// CopyDocumentReplyMultiError is an error wrapping multiple validation errors
// returned by CopyDocumentReply.ValidateAll() if the designated constraints
// aren't met.
type CopyDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyDocumentReplyMultiError) AllErrors() []error { return m }

// CopyDocumentReplyValidationError is the validation error returned by
// CopyDocumentReply.Validate if the designated constraints aren't met.
type CopyDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyDocumentReplyValidationError) ErrorName() string {
	return "CopyDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CopyDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyDocumentReplyValidationError{}

// Validate checks the field values on MoveDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MoveDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveDocumentRequestMultiError, or nil if none found.
func (m *MoveDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := MoveDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	// no validation rules for BeforeId

	if len(errors) > 0 {
		return MoveDocumentRequestMultiError(errors)
	}

	return nil
}

// MoveDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by MoveDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type MoveDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveDocumentRequestMultiError) AllErrors() []error { return m }

// MoveDocumentRequestValidationError is the validation error returned by
// MoveDocumentRequest.Validate if the designated constraints aren't met.
type MoveDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveDocumentRequestValidationError) ErrorName() string {
	return "MoveDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MoveDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveDocumentRequestValidationError{}

// Validate checks the field values on MoveDocumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MoveDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveDocumentReplyMultiError, or nil if none found.
func (m *MoveDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return MoveDocumentReplyMultiError(errors)
	}

	return nil
}

// MoveDocumentReplyMultiError is an error wrapping multiple validation errors
// returned by MoveDocumentReply.ValidateAll() if the designated constraints
// aren't met.
type MoveDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveDocumentReplyMultiError) AllErrors() []error { return m }

// MoveDocumentReplyValidationError is the validation error returned by
// MoveDocumentReply.Validate if the designated constraints aren't met.
type MoveDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveDocumentReplyValidationError) ErrorName() string {
	return "MoveDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MoveDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveDocumentReplyValidationError{}
