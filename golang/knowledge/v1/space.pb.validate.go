// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: space.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceRequestMultiError, or nil if none found.
func (m *CreateSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Cover

	if len(errors) > 0 {
		return CreateSpaceRequestMultiError(errors)
	}

	return nil
}

// CreateSpaceRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceRequestMultiError) AllErrors() []error { return m }

// CreateSpaceRequestValidationError is the validation error returned by
// CreateSpaceRequest.Validate if the designated constraints aren't met.
type CreateSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceRequestValidationError) ErrorName() string {
	return "CreateSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceRequestValidationError{}

// Validate checks the field values on CreateSpaceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceReplyMultiError, or nil if none found.
func (m *CreateSpaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSpaceReplyMultiError(errors)
	}

	return nil
}

// CreateSpaceReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceReplyMultiError) AllErrors() []error { return m }

// CreateSpaceReplyValidationError is the validation error returned by
// CreateSpaceReply.Validate if the designated constraints aren't met.
type CreateSpaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceReplyValidationError) ErrorName() string { return "CreateSpaceReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateSpaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceReplyValidationError{}

// Validate checks the field values on ListSpaceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceRequestMultiError, or nil if none found.
func (m *ListSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSpaceRequestMultiError(errors)
	}

	return nil
}

// ListSpaceRequestMultiError is an error wrapping multiple validation errors
// returned by ListSpaceRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceRequestMultiError) AllErrors() []error { return m }

// ListSpaceRequestValidationError is the validation error returned by
// ListSpaceRequest.Validate if the designated constraints aren't met.
type ListSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceRequestValidationError) ErrorName() string { return "ListSpaceRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceRequestValidationError{}

// Validate checks the field values on ListSpaceReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSpaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSpaceReplyMultiError,
// or nil if none found.
func (m *ListSpaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpaceReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpaceReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpaceReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStarList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpaceReplyValidationError{
						field:  fmt.Sprintf("StarList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpaceReplyValidationError{
						field:  fmt.Sprintf("StarList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpaceReplyValidationError{
					field:  fmt.Sprintf("StarList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSpaceReplyMultiError(errors)
	}

	return nil
}

// ListSpaceReplyMultiError is an error wrapping multiple validation errors
// returned by ListSpaceReply.ValidateAll() if the designated constraints
// aren't met.
type ListSpaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceReplyMultiError) AllErrors() []error { return m }

// ListSpaceReplyValidationError is the validation error returned by
// ListSpaceReply.Validate if the designated constraints aren't met.
type ListSpaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceReplyValidationError) ErrorName() string { return "ListSpaceReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSpaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceReplyValidationError{}
