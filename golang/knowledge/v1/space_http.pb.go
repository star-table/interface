// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SpaceHTTPServer interface {
	CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceReply, error)
	ListSpace(context.Context, *ListSpaceRequest) (*ListSpaceReply, error)
}

func RegisterSpaceHTTPServer(s *http.Server, srv SpaceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/space/create", _Space_CreateSpace0_HTTP_Handler(srv))
	r.POST("/v1/space/list", _Space_ListSpace0_HTTP_Handler(srv))
}

func _Space_CreateSpace0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Space/CreateSpace")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSpace(ctx, req.(*CreateSpaceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSpaceReply)
		return ctx.Result(200, reply)
	}
}

func _Space_ListSpace0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Space/ListSpace")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSpace(ctx, req.(*ListSpaceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSpaceReply)
		return ctx.Result(200, reply)
	}
}

type SpaceHTTPClient interface {
	CreateSpace(ctx context.Context, req *CreateSpaceRequest, opts ...http.CallOption) (rsp *CreateSpaceReply, err error)
	ListSpace(ctx context.Context, req *ListSpaceRequest, opts ...http.CallOption) (rsp *ListSpaceReply, err error)
}

type SpaceHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceHTTPClient(client *http.Client) SpaceHTTPClient {
	return &SpaceHTTPClientImpl{client}
}

func (c *SpaceHTTPClientImpl) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...http.CallOption) (*CreateSpaceReply, error) {
	var out CreateSpaceReply
	pattern := "/v1/space/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Space/CreateSpace"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) ListSpace(ctx context.Context, in *ListSpaceRequest, opts ...http.CallOption) (*ListSpaceReply, error) {
	var out ListSpaceReply
	pattern := "/v1/space/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Space/ListSpace"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
