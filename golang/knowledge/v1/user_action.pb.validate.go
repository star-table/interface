// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_action.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LikeDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeDocumentRequestMultiError, or nil if none found.
func (m *LikeDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := LikeDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsLike

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := LikeDocumentRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LikeDocumentRequestMultiError(errors)
	}

	return nil
}

// LikeDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by LikeDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type LikeDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeDocumentRequestMultiError) AllErrors() []error { return m }

// LikeDocumentRequestValidationError is the validation error returned by
// LikeDocumentRequest.Validate if the designated constraints aren't met.
type LikeDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDocumentRequestValidationError) ErrorName() string {
	return "LikeDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDocumentRequestValidationError{}

// Validate checks the field values on LikeDocumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeDocumentReplyMultiError, or nil if none found.
func (m *LikeDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := LikeDocumentReplyValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsLike

	if len(errors) > 0 {
		return LikeDocumentReplyMultiError(errors)
	}

	return nil
}

// LikeDocumentReplyMultiError is an error wrapping multiple validation errors
// returned by LikeDocumentReply.ValidateAll() if the designated constraints
// aren't met.
type LikeDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeDocumentReplyMultiError) AllErrors() []error { return m }

// LikeDocumentReplyValidationError is the validation error returned by
// LikeDocumentReply.Validate if the designated constraints aren't met.
type LikeDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDocumentReplyValidationError) ErrorName() string {
	return "LikeDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LikeDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDocumentReplyValidationError{}

// Validate checks the field values on ListDocumentLikeUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentLikeUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentLikeUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentLikeUserRequestMultiError, or nil if none found.
func (m *ListDocumentLikeUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentLikeUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := ListDocumentLikeUserRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := ListDocumentLikeUserRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDocumentLikeUserRequestMultiError(errors)
	}

	return nil
}

// ListDocumentLikeUserRequestMultiError is an error wrapping multiple
// validation errors returned by ListDocumentLikeUserRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDocumentLikeUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentLikeUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentLikeUserRequestMultiError) AllErrors() []error { return m }

// ListDocumentLikeUserRequestValidationError is the validation error returned
// by ListDocumentLikeUserRequest.Validate if the designated constraints
// aren't met.
type ListDocumentLikeUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentLikeUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentLikeUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentLikeUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentLikeUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentLikeUserRequestValidationError) ErrorName() string {
	return "ListDocumentLikeUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentLikeUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentLikeUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentLikeUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentLikeUserRequestValidationError{}

// Validate checks the field values on ListDocumentLikeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentLikeUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentLikeUserReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentLikeUserReplyMultiError, or nil if none found.
func (m *ListDocumentLikeUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentLikeUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentLikeUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentLikeUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentLikeUserReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentLikeUserReplyMultiError(errors)
	}

	return nil
}

// ListDocumentLikeUserReplyMultiError is an error wrapping multiple validation
// errors returned by ListDocumentLikeUserReply.ValidateAll() if the
// designated constraints aren't met.
type ListDocumentLikeUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentLikeUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentLikeUserReplyMultiError) AllErrors() []error { return m }

// ListDocumentLikeUserReplyValidationError is the validation error returned by
// ListDocumentLikeUserReply.Validate if the designated constraints aren't met.
type ListDocumentLikeUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentLikeUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentLikeUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentLikeUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentLikeUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentLikeUserReplyValidationError) ErrorName() string {
	return "ListDocumentLikeUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentLikeUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentLikeUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentLikeUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentLikeUserReplyValidationError{}

// Validate checks the field values on TopDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopDocumentRequestMultiError, or nil if none found.
func (m *TopDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TopDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := TopDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsTop

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := TopDocumentRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TopDocumentRequestMultiError(errors)
	}

	return nil
}

// TopDocumentRequestMultiError is an error wrapping multiple validation errors
// returned by TopDocumentRequest.ValidateAll() if the designated constraints
// aren't met.
type TopDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopDocumentRequestMultiError) AllErrors() []error { return m }

// TopDocumentRequestValidationError is the validation error returned by
// TopDocumentRequest.Validate if the designated constraints aren't met.
type TopDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopDocumentRequestValidationError) ErrorName() string {
	return "TopDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TopDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopDocumentRequestValidationError{}

// Validate checks the field values on TopDocumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TopDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopDocumentReplyMultiError, or nil if none found.
func (m *TopDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TopDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for IsTop

	if len(errors) > 0 {
		return TopDocumentReplyMultiError(errors)
	}

	return nil
}

// TopDocumentReplyMultiError is an error wrapping multiple validation errors
// returned by TopDocumentReply.ValidateAll() if the designated constraints
// aren't met.
type TopDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopDocumentReplyMultiError) AllErrors() []error { return m }

// TopDocumentReplyValidationError is the validation error returned by
// TopDocumentReply.Validate if the designated constraints aren't met.
type TopDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopDocumentReplyValidationError) ErrorName() string { return "TopDocumentReplyValidationError" }

// Error satisfies the builtin error interface
func (e TopDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopDocumentReplyValidationError{}

// Validate checks the field values on StarSpaceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StarSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StarSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StarSpaceRequestMultiError, or nil if none found.
func (m *StarSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StarSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := StarSpaceRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsStar

	if len(errors) > 0 {
		return StarSpaceRequestMultiError(errors)
	}

	return nil
}

// StarSpaceRequestMultiError is an error wrapping multiple validation errors
// returned by StarSpaceRequest.ValidateAll() if the designated constraints
// aren't met.
type StarSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarSpaceRequestMultiError) AllErrors() []error { return m }

// StarSpaceRequestValidationError is the validation error returned by
// StarSpaceRequest.Validate if the designated constraints aren't met.
type StarSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarSpaceRequestValidationError) ErrorName() string { return "StarSpaceRequestValidationError" }

// Error satisfies the builtin error interface
func (e StarSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarSpaceRequestValidationError{}

// Validate checks the field values on StarSpaceReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StarSpaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StarSpaceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StarSpaceReplyMultiError,
// or nil if none found.
func (m *StarSpaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StarSpaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := StarSpaceReplyValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsStar

	if len(errors) > 0 {
		return StarSpaceReplyMultiError(errors)
	}

	return nil
}

// StarSpaceReplyMultiError is an error wrapping multiple validation errors
// returned by StarSpaceReply.ValidateAll() if the designated constraints
// aren't met.
type StarSpaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarSpaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarSpaceReplyMultiError) AllErrors() []error { return m }

// StarSpaceReplyValidationError is the validation error returned by
// StarSpaceReply.Validate if the designated constraints aren't met.
type StarSpaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarSpaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarSpaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarSpaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarSpaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarSpaceReplyValidationError) ErrorName() string { return "StarSpaceReplyValidationError" }

// Error satisfies the builtin error interface
func (e StarSpaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarSpaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarSpaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarSpaceReplyValidationError{}

// Validate checks the field values on CommentDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentDocumentRequestMultiError, or nil if none found.
func (m *CommentDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := CommentDocumentRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := CommentDocumentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetComment()) < 1 {
		err := CommentDocumentRequestValidationError{
			field:  "Comment",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Quote

	// no validation rules for RenderId

	// no validation rules for MentionUserId

	if len(errors) > 0 {
		return CommentDocumentRequestMultiError(errors)
	}

	return nil
}

// CommentDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by CommentDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type CommentDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentDocumentRequestMultiError) AllErrors() []error { return m }

// CommentDocumentRequestValidationError is the validation error returned by
// CommentDocumentRequest.Validate if the designated constraints aren't met.
type CommentDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentDocumentRequestValidationError) ErrorName() string {
	return "CommentDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentDocumentRequestValidationError{}

// Validate checks the field values on CommentDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentDocumentReplyMultiError, or nil if none found.
func (m *CommentDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return CommentDocumentReplyMultiError(errors)
	}

	return nil
}

// CommentDocumentReplyMultiError is an error wrapping multiple validation
// errors returned by CommentDocumentReply.ValidateAll() if the designated
// constraints aren't met.
type CommentDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentDocumentReplyMultiError) AllErrors() []error { return m }

// CommentDocumentReplyValidationError is the validation error returned by
// CommentDocumentReply.Validate if the designated constraints aren't met.
type CommentDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentDocumentReplyValidationError) ErrorName() string {
	return "CommentDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CommentDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentDocumentReplyValidationError{}

// Validate checks the field values on UpdateCommentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentStatusRequestMultiError, or nil if none found.
func (m *UpdateCommentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsHide

	if len(errors) > 0 {
		return UpdateCommentStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCommentStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCommentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentStatusRequestMultiError) AllErrors() []error { return m }

// UpdateCommentStatusRequestValidationError is the validation error returned
// by UpdateCommentStatusRequest.Validate if the designated constraints aren't met.
type UpdateCommentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentStatusRequestValidationError) ErrorName() string {
	return "UpdateCommentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentStatusRequestValidationError{}

// Validate checks the field values on UpdateCommentStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentStatusReplyMultiError, or nil if none found.
func (m *UpdateCommentStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuoteList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCommentStatusReplyValidationError{
						field:  fmt.Sprintf("QuoteList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCommentStatusReplyValidationError{
						field:  fmt.Sprintf("QuoteList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCommentStatusReplyValidationError{
					field:  fmt.Sprintf("QuoteList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateCommentStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateCommentStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentStatusReplyMultiError) AllErrors() []error { return m }

// UpdateCommentStatusReplyValidationError is the validation error returned by
// UpdateCommentStatusReply.Validate if the designated constraints aren't met.
type UpdateCommentStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentStatusReplyValidationError) ErrorName() string {
	return "UpdateCommentStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentStatusReplyValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReplyMultiError, or nil if none found.
func (m *DeleteCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentReplyMultiError(errors)
	}

	return nil
}

// DeleteCommentReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCommentReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReplyMultiError) AllErrors() []error { return m }

// DeleteCommentReplyValidationError is the validation error returned by
// DeleteCommentReply.Validate if the designated constraints aren't met.
type DeleteCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyValidationError) ErrorName() string {
	return "DeleteCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyValidationError{}

// Validate checks the field values on ListDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentCommentRequestMultiError, or nil if none found.
func (m *ListDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDocumentId()) < 1 {
		err := ListDocumentCommentRequestValidationError{
			field:  "DocumentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := ListDocumentCommentRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// ListDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by ListDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentCommentRequestMultiError) AllErrors() []error { return m }

// ListDocumentCommentRequestValidationError is the validation error returned
// by ListDocumentCommentRequest.Validate if the designated constraints aren't met.
type ListDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentCommentRequestValidationError) ErrorName() string {
	return "ListDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentCommentRequestValidationError{}

// Validate checks the field values on ListDocumentCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentCommentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentCommentReplyMultiError, or nil if none found.
func (m *ListDocumentCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentCommentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentCommentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentCommentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQuoteList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentCommentReplyValidationError{
						field:  fmt.Sprintf("QuoteList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentCommentReplyValidationError{
						field:  fmt.Sprintf("QuoteList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentCommentReplyValidationError{
					field:  fmt.Sprintf("QuoteList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentCommentReplyMultiError(errors)
	}

	return nil
}

// ListDocumentCommentReplyMultiError is an error wrapping multiple validation
// errors returned by ListDocumentCommentReply.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentCommentReplyMultiError) AllErrors() []error { return m }

// ListDocumentCommentReplyValidationError is the validation error returned by
// ListDocumentCommentReply.Validate if the designated constraints aren't met.
type ListDocumentCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentCommentReplyValidationError) ErrorName() string {
	return "ListDocumentCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentCommentReplyValidationError{}
