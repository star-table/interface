// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: document_model.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Avatar

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on DocumentSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentSimple with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentSimpleMultiError,
// or nil if none found.
func (m *DocumentSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for Title

	// no validation rules for ParentId

	if len(errors) > 0 {
		return DocumentSimpleMultiError(errors)
	}

	return nil
}

// DocumentSimpleMultiError is an error wrapping multiple validation errors
// returned by DocumentSimple.ValidateAll() if the designated constraints
// aren't met.
type DocumentSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentSimpleMultiError) AllErrors() []error { return m }

// DocumentSimpleValidationError is the validation error returned by
// DocumentSimple.Validate if the designated constraints aren't met.
type DocumentSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentSimpleValidationError) ErrorName() string { return "DocumentSimpleValidationError" }

// Error satisfies the builtin error interface
func (e DocumentSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentSimpleValidationError{}

// Validate checks the field values on DocumentDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentDetailMultiError,
// or nil if none found.
func (m *DocumentDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for Content

	// no validation rules for Title

	// no validation rules for ParentId

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentDetailValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentDetailValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentDetailValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdater()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentDetailValidationError{
					field:  "Updater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentDetailValidationError{
					field:  "Updater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentDetailValidationError{
				field:  "Updater",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DocumentDetailMultiError(errors)
	}

	return nil
}

// DocumentDetailMultiError is an error wrapping multiple validation errors
// returned by DocumentDetail.ValidateAll() if the designated constraints
// aren't met.
type DocumentDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentDetailMultiError) AllErrors() []error { return m }

// DocumentDetailValidationError is the validation error returned by
// DocumentDetail.Validate if the designated constraints aren't met.
type DocumentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentDetailValidationError) ErrorName() string { return "DocumentDetailValidationError" }

// Error satisfies the builtin error interface
func (e DocumentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentDetailValidationError{}

// Validate checks the field values on SpaceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpaceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpaceDetailMultiError, or
// nil if none found.
func (m *SpaceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceId

	// no validation rules for Name

	// no validation rules for Cover

	// no validation rules for Type

	if len(errors) > 0 {
		return SpaceDetailMultiError(errors)
	}

	return nil
}

// SpaceDetailMultiError is an error wrapping multiple validation errors
// returned by SpaceDetail.ValidateAll() if the designated constraints aren't met.
type SpaceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceDetailMultiError) AllErrors() []error { return m }

// SpaceDetailValidationError is the validation error returned by
// SpaceDetail.Validate if the designated constraints aren't met.
type SpaceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceDetailValidationError) ErrorName() string { return "SpaceDetailValidationError" }

// Error satisfies the builtin error interface
func (e SpaceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceDetailValidationError{}

// Validate checks the field values on CommentDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentDetailMultiError, or
// nil if none found.
func (m *CommentDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for Comment

	if all {
		switch v := interface{}(m.GetMentionUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentDetailValidationError{
					field:  "MentionUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentDetailValidationError{
					field:  "MentionUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMentionUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentDetailValidationError{
				field:  "MentionUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentDetailValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentDetailValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentDetailValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CommentDetailMultiError(errors)
	}

	return nil
}

// CommentDetailMultiError is an error wrapping multiple validation errors
// returned by CommentDetail.ValidateAll() if the designated constraints
// aren't met.
type CommentDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentDetailMultiError) AllErrors() []error { return m }

// CommentDetailValidationError is the validation error returned by
// CommentDetail.Validate if the designated constraints aren't met.
type CommentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentDetailValidationError) ErrorName() string { return "CommentDetailValidationError" }

// Error satisfies the builtin error interface
func (e CommentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentDetailValidationError{}

// Validate checks the field values on RecycleDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecycleDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecycleDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecycleDetailMultiError, or
// nil if none found.
func (m *RecycleDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RecycleDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecycleId

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecycleDetailValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecycleDetailValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecycleDetailValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for LeftDay

	if len(errors) > 0 {
		return RecycleDetailMultiError(errors)
	}

	return nil
}

// RecycleDetailMultiError is an error wrapping multiple validation errors
// returned by RecycleDetail.ValidateAll() if the designated constraints
// aren't met.
type RecycleDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecycleDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecycleDetailMultiError) AllErrors() []error { return m }

// RecycleDetailValidationError is the validation error returned by
// RecycleDetail.Validate if the designated constraints aren't met.
type RecycleDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecycleDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecycleDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecycleDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecycleDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecycleDetailValidationError) ErrorName() string { return "RecycleDetailValidationError" }

// Error satisfies the builtin error interface
func (e RecycleDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecycleDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecycleDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecycleDetailValidationError{}
