// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type DocumentHTTPServer interface {
	CopyDocument(context.Context, *CopyDocumentRequest) (*CopyDocumentReply, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentReply, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentReply, error)
	ListChildDocument(context.Context, *ListChildDocumentRequest) (*ListChildDocumentReply, error)
	ListTreeDocument(context.Context, *ListTreeDocumentRequest) (*ListTreeDocumentReply, error)
	MoveDocument(context.Context, *MoveDocumentRequest) (*MoveDocumentReply, error)
	SaveDocument(context.Context, *SaveDocumentRequest) (*SaveDocumentReply, error)
	SearchDocument(context.Context, *SearchDocumentRequest) (*SearchDocumentReply, error)
}

func RegisterDocumentHTTPServer(s *http.Server, srv DocumentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/document/detail", _Document_GetDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/list/tree", _Document_ListTreeDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/list/child", _Document_ListChildDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/search", _Document_SearchDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/save", _Document_SaveDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/delete", _Document_DeleteDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/copy", _Document_CopyDocument0_HTTP_Handler(srv))
	r.POST("/v1/document/move", _Document_MoveDocument0_HTTP_Handler(srv))
}

func _Document_GetDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/GetDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDocument(ctx, req.(*GetDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_ListTreeDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTreeDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/ListTreeDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTreeDocument(ctx, req.(*ListTreeDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTreeDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_ListChildDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListChildDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/ListChildDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListChildDocument(ctx, req.(*ListChildDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChildDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_SearchDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/SearchDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchDocument(ctx, req.(*SearchDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_SaveDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/SaveDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveDocument(ctx, req.(*SaveDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_DeleteDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/DeleteDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDocument(ctx, req.(*DeleteDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_CopyDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/CopyDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CopyDocument(ctx, req.(*CopyDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CopyDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Document_MoveDocument0_HTTP_Handler(srv DocumentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MoveDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/knowledge.v1.Document/MoveDocument")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MoveDocument(ctx, req.(*MoveDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MoveDocumentReply)
		return ctx.Result(200, reply)
	}
}

type DocumentHTTPClient interface {
	CopyDocument(ctx context.Context, req *CopyDocumentRequest, opts ...http.CallOption) (rsp *CopyDocumentReply, err error)
	DeleteDocument(ctx context.Context, req *DeleteDocumentRequest, opts ...http.CallOption) (rsp *DeleteDocumentReply, err error)
	GetDocument(ctx context.Context, req *GetDocumentRequest, opts ...http.CallOption) (rsp *GetDocumentReply, err error)
	ListChildDocument(ctx context.Context, req *ListChildDocumentRequest, opts ...http.CallOption) (rsp *ListChildDocumentReply, err error)
	ListTreeDocument(ctx context.Context, req *ListTreeDocumentRequest, opts ...http.CallOption) (rsp *ListTreeDocumentReply, err error)
	MoveDocument(ctx context.Context, req *MoveDocumentRequest, opts ...http.CallOption) (rsp *MoveDocumentReply, err error)
	SaveDocument(ctx context.Context, req *SaveDocumentRequest, opts ...http.CallOption) (rsp *SaveDocumentReply, err error)
	SearchDocument(ctx context.Context, req *SearchDocumentRequest, opts ...http.CallOption) (rsp *SearchDocumentReply, err error)
}

type DocumentHTTPClientImpl struct {
	cc *http.Client
}

func NewDocumentHTTPClient(client *http.Client) DocumentHTTPClient {
	return &DocumentHTTPClientImpl{client}
}

func (c *DocumentHTTPClientImpl) CopyDocument(ctx context.Context, in *CopyDocumentRequest, opts ...http.CallOption) (*CopyDocumentReply, error) {
	var out CopyDocumentReply
	pattern := "/v1/document/copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/CopyDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...http.CallOption) (*DeleteDocumentReply, error) {
	var out DeleteDocumentReply
	pattern := "/v1/document/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/DeleteDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...http.CallOption) (*GetDocumentReply, error) {
	var out GetDocumentReply
	pattern := "/v1/document/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/GetDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) ListChildDocument(ctx context.Context, in *ListChildDocumentRequest, opts ...http.CallOption) (*ListChildDocumentReply, error) {
	var out ListChildDocumentReply
	pattern := "/v1/document/list/child"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/ListChildDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) ListTreeDocument(ctx context.Context, in *ListTreeDocumentRequest, opts ...http.CallOption) (*ListTreeDocumentReply, error) {
	var out ListTreeDocumentReply
	pattern := "/v1/document/list/tree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/ListTreeDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) MoveDocument(ctx context.Context, in *MoveDocumentRequest, opts ...http.CallOption) (*MoveDocumentReply, error) {
	var out MoveDocumentReply
	pattern := "/v1/document/move"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/MoveDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) SaveDocument(ctx context.Context, in *SaveDocumentRequest, opts ...http.CallOption) (*SaveDocumentReply, error) {
	var out SaveDocumentReply
	pattern := "/v1/document/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/SaveDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DocumentHTTPClientImpl) SearchDocument(ctx context.Context, in *SearchDocumentRequest, opts ...http.CallOption) (*SearchDocumentReply, error) {
	var out SearchDocumentReply
	pattern := "/v1/document/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/knowledge.v1.Document/SearchDocument"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
