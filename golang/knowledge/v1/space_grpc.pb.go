// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: space.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpaceClient is the client API for Space service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceClient interface {
	// 获取文档列表
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceReply, error)
	ListSpace(ctx context.Context, in *ListSpaceRequest, opts ...grpc.CallOption) (*ListSpaceReply, error)
}

type spaceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceClient(cc grpc.ClientConnInterface) SpaceClient {
	return &spaceClient{cc}
}

func (c *spaceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceReply, error) {
	out := new(CreateSpaceReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Space/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ListSpace(ctx context.Context, in *ListSpaceRequest, opts ...grpc.CallOption) (*ListSpaceReply, error) {
	out := new(ListSpaceReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Space/ListSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceServer is the server API for Space service.
// All implementations must embed UnimplementedSpaceServer
// for forward compatibility
type SpaceServer interface {
	// 获取文档列表
	CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceReply, error)
	ListSpace(context.Context, *ListSpaceRequest) (*ListSpaceReply, error)
	mustEmbedUnimplementedSpaceServer()
}

// UnimplementedSpaceServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceServer struct {
}

func (UnimplementedSpaceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedSpaceServer) ListSpace(context.Context, *ListSpaceRequest) (*ListSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpace not implemented")
}
func (UnimplementedSpaceServer) mustEmbedUnimplementedSpaceServer() {}

// UnsafeSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceServer will
// result in compilation errors.
type UnsafeSpaceServer interface {
	mustEmbedUnimplementedSpaceServer()
}

func RegisterSpaceServer(s grpc.ServiceRegistrar, srv SpaceServer) {
	s.RegisterService(&Space_ServiceDesc, srv)
}

func _Space_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Space/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ListSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ListSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Space/ListSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ListSpace(ctx, req.(*ListSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Space_ServiceDesc is the grpc.ServiceDesc for Space service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Space_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledge.v1.Space",
	HandlerType: (*SpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _Space_CreateSpace_Handler,
		},
		{
			MethodName: "ListSpace",
			Handler:    _Space_ListSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space.proto",
}
