// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: document.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentClient is the client API for Document service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentClient interface {
	// 获取文档详情
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentReply, error)
	// 获取文档列表树
	ListTreeDocument(ctx context.Context, in *ListTreeDocumentRequest, opts ...grpc.CallOption) (*ListTreeDocumentReply, error)
	// 获取子文档
	ListChildDocument(ctx context.Context, in *ListChildDocumentRequest, opts ...grpc.CallOption) (*ListChildDocumentReply, error)
	// 搜索文档
	SearchDocument(ctx context.Context, in *SearchDocumentRequest, opts ...grpc.CallOption) (*SearchDocumentReply, error)
	// 创建或者更新document
	SaveDocument(ctx context.Context, in *SaveDocumentRequest, opts ...grpc.CallOption) (*SaveDocumentReply, error)
	// 删除document
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentReply, error)
	// 创建或者更新document
	CopyDocument(ctx context.Context, in *CopyDocumentRequest, opts ...grpc.CallOption) (*CopyDocumentReply, error)
	// 移动document
	MoveDocument(ctx context.Context, in *MoveDocumentRequest, opts ...grpc.CallOption) (*MoveDocumentReply, error)
}

type documentClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentClient(cc grpc.ClientConnInterface) DocumentClient {
	return &documentClient{cc}
}

func (c *documentClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentReply, error) {
	out := new(GetDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) ListTreeDocument(ctx context.Context, in *ListTreeDocumentRequest, opts ...grpc.CallOption) (*ListTreeDocumentReply, error) {
	out := new(ListTreeDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/ListTreeDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) ListChildDocument(ctx context.Context, in *ListChildDocumentRequest, opts ...grpc.CallOption) (*ListChildDocumentReply, error) {
	out := new(ListChildDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/ListChildDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) SearchDocument(ctx context.Context, in *SearchDocumentRequest, opts ...grpc.CallOption) (*SearchDocumentReply, error) {
	out := new(SearchDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/SearchDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) SaveDocument(ctx context.Context, in *SaveDocumentRequest, opts ...grpc.CallOption) (*SaveDocumentReply, error) {
	out := new(SaveDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/SaveDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentReply, error) {
	out := new(DeleteDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/DeleteDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) CopyDocument(ctx context.Context, in *CopyDocumentRequest, opts ...grpc.CallOption) (*CopyDocumentReply, error) {
	out := new(CopyDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/CopyDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) MoveDocument(ctx context.Context, in *MoveDocumentRequest, opts ...grpc.CallOption) (*MoveDocumentReply, error) {
	out := new(MoveDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.Document/MoveDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServer is the server API for Document service.
// All implementations must embed UnimplementedDocumentServer
// for forward compatibility
type DocumentServer interface {
	// 获取文档详情
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentReply, error)
	// 获取文档列表树
	ListTreeDocument(context.Context, *ListTreeDocumentRequest) (*ListTreeDocumentReply, error)
	// 获取子文档
	ListChildDocument(context.Context, *ListChildDocumentRequest) (*ListChildDocumentReply, error)
	// 搜索文档
	SearchDocument(context.Context, *SearchDocumentRequest) (*SearchDocumentReply, error)
	// 创建或者更新document
	SaveDocument(context.Context, *SaveDocumentRequest) (*SaveDocumentReply, error)
	// 删除document
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentReply, error)
	// 创建或者更新document
	CopyDocument(context.Context, *CopyDocumentRequest) (*CopyDocumentReply, error)
	// 移动document
	MoveDocument(context.Context, *MoveDocumentRequest) (*MoveDocumentReply, error)
	mustEmbedUnimplementedDocumentServer()
}

// UnimplementedDocumentServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServer struct {
}

func (UnimplementedDocumentServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocumentServer) ListTreeDocument(context.Context, *ListTreeDocumentRequest) (*ListTreeDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTreeDocument not implemented")
}
func (UnimplementedDocumentServer) ListChildDocument(context.Context, *ListChildDocumentRequest) (*ListChildDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChildDocument not implemented")
}
func (UnimplementedDocumentServer) SearchDocument(context.Context, *SearchDocumentRequest) (*SearchDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocument not implemented")
}
func (UnimplementedDocumentServer) SaveDocument(context.Context, *SaveDocumentRequest) (*SaveDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDocument not implemented")
}
func (UnimplementedDocumentServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocumentServer) CopyDocument(context.Context, *CopyDocumentRequest) (*CopyDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyDocument not implemented")
}
func (UnimplementedDocumentServer) MoveDocument(context.Context, *MoveDocumentRequest) (*MoveDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDocument not implemented")
}
func (UnimplementedDocumentServer) mustEmbedUnimplementedDocumentServer() {}

// UnsafeDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServer will
// result in compilation errors.
type UnsafeDocumentServer interface {
	mustEmbedUnimplementedDocumentServer()
}

func RegisterDocumentServer(s grpc.ServiceRegistrar, srv DocumentServer) {
	s.RegisterService(&Document_ServiceDesc, srv)
}

func _Document_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_ListTreeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).ListTreeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/ListTreeDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).ListTreeDocument(ctx, req.(*ListTreeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_ListChildDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChildDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).ListChildDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/ListChildDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).ListChildDocument(ctx, req.(*ListChildDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_SearchDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).SearchDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/SearchDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).SearchDocument(ctx, req.(*SearchDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_SaveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).SaveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/SaveDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).SaveDocument(ctx, req.(*SaveDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/DeleteDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_CopyDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).CopyDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/CopyDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).CopyDocument(ctx, req.(*CopyDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_MoveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).MoveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.Document/MoveDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).MoveDocument(ctx, req.(*MoveDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Document_ServiceDesc is the grpc.ServiceDesc for Document service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Document_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledge.v1.Document",
	HandlerType: (*DocumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _Document_GetDocument_Handler,
		},
		{
			MethodName: "ListTreeDocument",
			Handler:    _Document_ListTreeDocument_Handler,
		},
		{
			MethodName: "ListChildDocument",
			Handler:    _Document_ListChildDocument_Handler,
		},
		{
			MethodName: "SearchDocument",
			Handler:    _Document_SearchDocument_Handler,
		},
		{
			MethodName: "SaveDocument",
			Handler:    _Document_SaveDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _Document_DeleteDocument_Handler,
		},
		{
			MethodName: "CopyDocument",
			Handler:    _Document_CopyDocument_Handler,
		},
		{
			MethodName: "MoveDocument",
			Handler:    _Document_MoveDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document.proto",
}
