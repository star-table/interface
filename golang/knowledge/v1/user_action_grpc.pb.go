// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: user_action.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserActionClient is the client API for UserAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserActionClient interface {
	// 点赞或者取消点赞
	LikeDocument(ctx context.Context, in *LikeDocumentRequest, opts ...grpc.CallOption) (*LikeDocumentReply, error)
	// 点赞用户列表
	ListDocumentLikeUser(ctx context.Context, in *ListDocumentLikeUserRequest, opts ...grpc.CallOption) (*ListDocumentLikeUserReply, error)
	// 置顶文章
	TopDocument(ctx context.Context, in *TopDocumentRequest, opts ...grpc.CallOption) (*TopDocumentReply, error)
	// 评论文章
	CommentDocument(ctx context.Context, in *CommentDocumentRequest, opts ...grpc.CallOption) (*CommentDocumentReply, error)
	// 评论文章
	UpdateCommentStatus(ctx context.Context, in *UpdateCommentStatusRequest, opts ...grpc.CallOption) (*UpdateCommentStatusReply, error)
	// 删除
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentReply, error)
	// 评论列表
	ListDocumentComment(ctx context.Context, in *ListDocumentCommentRequest, opts ...grpc.CallOption) (*ListDocumentCommentReply, error)
	// 收藏空间
	StarSpace(ctx context.Context, in *StarSpaceRequest, opts ...grpc.CallOption) (*StarSpaceReply, error)
}

type userActionClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActionClient(cc grpc.ClientConnInterface) UserActionClient {
	return &userActionClient{cc}
}

func (c *userActionClient) LikeDocument(ctx context.Context, in *LikeDocumentRequest, opts ...grpc.CallOption) (*LikeDocumentReply, error) {
	out := new(LikeDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/LikeDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) ListDocumentLikeUser(ctx context.Context, in *ListDocumentLikeUserRequest, opts ...grpc.CallOption) (*ListDocumentLikeUserReply, error) {
	out := new(ListDocumentLikeUserReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/ListDocumentLikeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) TopDocument(ctx context.Context, in *TopDocumentRequest, opts ...grpc.CallOption) (*TopDocumentReply, error) {
	out := new(TopDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/TopDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) CommentDocument(ctx context.Context, in *CommentDocumentRequest, opts ...grpc.CallOption) (*CommentDocumentReply, error) {
	out := new(CommentDocumentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/CommentDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) UpdateCommentStatus(ctx context.Context, in *UpdateCommentStatusRequest, opts ...grpc.CallOption) (*UpdateCommentStatusReply, error) {
	out := new(UpdateCommentStatusReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/UpdateCommentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentReply, error) {
	out := new(DeleteCommentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) ListDocumentComment(ctx context.Context, in *ListDocumentCommentRequest, opts ...grpc.CallOption) (*ListDocumentCommentReply, error) {
	out := new(ListDocumentCommentReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/ListDocumentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) StarSpace(ctx context.Context, in *StarSpaceRequest, opts ...grpc.CallOption) (*StarSpaceReply, error) {
	out := new(StarSpaceReply)
	err := c.cc.Invoke(ctx, "/knowledge.v1.UserAction/StarSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserActionServer is the server API for UserAction service.
// All implementations must embed UnimplementedUserActionServer
// for forward compatibility
type UserActionServer interface {
	// 点赞或者取消点赞
	LikeDocument(context.Context, *LikeDocumentRequest) (*LikeDocumentReply, error)
	// 点赞用户列表
	ListDocumentLikeUser(context.Context, *ListDocumentLikeUserRequest) (*ListDocumentLikeUserReply, error)
	// 置顶文章
	TopDocument(context.Context, *TopDocumentRequest) (*TopDocumentReply, error)
	// 评论文章
	CommentDocument(context.Context, *CommentDocumentRequest) (*CommentDocumentReply, error)
	// 评论文章
	UpdateCommentStatus(context.Context, *UpdateCommentStatusRequest) (*UpdateCommentStatusReply, error)
	// 删除
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error)
	// 评论列表
	ListDocumentComment(context.Context, *ListDocumentCommentRequest) (*ListDocumentCommentReply, error)
	// 收藏空间
	StarSpace(context.Context, *StarSpaceRequest) (*StarSpaceReply, error)
	mustEmbedUnimplementedUserActionServer()
}

// UnimplementedUserActionServer must be embedded to have forward compatible implementations.
type UnimplementedUserActionServer struct {
}

func (UnimplementedUserActionServer) LikeDocument(context.Context, *LikeDocumentRequest) (*LikeDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeDocument not implemented")
}
func (UnimplementedUserActionServer) ListDocumentLikeUser(context.Context, *ListDocumentLikeUserRequest) (*ListDocumentLikeUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentLikeUser not implemented")
}
func (UnimplementedUserActionServer) TopDocument(context.Context, *TopDocumentRequest) (*TopDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopDocument not implemented")
}
func (UnimplementedUserActionServer) CommentDocument(context.Context, *CommentDocumentRequest) (*CommentDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentDocument not implemented")
}
func (UnimplementedUserActionServer) UpdateCommentStatus(context.Context, *UpdateCommentStatusRequest) (*UpdateCommentStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentStatus not implemented")
}
func (UnimplementedUserActionServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedUserActionServer) ListDocumentComment(context.Context, *ListDocumentCommentRequest) (*ListDocumentCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentComment not implemented")
}
func (UnimplementedUserActionServer) StarSpace(context.Context, *StarSpaceRequest) (*StarSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarSpace not implemented")
}
func (UnimplementedUserActionServer) mustEmbedUnimplementedUserActionServer() {}

// UnsafeUserActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActionServer will
// result in compilation errors.
type UnsafeUserActionServer interface {
	mustEmbedUnimplementedUserActionServer()
}

func RegisterUserActionServer(s grpc.ServiceRegistrar, srv UserActionServer) {
	s.RegisterService(&UserAction_ServiceDesc, srv)
}

func _UserAction_LikeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).LikeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/LikeDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).LikeDocument(ctx, req.(*LikeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_ListDocumentLikeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentLikeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).ListDocumentLikeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/ListDocumentLikeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).ListDocumentLikeUser(ctx, req.(*ListDocumentLikeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_TopDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).TopDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/TopDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).TopDocument(ctx, req.(*TopDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_CommentDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).CommentDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/CommentDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).CommentDocument(ctx, req.(*CommentDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_UpdateCommentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).UpdateCommentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/UpdateCommentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).UpdateCommentStatus(ctx, req.(*UpdateCommentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_ListDocumentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).ListDocumentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/ListDocumentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).ListDocumentComment(ctx, req.(*ListDocumentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_StarSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).StarSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knowledge.v1.UserAction/StarSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).StarSpace(ctx, req.(*StarSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAction_ServiceDesc is the grpc.ServiceDesc for UserAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledge.v1.UserAction",
	HandlerType: (*UserActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeDocument",
			Handler:    _UserAction_LikeDocument_Handler,
		},
		{
			MethodName: "ListDocumentLikeUser",
			Handler:    _UserAction_ListDocumentLikeUser_Handler,
		},
		{
			MethodName: "TopDocument",
			Handler:    _UserAction_TopDocument_Handler,
		},
		{
			MethodName: "CommentDocument",
			Handler:    _UserAction_CommentDocument_Handler,
		},
		{
			MethodName: "UpdateCommentStatus",
			Handler:    _UserAction_UpdateCommentStatus_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _UserAction_DeleteComment_Handler,
		},
		{
			MethodName: "ListDocumentComment",
			Handler:    _UserAction_ListDocumentComment_Handler,
		},
		{
			MethodName: "StarSpace",
			Handler:    _UserAction_StarSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_action.proto",
}
