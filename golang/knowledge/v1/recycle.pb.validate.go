// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: recycle.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RecycleDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecycleDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecycleDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecycleDocumentRequestMultiError, or nil if none found.
func (m *RecycleDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecycleDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return RecycleDocumentRequestMultiError(errors)
	}

	return nil
}

// RecycleDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by RecycleDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type RecycleDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecycleDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecycleDocumentRequestMultiError) AllErrors() []error { return m }

// RecycleDocumentRequestValidationError is the validation error returned by
// RecycleDocumentRequest.Validate if the designated constraints aren't met.
type RecycleDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecycleDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecycleDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecycleDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecycleDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecycleDocumentRequestValidationError) ErrorName() string {
	return "RecycleDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecycleDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecycleDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecycleDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecycleDocumentRequestValidationError{}

// Validate checks the field values on RecycleDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecycleDocumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecycleDocumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecycleDocumentReplyMultiError, or nil if none found.
func (m *RecycleDocumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecycleDocumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return RecycleDocumentReplyMultiError(errors)
	}

	return nil
}

// RecycleDocumentReplyMultiError is an error wrapping multiple validation
// errors returned by RecycleDocumentReply.ValidateAll() if the designated
// constraints aren't met.
type RecycleDocumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecycleDocumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecycleDocumentReplyMultiError) AllErrors() []error { return m }

// RecycleDocumentReplyValidationError is the validation error returned by
// RecycleDocumentReply.Validate if the designated constraints aren't met.
type RecycleDocumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecycleDocumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecycleDocumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecycleDocumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecycleDocumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecycleDocumentReplyValidationError) ErrorName() string {
	return "RecycleDocumentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecycleDocumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecycleDocumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecycleDocumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecycleDocumentReplyValidationError{}

// Validate checks the field values on RecoverRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoverRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecoverRequestMultiError,
// or nil if none found.
func (m *RecoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecycleId

	if len(errors) > 0 {
		return RecoverRequestMultiError(errors)
	}

	return nil
}

// RecoverRequestMultiError is an error wrapping multiple validation errors
// returned by RecoverRequest.ValidateAll() if the designated constraints
// aren't met.
type RecoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoverRequestMultiError) AllErrors() []error { return m }

// RecoverRequestValidationError is the validation error returned by
// RecoverRequest.Validate if the designated constraints aren't met.
type RecoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoverRequestValidationError) ErrorName() string { return "RecoverRequestValidationError" }

// Error satisfies the builtin error interface
func (e RecoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoverRequestValidationError{}

// Validate checks the field values on RecoverReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecoverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoverReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecoverReplyMultiError, or
// nil if none found.
func (m *RecoverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecycleId

	if len(errors) > 0 {
		return RecoverReplyMultiError(errors)
	}

	return nil
}

// RecoverReplyMultiError is an error wrapping multiple validation errors
// returned by RecoverReply.ValidateAll() if the designated constraints aren't met.
type RecoverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoverReplyMultiError) AllErrors() []error { return m }

// RecoverReplyValidationError is the validation error returned by
// RecoverReply.Validate if the designated constraints aren't met.
type RecoverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoverReplyValidationError) ErrorName() string { return "RecoverReplyValidationError" }

// Error satisfies the builtin error interface
func (e RecoverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoverReplyValidationError{}

// Validate checks the field values on ListRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecycleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecycleRequestMultiError, or nil if none found.
func (m *ListRecycleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecycleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSpaceId()) < 1 {
		err := ListRecycleRequestValidationError{
			field:  "SpaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := ListRecycleRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() <= 0 {
		err := ListRecycleRequestValidationError{
			field:  "Size",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRecycleRequestMultiError(errors)
	}

	return nil
}

// ListRecycleRequestMultiError is an error wrapping multiple validation errors
// returned by ListRecycleRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRecycleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecycleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecycleRequestMultiError) AllErrors() []error { return m }

// ListRecycleRequestValidationError is the validation error returned by
// ListRecycleRequest.Validate if the designated constraints aren't met.
type ListRecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecycleRequestValidationError) ErrorName() string {
	return "ListRecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecycleRequestValidationError{}

// Validate checks the field values on ListRecycleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRecycleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecycleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecycleReplyMultiError, or nil if none found.
func (m *ListRecycleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecycleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRecycleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRecycleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRecycleReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRecycleReplyMultiError(errors)
	}

	return nil
}

// ListRecycleReplyMultiError is an error wrapping multiple validation errors
// returned by ListRecycleReply.ValidateAll() if the designated constraints
// aren't met.
type ListRecycleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecycleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecycleReplyMultiError) AllErrors() []error { return m }

// ListRecycleReplyValidationError is the validation error returned by
// ListRecycleReply.Validate if the designated constraints aren't met.
type ListRecycleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecycleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecycleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecycleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecycleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecycleReplyValidationError) ErrorName() string { return "ListRecycleReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRecycleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecycleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecycleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecycleReplyValidationError{}
