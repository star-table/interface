// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: timing_wheel.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SaveTimingWheelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTimingWheelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTimingWheelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTimingWheelReqMultiError, or nil if none found.
func (m *SaveTimingWheelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTimingWheelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for AppId

	// no validation rules for TableId

	// no validation rules for ColumnId

	// no validation rules for DeltaTime

	// no validation rules for WorkflowId

	if len(errors) > 0 {
		return SaveTimingWheelReqMultiError(errors)
	}

	return nil
}

// SaveTimingWheelReqMultiError is an error wrapping multiple validation errors
// returned by SaveTimingWheelReq.ValidateAll() if the designated constraints
// aren't met.
type SaveTimingWheelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTimingWheelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTimingWheelReqMultiError) AllErrors() []error { return m }

// SaveTimingWheelReqValidationError is the validation error returned by
// SaveTimingWheelReq.Validate if the designated constraints aren't met.
type SaveTimingWheelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTimingWheelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTimingWheelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTimingWheelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTimingWheelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTimingWheelReqValidationError) ErrorName() string {
	return "SaveTimingWheelReqValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTimingWheelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTimingWheelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTimingWheelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTimingWheelReqValidationError{}

// Validate checks the field values on SaveTimingWheelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTimingWheelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTimingWheelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTimingWheelReplyMultiError, or nil if none found.
func (m *SaveTimingWheelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTimingWheelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SaveTimingWheelReplyMultiError(errors)
	}

	return nil
}

// SaveTimingWheelReplyMultiError is an error wrapping multiple validation
// errors returned by SaveTimingWheelReply.ValidateAll() if the designated
// constraints aren't met.
type SaveTimingWheelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTimingWheelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTimingWheelReplyMultiError) AllErrors() []error { return m }

// SaveTimingWheelReplyValidationError is the validation error returned by
// SaveTimingWheelReply.Validate if the designated constraints aren't met.
type SaveTimingWheelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTimingWheelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTimingWheelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTimingWheelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTimingWheelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTimingWheelReplyValidationError) ErrorName() string {
	return "SaveTimingWheelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTimingWheelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTimingWheelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTimingWheelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTimingWheelReplyValidationError{}

// Validate checks the field values on DeleteTimingWheelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTimingWheelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTimingWheelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTimingWheelReqMultiError, or nil if none found.
func (m *DeleteTimingWheelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTimingWheelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTimingWheelReqMultiError(errors)
	}

	return nil
}

// DeleteTimingWheelReqMultiError is an error wrapping multiple validation
// errors returned by DeleteTimingWheelReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteTimingWheelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTimingWheelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTimingWheelReqMultiError) AllErrors() []error { return m }

// DeleteTimingWheelReqValidationError is the validation error returned by
// DeleteTimingWheelReq.Validate if the designated constraints aren't met.
type DeleteTimingWheelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTimingWheelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTimingWheelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTimingWheelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTimingWheelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTimingWheelReqValidationError) ErrorName() string {
	return "DeleteTimingWheelReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTimingWheelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTimingWheelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTimingWheelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTimingWheelReqValidationError{}

// Validate checks the field values on DeleteTimingWheelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTimingWheelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTimingWheelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTimingWheelReplyMultiError, or nil if none found.
func (m *DeleteTimingWheelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTimingWheelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTimingWheelReplyMultiError(errors)
	}

	return nil
}

// DeleteTimingWheelReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTimingWheelReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTimingWheelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTimingWheelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTimingWheelReplyMultiError) AllErrors() []error { return m }

// DeleteTimingWheelReplyValidationError is the validation error returned by
// DeleteTimingWheelReply.Validate if the designated constraints aren't met.
type DeleteTimingWheelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTimingWheelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTimingWheelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTimingWheelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTimingWheelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTimingWheelReplyValidationError) ErrorName() string {
	return "DeleteTimingWheelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTimingWheelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTimingWheelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTimingWheelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTimingWheelReplyValidationError{}

// Validate checks the field values on DebugTimingWheelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebugTimingWheelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugTimingWheelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugTimingWheelReqMultiError, or nil if none found.
func (m *DebugTimingWheelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugTimingWheelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DebugTimingWheelReqMultiError(errors)
	}

	return nil
}

// DebugTimingWheelReqMultiError is an error wrapping multiple validation
// errors returned by DebugTimingWheelReq.ValidateAll() if the designated
// constraints aren't met.
type DebugTimingWheelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugTimingWheelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugTimingWheelReqMultiError) AllErrors() []error { return m }

// DebugTimingWheelReqValidationError is the validation error returned by
// DebugTimingWheelReq.Validate if the designated constraints aren't met.
type DebugTimingWheelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugTimingWheelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugTimingWheelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugTimingWheelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugTimingWheelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugTimingWheelReqValidationError) ErrorName() string {
	return "DebugTimingWheelReqValidationError"
}

// Error satisfies the builtin error interface
func (e DebugTimingWheelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugTimingWheelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugTimingWheelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugTimingWheelReqValidationError{}

// Validate checks the field values on DebugTimingWheelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebugTimingWheelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugTimingWheelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugTimingWheelReplyMultiError, or nil if none found.
func (m *DebugTimingWheelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugTimingWheelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Info

	if len(errors) > 0 {
		return DebugTimingWheelReplyMultiError(errors)
	}

	return nil
}

// DebugTimingWheelReplyMultiError is an error wrapping multiple validation
// errors returned by DebugTimingWheelReply.ValidateAll() if the designated
// constraints aren't met.
type DebugTimingWheelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugTimingWheelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugTimingWheelReplyMultiError) AllErrors() []error { return m }

// DebugTimingWheelReplyValidationError is the validation error returned by
// DebugTimingWheelReply.Validate if the designated constraints aren't met.
type DebugTimingWheelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugTimingWheelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugTimingWheelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugTimingWheelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugTimingWheelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugTimingWheelReplyValidationError) ErrorName() string {
	return "DebugTimingWheelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DebugTimingWheelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugTimingWheelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugTimingWheelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugTimingWheelReplyValidationError{}
