// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: batch.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchClient is the client API for Batch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchClient interface {
	Temp(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	ExportPGData(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SplitTableHeader(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigrateRelating(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigrateWorkHour(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigrateCollaborator(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigrateDropUnusedTables(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	FixIssueStatusLostWhenMove(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	AddPGIndex(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigrateGlobalUser(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	FixPGOrgId(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigratePath(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	MigrateGroupChatSetting(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	FixIssueStatusName(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	FixIssueForDelPro(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 增加已逾期视图的跑批
	AddHasOverdueView(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 增加pg统计数据表
	AddPgStatisticsTable(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 给历史project增加仪表盘
	AddDashBord(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 域名切换
	ChangeDomain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// pg数据迁移
	PgDataTransfer(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 清理同一个组织下的相同用户
	ClearSameUser(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 审批确认状态 无码化
	MigrateAuditStatus(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 数据库迁移版本管理
	DbMigrations(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 修复path异常数据
	Fix20221104TemplatePath(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 把App创建人添加为member，并指定为管理员角色
	Fix20221107AppCreatorAddMember(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 重新构建已启用的自动化工作流
	AutomationRebuildActive(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 将关联前后置数据里面的dataId改为issueId
	ExchangeRelatingDataId(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type batchClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchClient(cc grpc.ClientConnInterface) BatchClient {
	return &batchClient{cc}
}

func (c *batchClient) Temp(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/Temp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) ExportPGData(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/ExportPGData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) SplitTableHeader(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/SplitTableHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateRelating(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateRelating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateWorkHour(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateWorkHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateCollaborator(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateDropUnusedTables(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateDropUnusedTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) FixIssueStatusLostWhenMove(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/FixIssueStatusLostWhenMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) AddPGIndex(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/AddPGIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateGlobalUser(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateGlobalUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) FixPGOrgId(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/FixPGOrgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigratePath(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigratePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateGroupChatSetting(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateGroupChatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) FixIssueStatusName(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/FixIssueStatusName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) FixIssueForDelPro(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/FixIssueForDelPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) AddHasOverdueView(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/AddHasOverdueView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) AddPgStatisticsTable(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/AddPgStatisticsTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) AddDashBord(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/AddDashBord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) ChangeDomain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/ChangeDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) PgDataTransfer(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/PgDataTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) ClearSameUser(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/ClearSameUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) MigrateAuditStatus(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/MigrateAuditStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) DbMigrations(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/DbMigrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) Fix20221104TemplatePath(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/Fix20221104TemplatePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) Fix20221107AppCreatorAddMember(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/Fix20221107AppCreatorAddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) AutomationRebuildActive(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/AutomationRebuildActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) ExchangeRelatingDataId(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/batch.v1.Batch/ExchangeRelatingDataId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchServer is the server API for Batch service.
// All implementations must embed UnimplementedBatchServer
// for forward compatibility
type BatchServer interface {
	Temp(context.Context, *HelloRequest) (*HelloReply, error)
	ExportPGData(context.Context, *HelloRequest) (*HelloReply, error)
	SplitTableHeader(context.Context, *HelloRequest) (*HelloReply, error)
	MigrateRelating(context.Context, *HelloRequest) (*HelloReply, error)
	MigrateWorkHour(context.Context, *HelloRequest) (*HelloReply, error)
	MigrateCollaborator(context.Context, *HelloRequest) (*HelloReply, error)
	MigrateDropUnusedTables(context.Context, *HelloRequest) (*HelloReply, error)
	FixIssueStatusLostWhenMove(context.Context, *HelloRequest) (*HelloReply, error)
	AddPGIndex(context.Context, *HelloRequest) (*HelloReply, error)
	MigrateGlobalUser(context.Context, *HelloRequest) (*HelloReply, error)
	FixPGOrgId(context.Context, *HelloRequest) (*HelloReply, error)
	MigratePath(context.Context, *HelloRequest) (*HelloReply, error)
	MigrateGroupChatSetting(context.Context, *HelloRequest) (*HelloReply, error)
	FixIssueStatusName(context.Context, *HelloRequest) (*HelloReply, error)
	FixIssueForDelPro(context.Context, *HelloRequest) (*HelloReply, error)
	// 增加已逾期视图的跑批
	AddHasOverdueView(context.Context, *HelloRequest) (*HelloReply, error)
	// 增加pg统计数据表
	AddPgStatisticsTable(context.Context, *HelloRequest) (*HelloReply, error)
	// 给历史project增加仪表盘
	AddDashBord(context.Context, *HelloRequest) (*HelloReply, error)
	// 域名切换
	ChangeDomain(context.Context, *HelloRequest) (*HelloReply, error)
	// pg数据迁移
	PgDataTransfer(context.Context, *HelloRequest) (*HelloReply, error)
	// 清理同一个组织下的相同用户
	ClearSameUser(context.Context, *HelloRequest) (*HelloReply, error)
	// 审批确认状态 无码化
	MigrateAuditStatus(context.Context, *HelloRequest) (*HelloReply, error)
	// 数据库迁移版本管理
	DbMigrations(context.Context, *HelloRequest) (*HelloReply, error)
	// 修复path异常数据
	Fix20221104TemplatePath(context.Context, *HelloRequest) (*HelloReply, error)
	// 把App创建人添加为member，并指定为管理员角色
	Fix20221107AppCreatorAddMember(context.Context, *HelloRequest) (*HelloReply, error)
	// 重新构建已启用的自动化工作流
	AutomationRebuildActive(context.Context, *HelloRequest) (*HelloReply, error)
	// 将关联前后置数据里面的dataId改为issueId
	ExchangeRelatingDataId(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedBatchServer()
}

// UnimplementedBatchServer must be embedded to have forward compatible implementations.
type UnimplementedBatchServer struct {
}

func (UnimplementedBatchServer) Temp(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Temp not implemented")
}
func (UnimplementedBatchServer) ExportPGData(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPGData not implemented")
}
func (UnimplementedBatchServer) SplitTableHeader(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTableHeader not implemented")
}
func (UnimplementedBatchServer) MigrateRelating(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateRelating not implemented")
}
func (UnimplementedBatchServer) MigrateWorkHour(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateWorkHour not implemented")
}
func (UnimplementedBatchServer) MigrateCollaborator(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateCollaborator not implemented")
}
func (UnimplementedBatchServer) MigrateDropUnusedTables(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateDropUnusedTables not implemented")
}
func (UnimplementedBatchServer) FixIssueStatusLostWhenMove(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixIssueStatusLostWhenMove not implemented")
}
func (UnimplementedBatchServer) AddPGIndex(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPGIndex not implemented")
}
func (UnimplementedBatchServer) MigrateGlobalUser(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateGlobalUser not implemented")
}
func (UnimplementedBatchServer) FixPGOrgId(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixPGOrgId not implemented")
}
func (UnimplementedBatchServer) MigratePath(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigratePath not implemented")
}
func (UnimplementedBatchServer) MigrateGroupChatSetting(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateGroupChatSetting not implemented")
}
func (UnimplementedBatchServer) FixIssueStatusName(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixIssueStatusName not implemented")
}
func (UnimplementedBatchServer) FixIssueForDelPro(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixIssueForDelPro not implemented")
}
func (UnimplementedBatchServer) AddHasOverdueView(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHasOverdueView not implemented")
}
func (UnimplementedBatchServer) AddPgStatisticsTable(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPgStatisticsTable not implemented")
}
func (UnimplementedBatchServer) AddDashBord(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDashBord not implemented")
}
func (UnimplementedBatchServer) ChangeDomain(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDomain not implemented")
}
func (UnimplementedBatchServer) PgDataTransfer(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PgDataTransfer not implemented")
}
func (UnimplementedBatchServer) ClearSameUser(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSameUser not implemented")
}
func (UnimplementedBatchServer) MigrateAuditStatus(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateAuditStatus not implemented")
}
func (UnimplementedBatchServer) DbMigrations(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbMigrations not implemented")
}
func (UnimplementedBatchServer) Fix20221104TemplatePath(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fix20221104TemplatePath not implemented")
}
func (UnimplementedBatchServer) Fix20221107AppCreatorAddMember(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fix20221107AppCreatorAddMember not implemented")
}
func (UnimplementedBatchServer) AutomationRebuildActive(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationRebuildActive not implemented")
}
func (UnimplementedBatchServer) ExchangeRelatingDataId(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRelatingDataId not implemented")
}
func (UnimplementedBatchServer) mustEmbedUnimplementedBatchServer() {}

// UnsafeBatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchServer will
// result in compilation errors.
type UnsafeBatchServer interface {
	mustEmbedUnimplementedBatchServer()
}

func RegisterBatchServer(s grpc.ServiceRegistrar, srv BatchServer) {
	s.RegisterService(&Batch_ServiceDesc, srv)
}

func _Batch_Temp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).Temp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/Temp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).Temp(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_ExportPGData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).ExportPGData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/ExportPGData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).ExportPGData(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_SplitTableHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).SplitTableHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/SplitTableHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).SplitTableHeader(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateRelating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateRelating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateRelating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateRelating(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateWorkHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateWorkHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateWorkHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateWorkHour(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateCollaborator(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateDropUnusedTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateDropUnusedTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateDropUnusedTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateDropUnusedTables(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_FixIssueStatusLostWhenMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).FixIssueStatusLostWhenMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/FixIssueStatusLostWhenMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).FixIssueStatusLostWhenMove(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_AddPGIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).AddPGIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/AddPGIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).AddPGIndex(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateGlobalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateGlobalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateGlobalUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateGlobalUser(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_FixPGOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).FixPGOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/FixPGOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).FixPGOrgId(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigratePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigratePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigratePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigratePath(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateGroupChatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateGroupChatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateGroupChatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateGroupChatSetting(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_FixIssueStatusName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).FixIssueStatusName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/FixIssueStatusName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).FixIssueStatusName(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_FixIssueForDelPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).FixIssueForDelPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/FixIssueForDelPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).FixIssueForDelPro(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_AddHasOverdueView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).AddHasOverdueView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/AddHasOverdueView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).AddHasOverdueView(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_AddPgStatisticsTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).AddPgStatisticsTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/AddPgStatisticsTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).AddPgStatisticsTable(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_AddDashBord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).AddDashBord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/AddDashBord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).AddDashBord(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_ChangeDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).ChangeDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/ChangeDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).ChangeDomain(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_PgDataTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).PgDataTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/PgDataTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).PgDataTransfer(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_ClearSameUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).ClearSameUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/ClearSameUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).ClearSameUser(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_MigrateAuditStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).MigrateAuditStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/MigrateAuditStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).MigrateAuditStatus(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_DbMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).DbMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/DbMigrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).DbMigrations(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_Fix20221104TemplatePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).Fix20221104TemplatePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/Fix20221104TemplatePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).Fix20221104TemplatePath(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_Fix20221107AppCreatorAddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).Fix20221107AppCreatorAddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/Fix20221107AppCreatorAddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).Fix20221107AppCreatorAddMember(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_AutomationRebuildActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).AutomationRebuildActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/AutomationRebuildActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).AutomationRebuildActive(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_ExchangeRelatingDataId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).ExchangeRelatingDataId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.Batch/ExchangeRelatingDataId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).ExchangeRelatingDataId(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Batch_ServiceDesc is the grpc.ServiceDesc for Batch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Batch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batch.v1.Batch",
	HandlerType: (*BatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Temp",
			Handler:    _Batch_Temp_Handler,
		},
		{
			MethodName: "ExportPGData",
			Handler:    _Batch_ExportPGData_Handler,
		},
		{
			MethodName: "SplitTableHeader",
			Handler:    _Batch_SplitTableHeader_Handler,
		},
		{
			MethodName: "MigrateRelating",
			Handler:    _Batch_MigrateRelating_Handler,
		},
		{
			MethodName: "MigrateWorkHour",
			Handler:    _Batch_MigrateWorkHour_Handler,
		},
		{
			MethodName: "MigrateCollaborator",
			Handler:    _Batch_MigrateCollaborator_Handler,
		},
		{
			MethodName: "MigrateDropUnusedTables",
			Handler:    _Batch_MigrateDropUnusedTables_Handler,
		},
		{
			MethodName: "FixIssueStatusLostWhenMove",
			Handler:    _Batch_FixIssueStatusLostWhenMove_Handler,
		},
		{
			MethodName: "AddPGIndex",
			Handler:    _Batch_AddPGIndex_Handler,
		},
		{
			MethodName: "MigrateGlobalUser",
			Handler:    _Batch_MigrateGlobalUser_Handler,
		},
		{
			MethodName: "FixPGOrgId",
			Handler:    _Batch_FixPGOrgId_Handler,
		},
		{
			MethodName: "MigratePath",
			Handler:    _Batch_MigratePath_Handler,
		},
		{
			MethodName: "MigrateGroupChatSetting",
			Handler:    _Batch_MigrateGroupChatSetting_Handler,
		},
		{
			MethodName: "FixIssueStatusName",
			Handler:    _Batch_FixIssueStatusName_Handler,
		},
		{
			MethodName: "FixIssueForDelPro",
			Handler:    _Batch_FixIssueForDelPro_Handler,
		},
		{
			MethodName: "AddHasOverdueView",
			Handler:    _Batch_AddHasOverdueView_Handler,
		},
		{
			MethodName: "AddPgStatisticsTable",
			Handler:    _Batch_AddPgStatisticsTable_Handler,
		},
		{
			MethodName: "AddDashBord",
			Handler:    _Batch_AddDashBord_Handler,
		},
		{
			MethodName: "ChangeDomain",
			Handler:    _Batch_ChangeDomain_Handler,
		},
		{
			MethodName: "PgDataTransfer",
			Handler:    _Batch_PgDataTransfer_Handler,
		},
		{
			MethodName: "ClearSameUser",
			Handler:    _Batch_ClearSameUser_Handler,
		},
		{
			MethodName: "MigrateAuditStatus",
			Handler:    _Batch_MigrateAuditStatus_Handler,
		},
		{
			MethodName: "DbMigrations",
			Handler:    _Batch_DbMigrations_Handler,
		},
		{
			MethodName: "Fix20221104TemplatePath",
			Handler:    _Batch_Fix20221104TemplatePath_Handler,
		},
		{
			MethodName: "Fix20221107AppCreatorAddMember",
			Handler:    _Batch_Fix20221107AppCreatorAddMember_Handler,
		},
		{
			MethodName: "AutomationRebuildActive",
			Handler:    _Batch_AutomationRebuildActive_Handler,
		},
		{
			MethodName: "ExchangeRelatingDataId",
			Handler:    _Batch_ExchangeRelatingDataId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batch.proto",
}
