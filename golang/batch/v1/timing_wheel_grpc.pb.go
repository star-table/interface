// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: timing_wheel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimingWheelClient is the client API for TimingWheel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimingWheelClient interface {
	// 创建/更新时间轮
	SaveTimingWheel(ctx context.Context, in *SaveTimingWheelReq, opts ...grpc.CallOption) (*SaveTimingWheelReply, error)
	// 删除时间轮
	DeleteTimingWheel(ctx context.Context, in *DeleteTimingWheelReq, opts ...grpc.CallOption) (*DeleteTimingWheelReply, error)
	// 时间轮Debug
	DebugTimingWheel(ctx context.Context, in *DebugTimingWheelReq, opts ...grpc.CallOption) (*DebugTimingWheelReply, error)
}

type timingWheelClient struct {
	cc grpc.ClientConnInterface
}

func NewTimingWheelClient(cc grpc.ClientConnInterface) TimingWheelClient {
	return &timingWheelClient{cc}
}

func (c *timingWheelClient) SaveTimingWheel(ctx context.Context, in *SaveTimingWheelReq, opts ...grpc.CallOption) (*SaveTimingWheelReply, error) {
	out := new(SaveTimingWheelReply)
	err := c.cc.Invoke(ctx, "/batch.v1.TimingWheel/SaveTimingWheel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timingWheelClient) DeleteTimingWheel(ctx context.Context, in *DeleteTimingWheelReq, opts ...grpc.CallOption) (*DeleteTimingWheelReply, error) {
	out := new(DeleteTimingWheelReply)
	err := c.cc.Invoke(ctx, "/batch.v1.TimingWheel/DeleteTimingWheel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timingWheelClient) DebugTimingWheel(ctx context.Context, in *DebugTimingWheelReq, opts ...grpc.CallOption) (*DebugTimingWheelReply, error) {
	out := new(DebugTimingWheelReply)
	err := c.cc.Invoke(ctx, "/batch.v1.TimingWheel/DebugTimingWheel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimingWheelServer is the server API for TimingWheel service.
// All implementations must embed UnimplementedTimingWheelServer
// for forward compatibility
type TimingWheelServer interface {
	// 创建/更新时间轮
	SaveTimingWheel(context.Context, *SaveTimingWheelReq) (*SaveTimingWheelReply, error)
	// 删除时间轮
	DeleteTimingWheel(context.Context, *DeleteTimingWheelReq) (*DeleteTimingWheelReply, error)
	// 时间轮Debug
	DebugTimingWheel(context.Context, *DebugTimingWheelReq) (*DebugTimingWheelReply, error)
	mustEmbedUnimplementedTimingWheelServer()
}

// UnimplementedTimingWheelServer must be embedded to have forward compatible implementations.
type UnimplementedTimingWheelServer struct {
}

func (UnimplementedTimingWheelServer) SaveTimingWheel(context.Context, *SaveTimingWheelReq) (*SaveTimingWheelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTimingWheel not implemented")
}
func (UnimplementedTimingWheelServer) DeleteTimingWheel(context.Context, *DeleteTimingWheelReq) (*DeleteTimingWheelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimingWheel not implemented")
}
func (UnimplementedTimingWheelServer) DebugTimingWheel(context.Context, *DebugTimingWheelReq) (*DebugTimingWheelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugTimingWheel not implemented")
}
func (UnimplementedTimingWheelServer) mustEmbedUnimplementedTimingWheelServer() {}

// UnsafeTimingWheelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimingWheelServer will
// result in compilation errors.
type UnsafeTimingWheelServer interface {
	mustEmbedUnimplementedTimingWheelServer()
}

func RegisterTimingWheelServer(s grpc.ServiceRegistrar, srv TimingWheelServer) {
	s.RegisterService(&TimingWheel_ServiceDesc, srv)
}

func _TimingWheel_SaveTimingWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTimingWheelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimingWheelServer).SaveTimingWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.TimingWheel/SaveTimingWheel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimingWheelServer).SaveTimingWheel(ctx, req.(*SaveTimingWheelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimingWheel_DeleteTimingWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimingWheelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimingWheelServer).DeleteTimingWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.TimingWheel/DeleteTimingWheel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimingWheelServer).DeleteTimingWheel(ctx, req.(*DeleteTimingWheelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimingWheel_DebugTimingWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugTimingWheelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimingWheelServer).DebugTimingWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/batch.v1.TimingWheel/DebugTimingWheel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimingWheelServer).DebugTimingWheel(ctx, req.(*DebugTimingWheelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TimingWheel_ServiceDesc is the grpc.ServiceDesc for TimingWheel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimingWheel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batch.v1.TimingWheel",
	HandlerType: (*TimingWheelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTimingWheel",
			Handler:    _TimingWheel_SaveTimingWheel_Handler,
		},
		{
			MethodName: "DeleteTimingWheel",
			Handler:    _TimingWheel_DeleteTimingWheel_Handler,
		},
		{
			MethodName: "DebugTimingWheel",
			Handler:    _TimingWheel_DebugTimingWheel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timing_wheel.proto",
}
