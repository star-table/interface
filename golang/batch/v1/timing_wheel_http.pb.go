// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type TimingWheelHTTPServer interface {
	DebugTimingWheel(context.Context, *DebugTimingWheelReq) (*DebugTimingWheelReply, error)
	DeleteTimingWheel(context.Context, *DeleteTimingWheelReq) (*DeleteTimingWheelReply, error)
	SaveTimingWheel(context.Context, *SaveTimingWheelReq) (*SaveTimingWheelReply, error)
}

func RegisterTimingWheelHTTPServer(s *http.Server, srv TimingWheelHTTPServer) {
	r := s.Route("/")
	r.POST("/inner/v1/timingwheel", _TimingWheel_SaveTimingWheel0_HTTP_Handler(srv))
	r.DELETE("/inner/v1/timingwheel/{id}", _TimingWheel_DeleteTimingWheel0_HTTP_Handler(srv))
	r.GET("/inner/v1/timingwheel/debug", _TimingWheel_DebugTimingWheel0_HTTP_Handler(srv))
}

func _TimingWheel_SaveTimingWheel0_HTTP_Handler(srv TimingWheelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveTimingWheelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/batch.v1.TimingWheel/SaveTimingWheel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveTimingWheel(ctx, req.(*SaveTimingWheelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveTimingWheelReply)
		return ctx.Result(200, reply)
	}
}

func _TimingWheel_DeleteTimingWheel0_HTTP_Handler(srv TimingWheelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTimingWheelReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/batch.v1.TimingWheel/DeleteTimingWheel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTimingWheel(ctx, req.(*DeleteTimingWheelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTimingWheelReply)
		return ctx.Result(200, reply)
	}
}

func _TimingWheel_DebugTimingWheel0_HTTP_Handler(srv TimingWheelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DebugTimingWheelReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/batch.v1.TimingWheel/DebugTimingWheel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DebugTimingWheel(ctx, req.(*DebugTimingWheelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DebugTimingWheelReply)
		return ctx.Result(200, reply)
	}
}

type TimingWheelHTTPClient interface {
	DebugTimingWheel(ctx context.Context, req *DebugTimingWheelReq, opts ...http.CallOption) (rsp *DebugTimingWheelReply, err error)
	DeleteTimingWheel(ctx context.Context, req *DeleteTimingWheelReq, opts ...http.CallOption) (rsp *DeleteTimingWheelReply, err error)
	SaveTimingWheel(ctx context.Context, req *SaveTimingWheelReq, opts ...http.CallOption) (rsp *SaveTimingWheelReply, err error)
}

type TimingWheelHTTPClientImpl struct {
	cc *http.Client
}

func NewTimingWheelHTTPClient(client *http.Client) TimingWheelHTTPClient {
	return &TimingWheelHTTPClientImpl{client}
}

func (c *TimingWheelHTTPClientImpl) DebugTimingWheel(ctx context.Context, in *DebugTimingWheelReq, opts ...http.CallOption) (*DebugTimingWheelReply, error) {
	var out DebugTimingWheelReply
	pattern := "/inner/v1/timingwheel/debug"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/batch.v1.TimingWheel/DebugTimingWheel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TimingWheelHTTPClientImpl) DeleteTimingWheel(ctx context.Context, in *DeleteTimingWheelReq, opts ...http.CallOption) (*DeleteTimingWheelReply, error) {
	var out DeleteTimingWheelReply
	pattern := "/inner/v1/timingwheel/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/batch.v1.TimingWheel/DeleteTimingWheel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TimingWheelHTTPClientImpl) SaveTimingWheel(ctx context.Context, in *SaveTimingWheelReq, opts ...http.CallOption) (*SaveTimingWheelReply, error) {
	var out SaveTimingWheelReply
	pattern := "/inner/v1/timingwheel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/batch.v1.TimingWheel/SaveTimingWheel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
