// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: permission_model.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionGroupRequestMultiError, or nil if none found.
func (m *CreatePermissionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for AppPackageId

	if len(errors) > 0 {
		return CreatePermissionGroupRequestMultiError(errors)
	}

	return nil
}

// CreatePermissionGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePermissionGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePermissionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionGroupRequestMultiError) AllErrors() []error { return m }

// CreatePermissionGroupRequestValidationError is the validation error returned
// by CreatePermissionGroupRequest.Validate if the designated constraints
// aren't met.
type CreatePermissionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionGroupRequestValidationError) ErrorName() string {
	return "CreatePermissionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionGroupRequestValidationError{}

// Validate checks the field values on CreatePermissionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePermissionGroupResponseMultiError, or nil if none found.
func (m *CreatePermissionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePermissionGroupResponseMultiError(errors)
	}

	return nil
}

// CreatePermissionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePermissionGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePermissionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionGroupResponseMultiError) AllErrors() []error { return m }

// CreatePermissionGroupResponseValidationError is the validation error
// returned by CreatePermissionGroupResponse.Validate if the designated
// constraints aren't met.
type CreatePermissionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionGroupResponseValidationError) ErrorName() string {
	return "CreatePermissionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionGroupResponseValidationError{}

// Validate checks the field values on UpdatePermissionGroupInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePermissionGroupInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionGroupInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePermissionGroupInfoRequestMultiError, or nil if none found.
func (m *UpdatePermissionGroupInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionGroupInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for AppPackageId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return UpdatePermissionGroupInfoRequestMultiError(errors)
	}

	return nil
}

// UpdatePermissionGroupInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePermissionGroupInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionGroupInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionGroupInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionGroupInfoRequestMultiError) AllErrors() []error { return m }

// UpdatePermissionGroupInfoRequestValidationError is the validation error
// returned by UpdatePermissionGroupInfoRequest.Validate if the designated
// constraints aren't met.
type UpdatePermissionGroupInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionGroupInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionGroupInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionGroupInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionGroupInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionGroupInfoRequestValidationError) ErrorName() string {
	return "UpdatePermissionGroupInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionGroupInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionGroupInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionGroupInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionGroupInfoRequestValidationError{}

// Validate checks the field values on UpdatePermissionGroupInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePermissionGroupInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionGroupInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdatePermissionGroupInfoResponseMultiError, or nil if none found.
func (m *UpdatePermissionGroupInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionGroupInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePermissionGroupInfoResponseMultiError(errors)
	}

	return nil
}

// UpdatePermissionGroupInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePermissionGroupInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionGroupInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionGroupInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionGroupInfoResponseMultiError) AllErrors() []error { return m }

// UpdatePermissionGroupInfoResponseValidationError is the validation error
// returned by UpdatePermissionGroupInfoResponse.Validate if the designated
// constraints aren't met.
type UpdatePermissionGroupInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionGroupInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionGroupInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionGroupInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionGroupInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionGroupInfoResponseValidationError) ErrorName() string {
	return "UpdatePermissionGroupInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionGroupInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionGroupInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionGroupInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionGroupInfoResponseValidationError{}

// Validate checks the field values on CollaboratorColumnUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollaboratorColumnUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollaboratorColumnUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollaboratorColumnUserMultiError, or nil if none found.
func (m *CollaboratorColumnUser) ValidateAll() error {
	return m.validate(true)
}

func (m *CollaboratorColumnUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for OrgId

	// no validation rules for TableId

	// no validation rules for FieldName

	// no validation rules for UserId

	// no validation rules for DeptId

	if len(errors) > 0 {
		return CollaboratorColumnUserMultiError(errors)
	}

	return nil
}

// CollaboratorColumnUserMultiError is an error wrapping multiple validation
// errors returned by CollaboratorColumnUser.ValidateAll() if the designated
// constraints aren't met.
type CollaboratorColumnUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorColumnUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorColumnUserMultiError) AllErrors() []error { return m }

// CollaboratorColumnUserValidationError is the validation error returned by
// CollaboratorColumnUser.Validate if the designated constraints aren't met.
type CollaboratorColumnUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorColumnUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorColumnUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorColumnUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorColumnUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorColumnUserValidationError) ErrorName() string {
	return "CollaboratorColumnUserValidationError"
}

// Error satisfies the builtin error interface
func (e CollaboratorColumnUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaboratorColumnUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorColumnUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorColumnUserValidationError{}

// Validate checks the field values on CollaboratorUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollaboratorUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollaboratorUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollaboratorUsersRequestMultiError, or nil if none found.
func (m *CollaboratorUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollaboratorUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollaboratorUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollaboratorUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollaboratorUsersRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollaboratorUsersRequestMultiError(errors)
	}

	return nil
}

// CollaboratorUsersRequestMultiError is an error wrapping multiple validation
// errors returned by CollaboratorUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type CollaboratorUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorUsersRequestMultiError) AllErrors() []error { return m }

// CollaboratorUsersRequestValidationError is the validation error returned by
// CollaboratorUsersRequest.Validate if the designated constraints aren't met.
type CollaboratorUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorUsersRequestValidationError) ErrorName() string {
	return "CollaboratorUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollaboratorUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaboratorUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorUsersRequestValidationError{}

// Validate checks the field values on CollaboratorUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollaboratorUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollaboratorUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollaboratorUsersResponseMultiError, or nil if none found.
func (m *CollaboratorUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollaboratorUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return CollaboratorUsersResponseMultiError(errors)
	}

	return nil
}

// CollaboratorUsersResponseMultiError is an error wrapping multiple validation
// errors returned by CollaboratorUsersResponse.ValidateAll() if the
// designated constraints aren't met.
type CollaboratorUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorUsersResponseMultiError) AllErrors() []error { return m }

// CollaboratorUsersResponseValidationError is the validation error returned by
// CollaboratorUsersResponse.Validate if the designated constraints aren't met.
type CollaboratorUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorUsersResponseValidationError) ErrorName() string {
	return "CollaboratorUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollaboratorUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaboratorUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorUsersResponseValidationError{}

// Validate checks the field values on CollaboratorUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollaboratorUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollaboratorUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollaboratorUserRequestMultiError, or nil if none found.
func (m *CollaboratorUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollaboratorUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for TableId

	// no validation rules for FieldName

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for DeptId

	if len(errors) > 0 {
		return CollaboratorUserRequestMultiError(errors)
	}

	return nil
}

// CollaboratorUserRequestMultiError is an error wrapping multiple validation
// errors returned by CollaboratorUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CollaboratorUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorUserRequestMultiError) AllErrors() []error { return m }

// CollaboratorUserRequestValidationError is the validation error returned by
// CollaboratorUserRequest.Validate if the designated constraints aren't met.
type CollaboratorUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorUserRequestValidationError) ErrorName() string {
	return "CollaboratorUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollaboratorUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaboratorUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorUserRequestValidationError{}

// Validate checks the field values on CollaboratorUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollaboratorUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollaboratorUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollaboratorUserResponseMultiError, or nil if none found.
func (m *CollaboratorUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollaboratorUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CollaboratorUserResponseMultiError(errors)
	}

	return nil
}

// CollaboratorUserResponseMultiError is an error wrapping multiple validation
// errors returned by CollaboratorUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CollaboratorUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorUserResponseMultiError) AllErrors() []error { return m }

// CollaboratorUserResponseValidationError is the validation error returned by
// CollaboratorUserResponse.Validate if the designated constraints aren't met.
type CollaboratorUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorUserResponseValidationError) ErrorName() string {
	return "CollaboratorUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollaboratorUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaboratorUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorUserResponseValidationError{}

// Validate checks the field values on GetUserCollaboratorRoleIdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserCollaboratorRoleIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCollaboratorRoleIdsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserCollaboratorRoleIdsRequestMultiError, or nil if none found.
func (m *GetUserCollaboratorRoleIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCollaboratorRoleIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for TableId

	if len(errors) > 0 {
		return GetUserCollaboratorRoleIdsRequestMultiError(errors)
	}

	return nil
}

// GetUserCollaboratorRoleIdsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserCollaboratorRoleIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCollaboratorRoleIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCollaboratorRoleIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCollaboratorRoleIdsRequestMultiError) AllErrors() []error { return m }

// GetUserCollaboratorRoleIdsRequestValidationError is the validation error
// returned by GetUserCollaboratorRoleIdsRequest.Validate if the designated
// constraints aren't met.
type GetUserCollaboratorRoleIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCollaboratorRoleIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCollaboratorRoleIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCollaboratorRoleIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCollaboratorRoleIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCollaboratorRoleIdsRequestValidationError) ErrorName() string {
	return "GetUserCollaboratorRoleIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCollaboratorRoleIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCollaboratorRoleIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCollaboratorRoleIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCollaboratorRoleIdsRequestValidationError{}

// Validate checks the field values on GetUserCollaboratorRoleIdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserCollaboratorRoleIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCollaboratorRoleIdsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserCollaboratorRoleIdsResponseMultiError, or nil if none found.
func (m *GetUserCollaboratorRoleIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCollaboratorRoleIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserCollaboratorRoleIdsResponseMultiError(errors)
	}

	return nil
}

// GetUserCollaboratorRoleIdsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserCollaboratorRoleIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserCollaboratorRoleIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCollaboratorRoleIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCollaboratorRoleIdsResponseMultiError) AllErrors() []error { return m }

// GetUserCollaboratorRoleIdsResponseValidationError is the validation error
// returned by GetUserCollaboratorRoleIdsResponse.Validate if the designated
// constraints aren't met.
type GetUserCollaboratorRoleIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCollaboratorRoleIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCollaboratorRoleIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCollaboratorRoleIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCollaboratorRoleIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCollaboratorRoleIdsResponseValidationError) ErrorName() string {
	return "GetUserCollaboratorRoleIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCollaboratorRoleIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCollaboratorRoleIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCollaboratorRoleIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCollaboratorRoleIdsResponseValidationError{}

// Validate checks the field values on MemberFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberFieldRequestMultiError, or nil if none found.
func (m *MemberFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for OrgId

	// no validation rules for TableId

	// no validation rules for FieldName

	if len(errors) > 0 {
		return MemberFieldRequestMultiError(errors)
	}

	return nil
}

// MemberFieldRequestMultiError is an error wrapping multiple validation errors
// returned by MemberFieldRequest.ValidateAll() if the designated constraints
// aren't met.
type MemberFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberFieldRequestMultiError) AllErrors() []error { return m }

// MemberFieldRequestValidationError is the validation error returned by
// MemberFieldRequest.Validate if the designated constraints aren't met.
type MemberFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberFieldRequestValidationError) ErrorName() string {
	return "MemberFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberFieldRequestValidationError{}

// Validate checks the field values on MemberFieldResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberFieldResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberFieldResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberFieldResponseMultiError, or nil if none found.
func (m *MemberFieldResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberFieldResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return MemberFieldResponseMultiError(errors)
	}

	return nil
}

// MemberFieldResponseMultiError is an error wrapping multiple validation
// errors returned by MemberFieldResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberFieldResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberFieldResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberFieldResponseMultiError) AllErrors() []error { return m }

// MemberFieldResponseValidationError is the validation error returned by
// MemberFieldResponse.Validate if the designated constraints aren't met.
type MemberFieldResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberFieldResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberFieldResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberFieldResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberFieldResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberFieldResponseValidationError) ErrorName() string {
	return "MemberFieldResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberFieldResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberFieldResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberFieldResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberFieldResponseValidationError{}

// Validate checks the field values on BatchMigrateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchMigrateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchMigrateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchMigrateRequestMultiError, or nil if none found.
func (m *BatchMigrateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchMigrateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchMigrateRequestMultiError(errors)
	}

	return nil
}

// BatchMigrateRequestMultiError is an error wrapping multiple validation
// errors returned by BatchMigrateRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchMigrateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchMigrateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchMigrateRequestMultiError) AllErrors() []error { return m }

// BatchMigrateRequestValidationError is the validation error returned by
// BatchMigrateRequest.Validate if the designated constraints aren't met.
type BatchMigrateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchMigrateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchMigrateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchMigrateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchMigrateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchMigrateRequestValidationError) ErrorName() string {
	return "BatchMigrateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchMigrateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchMigrateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchMigrateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchMigrateRequestValidationError{}

// Validate checks the field values on BatchMigrateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchMigrateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchMigrateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchMigrateResponseMultiError, or nil if none found.
func (m *BatchMigrateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchMigrateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return BatchMigrateResponseMultiError(errors)
	}

	return nil
}

// BatchMigrateResponseMultiError is an error wrapping multiple validation
// errors returned by BatchMigrateResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchMigrateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchMigrateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchMigrateResponseMultiError) AllErrors() []error { return m }

// BatchMigrateResponseValidationError is the validation error returned by
// BatchMigrateResponse.Validate if the designated constraints aren't met.
type BatchMigrateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchMigrateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchMigrateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchMigrateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchMigrateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchMigrateResponseValidationError) ErrorName() string {
	return "BatchMigrateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchMigrateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchMigrateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchMigrateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchMigrateResponseValidationError{}

// Validate checks the field values on GetCollaboratorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollaboratorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollaboratorsRequestMultiError, or nil if none found.
func (m *GetCollaboratorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollaboratorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for OrgId

	// no validation rules for TableId

	// no validation rules for AllUser

	if len(errors) > 0 {
		return GetCollaboratorsRequestMultiError(errors)
	}

	return nil
}

// GetCollaboratorsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollaboratorsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollaboratorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollaboratorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollaboratorsRequestMultiError) AllErrors() []error { return m }

// GetCollaboratorsRequestValidationError is the validation error returned by
// GetCollaboratorsRequest.Validate if the designated constraints aren't met.
type GetCollaboratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollaboratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollaboratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollaboratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollaboratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollaboratorsRequestValidationError) ErrorName() string {
	return "GetCollaboratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollaboratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollaboratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollaboratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollaboratorsRequestValidationError{}

// Validate checks the field values on AppPerGroupListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppPerGroupListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppPerGroupListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppPerGroupListItemMultiError, or nil if none found.
func (m *AppPerGroupListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AppPerGroupListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for HasDelete

	// no validation rules for HasEdit

	// no validation rules for LangCode

	// no validation rules for Name

	// no validation rules for ReadOnly

	// no validation rules for Remake

	if len(errors) > 0 {
		return AppPerGroupListItemMultiError(errors)
	}

	return nil
}

// AppPerGroupListItemMultiError is an error wrapping multiple validation
// errors returned by AppPerGroupListItem.ValidateAll() if the designated
// constraints aren't met.
type AppPerGroupListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppPerGroupListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppPerGroupListItemMultiError) AllErrors() []error { return m }

// AppPerGroupListItemValidationError is the validation error returned by
// AppPerGroupListItem.Validate if the designated constraints aren't met.
type AppPerGroupListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppPerGroupListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppPerGroupListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppPerGroupListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppPerGroupListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppPerGroupListItemValidationError) ErrorName() string {
	return "AppPerGroupListItemValidationError"
}

// Error satisfies the builtin error interface
func (e AppPerGroupListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppPerGroupListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppPerGroupListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppPerGroupListItemValidationError{}

// Validate checks the field values on Collaborator with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Collaborator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collaborator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollaboratorMultiError, or
// nil if none found.
func (m *Collaborator) ValidateAll() error {
	return m.validate(true)
}

func (m *Collaborator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for IsDelete

	for idx, item := range m.GetPerGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollaboratorValidationError{
						field:  fmt.Sprintf("PerGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollaboratorValidationError{
						field:  fmt.Sprintf("PerGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollaboratorValidationError{
					field:  fmt.Sprintf("PerGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsSysAdmin

	// no validation rules for IsSubAdmin

	// no validation rules for IsOwner

	if len(errors) > 0 {
		return CollaboratorMultiError(errors)
	}

	return nil
}

// CollaboratorMultiError is an error wrapping multiple validation errors
// returned by Collaborator.ValidateAll() if the designated constraints aren't met.
type CollaboratorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollaboratorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollaboratorMultiError) AllErrors() []error { return m }

// CollaboratorValidationError is the validation error returned by
// Collaborator.Validate if the designated constraints aren't met.
type CollaboratorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollaboratorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollaboratorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollaboratorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollaboratorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollaboratorValidationError) ErrorName() string { return "CollaboratorValidationError" }

// Error satisfies the builtin error interface
func (e CollaboratorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollaborator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollaboratorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollaboratorValidationError{}

// Validate checks the field values on GetCollaboratorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollaboratorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollaboratorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollaboratorsResponseMultiError, or nil if none found.
func (m *GetCollaboratorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollaboratorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollaborators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCollaboratorsResponseValidationError{
						field:  fmt.Sprintf("Collaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCollaboratorsResponseValidationError{
						field:  fmt.Sprintf("Collaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCollaboratorsResponseValidationError{
					field:  fmt.Sprintf("Collaborators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCollaboratorsResponseMultiError(errors)
	}

	return nil
}

// GetCollaboratorsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCollaboratorsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCollaboratorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollaboratorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollaboratorsResponseMultiError) AllErrors() []error { return m }

// GetCollaboratorsResponseValidationError is the validation error returned by
// GetCollaboratorsResponse.Validate if the designated constraints aren't met.
type GetCollaboratorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollaboratorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollaboratorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollaboratorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollaboratorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollaboratorsResponseValidationError) ErrorName() string {
	return "GetCollaboratorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollaboratorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollaboratorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollaboratorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollaboratorsResponseValidationError{}

// Validate checks the field values on GetCollaboratorUserIdsAndDeptIdsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCollaboratorUserIdsAndDeptIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCollaboratorUserIdsAndDeptIdsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCollaboratorUserIdsAndDeptIdsRequestMultiError, or nil if none found.
func (m *GetCollaboratorUserIdsAndDeptIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollaboratorUserIdsAndDeptIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for OrgId

	// no validation rules for TableId

	// no validation rules for FieldName

	if len(errors) > 0 {
		return GetCollaboratorUserIdsAndDeptIdsRequestMultiError(errors)
	}

	return nil
}

// GetCollaboratorUserIdsAndDeptIdsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetCollaboratorUserIdsAndDeptIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollaboratorUserIdsAndDeptIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollaboratorUserIdsAndDeptIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollaboratorUserIdsAndDeptIdsRequestMultiError) AllErrors() []error { return m }

// GetCollaboratorUserIdsAndDeptIdsRequestValidationError is the validation
// error returned by GetCollaboratorUserIdsAndDeptIdsRequest.Validate if the
// designated constraints aren't met.
type GetCollaboratorUserIdsAndDeptIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollaboratorUserIdsAndDeptIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollaboratorUserIdsAndDeptIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollaboratorUserIdsAndDeptIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollaboratorUserIdsAndDeptIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollaboratorUserIdsAndDeptIdsRequestValidationError) ErrorName() string {
	return "GetCollaboratorUserIdsAndDeptIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollaboratorUserIdsAndDeptIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollaboratorUserIdsAndDeptIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollaboratorUserIdsAndDeptIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollaboratorUserIdsAndDeptIdsRequestValidationError{}

// Validate checks the field values on GetCollaboratorUserIdsAndDeptIdsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCollaboratorUserIdsAndDeptIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCollaboratorUserIdsAndDeptIdsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCollaboratorUserIdsAndDeptIdsResponseMultiError, or nil if none found.
func (m *GetCollaboratorUserIdsAndDeptIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollaboratorUserIdsAndDeptIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCollaboratorUserIdsAndDeptIdsResponseMultiError(errors)
	}

	return nil
}

// GetCollaboratorUserIdsAndDeptIdsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetCollaboratorUserIdsAndDeptIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCollaboratorUserIdsAndDeptIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollaboratorUserIdsAndDeptIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollaboratorUserIdsAndDeptIdsResponseMultiError) AllErrors() []error { return m }

// GetCollaboratorUserIdsAndDeptIdsResponseValidationError is the validation
// error returned by GetCollaboratorUserIdsAndDeptIdsResponse.Validate if the
// designated constraints aren't met.
type GetCollaboratorUserIdsAndDeptIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollaboratorUserIdsAndDeptIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollaboratorUserIdsAndDeptIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollaboratorUserIdsAndDeptIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollaboratorUserIdsAndDeptIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollaboratorUserIdsAndDeptIdsResponseValidationError) ErrorName() string {
	return "GetCollaboratorUserIdsAndDeptIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollaboratorUserIdsAndDeptIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollaboratorUserIdsAndDeptIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollaboratorUserIdsAndDeptIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollaboratorUserIdsAndDeptIdsResponseValidationError{}

// Validate checks the field values on CopyColumnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyColumnRequestMultiError, or nil if none found.
func (m *CopyColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for OrgId

	// no validation rules for TableId

	// no validation rules for SourceFieldName

	// no validation rules for TargetFieldName

	if len(errors) > 0 {
		return CopyColumnRequestMultiError(errors)
	}

	return nil
}

// CopyColumnRequestMultiError is an error wrapping multiple validation errors
// returned by CopyColumnRequest.ValidateAll() if the designated constraints
// aren't met.
type CopyColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyColumnRequestMultiError) AllErrors() []error { return m }

// CopyColumnRequestValidationError is the validation error returned by
// CopyColumnRequest.Validate if the designated constraints aren't met.
type CopyColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyColumnRequestValidationError) ErrorName() string {
	return "CopyColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CopyColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyColumnRequestValidationError{}

// Validate checks the field values on CopyColumnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyColumnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyColumnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyColumnResponseMultiError, or nil if none found.
func (m *CopyColumnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyColumnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for SourceFieldName

	// no validation rules for TargetFieldName

	if len(errors) > 0 {
		return CopyColumnResponseMultiError(errors)
	}

	return nil
}

// CopyColumnResponseMultiError is an error wrapping multiple validation errors
// returned by CopyColumnResponse.ValidateAll() if the designated constraints
// aren't met.
type CopyColumnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyColumnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyColumnResponseMultiError) AllErrors() []error { return m }

// CopyColumnResponseValidationError is the validation error returned by
// CopyColumnResponse.Validate if the designated constraints aren't met.
type CopyColumnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyColumnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyColumnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyColumnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyColumnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyColumnResponseValidationError) ErrorName() string {
	return "CopyColumnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CopyColumnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyColumnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyColumnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyColumnResponseValidationError{}

// Validate checks the field values on GetDataCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataCollaboratorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataCollaboratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataCollaboratorsRequestMultiError, or nil if none found.
func (m *GetDataCollaboratorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataCollaboratorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDataCollaboratorsRequestMultiError(errors)
	}

	return nil
}

// GetDataCollaboratorsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDataCollaboratorsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDataCollaboratorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataCollaboratorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataCollaboratorsRequestMultiError) AllErrors() []error { return m }

// GetDataCollaboratorsRequestValidationError is the validation error returned
// by GetDataCollaboratorsRequest.Validate if the designated constraints
// aren't met.
type GetDataCollaboratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataCollaboratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataCollaboratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataCollaboratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataCollaboratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataCollaboratorsRequestValidationError) ErrorName() string {
	return "GetDataCollaboratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataCollaboratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataCollaboratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataCollaboratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataCollaboratorsRequestValidationError{}

// Validate checks the field values on GetDataCollaboratorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataCollaboratorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataCollaboratorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataCollaboratorsResponseMultiError, or nil if none found.
func (m *GetDataCollaboratorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataCollaboratorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataCollaborators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDataCollaboratorsResponseValidationError{
						field:  fmt.Sprintf("DataCollaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDataCollaboratorsResponseValidationError{
						field:  fmt.Sprintf("DataCollaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDataCollaboratorsResponseValidationError{
					field:  fmt.Sprintf("DataCollaborators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDataCollaboratorsResponseMultiError(errors)
	}

	return nil
}

// GetDataCollaboratorsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDataCollaboratorsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDataCollaboratorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataCollaboratorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataCollaboratorsResponseMultiError) AllErrors() []error { return m }

// GetDataCollaboratorsResponseValidationError is the validation error returned
// by GetDataCollaboratorsResponse.Validate if the designated constraints
// aren't met.
type GetDataCollaboratorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataCollaboratorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataCollaboratorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataCollaboratorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataCollaboratorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataCollaboratorsResponseValidationError) ErrorName() string {
	return "GetDataCollaboratorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataCollaboratorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataCollaboratorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataCollaboratorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataCollaboratorsResponseValidationError{}

// Validate checks the field values on DataCollaborators with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataCollaborators) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataCollaborators with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataCollaboratorsMultiError, or nil if none found.
func (m *DataCollaborators) ValidateAll() error {
	return m.validate(true)
}

func (m *DataCollaborators) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssueId

	for idx, item := range m.GetColumnCollaborators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataCollaboratorsValidationError{
						field:  fmt.Sprintf("ColumnCollaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataCollaboratorsValidationError{
						field:  fmt.Sprintf("ColumnCollaborators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataCollaboratorsValidationError{
					field:  fmt.Sprintf("ColumnCollaborators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataCollaboratorsMultiError(errors)
	}

	return nil
}

// DataCollaboratorsMultiError is an error wrapping multiple validation errors
// returned by DataCollaborators.ValidateAll() if the designated constraints
// aren't met.
type DataCollaboratorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataCollaboratorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataCollaboratorsMultiError) AllErrors() []error { return m }

// DataCollaboratorsValidationError is the validation error returned by
// DataCollaborators.Validate if the designated constraints aren't met.
type DataCollaboratorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataCollaboratorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataCollaboratorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataCollaboratorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataCollaboratorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataCollaboratorsValidationError) ErrorName() string {
	return "DataCollaboratorsValidationError"
}

// Error satisfies the builtin error interface
func (e DataCollaboratorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataCollaborators.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataCollaboratorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataCollaboratorsValidationError{}

// Validate checks the field values on ColumnCollaborators with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColumnCollaborators) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnCollaborators with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColumnCollaboratorsMultiError, or nil if none found.
func (m *ColumnCollaborators) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnCollaborators) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ColumnId

	if len(errors) > 0 {
		return ColumnCollaboratorsMultiError(errors)
	}

	return nil
}

// ColumnCollaboratorsMultiError is an error wrapping multiple validation
// errors returned by ColumnCollaborators.ValidateAll() if the designated
// constraints aren't met.
type ColumnCollaboratorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnCollaboratorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnCollaboratorsMultiError) AllErrors() []error { return m }

// ColumnCollaboratorsValidationError is the validation error returned by
// ColumnCollaborators.Validate if the designated constraints aren't met.
type ColumnCollaboratorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnCollaboratorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnCollaboratorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnCollaboratorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnCollaboratorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnCollaboratorsValidationError) ErrorName() string {
	return "ColumnCollaboratorsValidationError"
}

// Error satisfies the builtin error interface
func (e ColumnCollaboratorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnCollaborators.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnCollaboratorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnCollaboratorsValidationError{}

// Validate checks the field values on GetAppIdsByCollaboratorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppIdsByCollaboratorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppIdsByCollaboratorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppIdsByCollaboratorReqMultiError, or nil if none found.
func (m *GetAppIdsByCollaboratorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppIdsByCollaboratorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppIdsByCollaboratorReqMultiError(errors)
	}

	return nil
}

// GetAppIdsByCollaboratorReqMultiError is an error wrapping multiple
// validation errors returned by GetAppIdsByCollaboratorReq.ValidateAll() if
// the designated constraints aren't met.
type GetAppIdsByCollaboratorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppIdsByCollaboratorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppIdsByCollaboratorReqMultiError) AllErrors() []error { return m }

// GetAppIdsByCollaboratorReqValidationError is the validation error returned
// by GetAppIdsByCollaboratorReq.Validate if the designated constraints aren't met.
type GetAppIdsByCollaboratorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppIdsByCollaboratorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppIdsByCollaboratorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppIdsByCollaboratorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppIdsByCollaboratorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppIdsByCollaboratorReqValidationError) ErrorName() string {
	return "GetAppIdsByCollaboratorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppIdsByCollaboratorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppIdsByCollaboratorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppIdsByCollaboratorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppIdsByCollaboratorReqValidationError{}

// Validate checks the field values on GetAppIdsByCollaboratorResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppIdsByCollaboratorResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppIdsByCollaboratorResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppIdsByCollaboratorRespMultiError, or nil if none found.
func (m *GetAppIdsByCollaboratorResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppIdsByCollaboratorResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppIdsByCollaboratorRespMultiError(errors)
	}

	return nil
}

// GetAppIdsByCollaboratorRespMultiError is an error wrapping multiple
// validation errors returned by GetAppIdsByCollaboratorResp.ValidateAll() if
// the designated constraints aren't met.
type GetAppIdsByCollaboratorRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppIdsByCollaboratorRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppIdsByCollaboratorRespMultiError) AllErrors() []error { return m }

// GetAppIdsByCollaboratorRespValidationError is the validation error returned
// by GetAppIdsByCollaboratorResp.Validate if the designated constraints
// aren't met.
type GetAppIdsByCollaboratorRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppIdsByCollaboratorRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppIdsByCollaboratorRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppIdsByCollaboratorRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppIdsByCollaboratorRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppIdsByCollaboratorRespValidationError) ErrorName() string {
	return "GetAppIdsByCollaboratorRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppIdsByCollaboratorRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppIdsByCollaboratorResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppIdsByCollaboratorRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppIdsByCollaboratorRespValidationError{}
