// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: permission.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionClient is the client API for Permission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionClient interface {
	GetCollaboratorUserIdsAndDeptIds(ctx context.Context, in *GetCollaboratorUserIdsAndDeptIdsRequest, opts ...grpc.CallOption) (*GetCollaboratorUserIdsAndDeptIdsResponse, error)
	GetCollaborators(ctx context.Context, in *GetCollaboratorsRequest, opts ...grpc.CallOption) (*GetCollaboratorsResponse, error)
	GetUserCollaboratorRoleIds(ctx context.Context, in *GetUserCollaboratorRoleIdsRequest, opts ...grpc.CallOption) (*GetUserCollaboratorRoleIdsResponse, error)
	ChangeCollaboratorUser(ctx context.Context, in *CollaboratorUserRequest, opts ...grpc.CallOption) (*CollaboratorUserResponse, error)
	AddCollaboratorUser(ctx context.Context, in *CollaboratorUserRequest, opts ...grpc.CallOption) (*CollaboratorUserResponse, error)
	RemoveCollaboratorUser(ctx context.Context, in *CollaboratorUserRequest, opts ...grpc.CallOption) (*CollaboratorUsersResponse, error)
	SyncCollaboratorUsers(ctx context.Context, in *CollaboratorUsersRequest, opts ...grpc.CallOption) (*CollaboratorUsersResponse, error)
	BatchRemoveCollaboratorUsers(ctx context.Context, in *CollaboratorUsersRequest, opts ...grpc.CallOption) (*CollaboratorUsersResponse, error)
	BatchRemoveMemberFieldCollaborators(ctx context.Context, in *MemberFieldRequest, opts ...grpc.CallOption) (*MemberFieldResponse, error)
	///form/inner/api/v1/apps/%d/values/filter
	BatchMigrateCollaboratorUsersToPermission(ctx context.Context, in *BatchMigrateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CopyCollaboratorsFromColumnToOther(ctx context.Context, in *CopyColumnRequest, opts ...grpc.CallOption) (*CopyColumnResponse, error)
	GetDataCollaborators(ctx context.Context, in *GetDataCollaboratorsRequest, opts ...grpc.CallOption) (*GetDataCollaboratorsResponse, error)
	GetAppIdsByCollaborators(ctx context.Context, in *GetAppIdsByCollaboratorReq, opts ...grpc.CallOption) (*GetAppIdsByCollaboratorResp, error)
}

type permissionClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionClient(cc grpc.ClientConnInterface) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) GetCollaboratorUserIdsAndDeptIds(ctx context.Context, in *GetCollaboratorUserIdsAndDeptIdsRequest, opts ...grpc.CallOption) (*GetCollaboratorUserIdsAndDeptIdsResponse, error) {
	out := new(GetCollaboratorUserIdsAndDeptIdsResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/getCollaboratorUserIdsAndDeptIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetCollaborators(ctx context.Context, in *GetCollaboratorsRequest, opts ...grpc.CallOption) (*GetCollaboratorsResponse, error) {
	out := new(GetCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/getCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetUserCollaboratorRoleIds(ctx context.Context, in *GetUserCollaboratorRoleIdsRequest, opts ...grpc.CallOption) (*GetUserCollaboratorRoleIdsResponse, error) {
	out := new(GetUserCollaboratorRoleIdsResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/getUserCollaboratorRoleIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) ChangeCollaboratorUser(ctx context.Context, in *CollaboratorUserRequest, opts ...grpc.CallOption) (*CollaboratorUserResponse, error) {
	out := new(CollaboratorUserResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/changeCollaboratorUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) AddCollaboratorUser(ctx context.Context, in *CollaboratorUserRequest, opts ...grpc.CallOption) (*CollaboratorUserResponse, error) {
	out := new(CollaboratorUserResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/addCollaboratorUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) RemoveCollaboratorUser(ctx context.Context, in *CollaboratorUserRequest, opts ...grpc.CallOption) (*CollaboratorUsersResponse, error) {
	out := new(CollaboratorUsersResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/removeCollaboratorUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) SyncCollaboratorUsers(ctx context.Context, in *CollaboratorUsersRequest, opts ...grpc.CallOption) (*CollaboratorUsersResponse, error) {
	out := new(CollaboratorUsersResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/syncCollaboratorUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) BatchRemoveCollaboratorUsers(ctx context.Context, in *CollaboratorUsersRequest, opts ...grpc.CallOption) (*CollaboratorUsersResponse, error) {
	out := new(CollaboratorUsersResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/batchRemoveCollaboratorUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) BatchRemoveMemberFieldCollaborators(ctx context.Context, in *MemberFieldRequest, opts ...grpc.CallOption) (*MemberFieldResponse, error) {
	out := new(MemberFieldResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/batchRemoveMemberFieldCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) BatchMigrateCollaboratorUsersToPermission(ctx context.Context, in *BatchMigrateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/batchMigrateCollaboratorUsersToPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CopyCollaboratorsFromColumnToOther(ctx context.Context, in *CopyColumnRequest, opts ...grpc.CallOption) (*CopyColumnResponse, error) {
	out := new(CopyColumnResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/copyCollaboratorsFromColumnToOther", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetDataCollaborators(ctx context.Context, in *GetDataCollaboratorsRequest, opts ...grpc.CallOption) (*GetDataCollaboratorsResponse, error) {
	out := new(GetDataCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/GetDataCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetAppIdsByCollaborators(ctx context.Context, in *GetAppIdsByCollaboratorReq, opts ...grpc.CallOption) (*GetAppIdsByCollaboratorResp, error) {
	out := new(GetAppIdsByCollaboratorResp)
	err := c.cc.Invoke(ctx, "/permission.v1.Permission/GetAppIdsByCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServer is the server API for Permission service.
// All implementations must embed UnimplementedPermissionServer
// for forward compatibility
type PermissionServer interface {
	GetCollaboratorUserIdsAndDeptIds(context.Context, *GetCollaboratorUserIdsAndDeptIdsRequest) (*GetCollaboratorUserIdsAndDeptIdsResponse, error)
	GetCollaborators(context.Context, *GetCollaboratorsRequest) (*GetCollaboratorsResponse, error)
	GetUserCollaboratorRoleIds(context.Context, *GetUserCollaboratorRoleIdsRequest) (*GetUserCollaboratorRoleIdsResponse, error)
	ChangeCollaboratorUser(context.Context, *CollaboratorUserRequest) (*CollaboratorUserResponse, error)
	AddCollaboratorUser(context.Context, *CollaboratorUserRequest) (*CollaboratorUserResponse, error)
	RemoveCollaboratorUser(context.Context, *CollaboratorUserRequest) (*CollaboratorUsersResponse, error)
	SyncCollaboratorUsers(context.Context, *CollaboratorUsersRequest) (*CollaboratorUsersResponse, error)
	BatchRemoveCollaboratorUsers(context.Context, *CollaboratorUsersRequest) (*CollaboratorUsersResponse, error)
	BatchRemoveMemberFieldCollaborators(context.Context, *MemberFieldRequest) (*MemberFieldResponse, error)
	///form/inner/api/v1/apps/%d/values/filter
	BatchMigrateCollaboratorUsersToPermission(context.Context, *BatchMigrateRequest) (*emptypb.Empty, error)
	CopyCollaboratorsFromColumnToOther(context.Context, *CopyColumnRequest) (*CopyColumnResponse, error)
	GetDataCollaborators(context.Context, *GetDataCollaboratorsRequest) (*GetDataCollaboratorsResponse, error)
	GetAppIdsByCollaborators(context.Context, *GetAppIdsByCollaboratorReq) (*GetAppIdsByCollaboratorResp, error)
	mustEmbedUnimplementedPermissionServer()
}

// UnimplementedPermissionServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServer struct {
}

func (UnimplementedPermissionServer) GetCollaboratorUserIdsAndDeptIds(context.Context, *GetCollaboratorUserIdsAndDeptIdsRequest) (*GetCollaboratorUserIdsAndDeptIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaboratorUserIdsAndDeptIds not implemented")
}
func (UnimplementedPermissionServer) GetCollaborators(context.Context, *GetCollaboratorsRequest) (*GetCollaboratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborators not implemented")
}
func (UnimplementedPermissionServer) GetUserCollaboratorRoleIds(context.Context, *GetUserCollaboratorRoleIdsRequest) (*GetUserCollaboratorRoleIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCollaboratorRoleIds not implemented")
}
func (UnimplementedPermissionServer) ChangeCollaboratorUser(context.Context, *CollaboratorUserRequest) (*CollaboratorUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCollaboratorUser not implemented")
}
func (UnimplementedPermissionServer) AddCollaboratorUser(context.Context, *CollaboratorUserRequest) (*CollaboratorUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollaboratorUser not implemented")
}
func (UnimplementedPermissionServer) RemoveCollaboratorUser(context.Context, *CollaboratorUserRequest) (*CollaboratorUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollaboratorUser not implemented")
}
func (UnimplementedPermissionServer) SyncCollaboratorUsers(context.Context, *CollaboratorUsersRequest) (*CollaboratorUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCollaboratorUsers not implemented")
}
func (UnimplementedPermissionServer) BatchRemoveCollaboratorUsers(context.Context, *CollaboratorUsersRequest) (*CollaboratorUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRemoveCollaboratorUsers not implemented")
}
func (UnimplementedPermissionServer) BatchRemoveMemberFieldCollaborators(context.Context, *MemberFieldRequest) (*MemberFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRemoveMemberFieldCollaborators not implemented")
}
func (UnimplementedPermissionServer) BatchMigrateCollaboratorUsersToPermission(context.Context, *BatchMigrateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchMigrateCollaboratorUsersToPermission not implemented")
}
func (UnimplementedPermissionServer) CopyCollaboratorsFromColumnToOther(context.Context, *CopyColumnRequest) (*CopyColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyCollaboratorsFromColumnToOther not implemented")
}
func (UnimplementedPermissionServer) GetDataCollaborators(context.Context, *GetDataCollaboratorsRequest) (*GetDataCollaboratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataCollaborators not implemented")
}
func (UnimplementedPermissionServer) GetAppIdsByCollaborators(context.Context, *GetAppIdsByCollaboratorReq) (*GetAppIdsByCollaboratorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppIdsByCollaborators not implemented")
}
func (UnimplementedPermissionServer) mustEmbedUnimplementedPermissionServer() {}

// UnsafePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServer will
// result in compilation errors.
type UnsafePermissionServer interface {
	mustEmbedUnimplementedPermissionServer()
}

func RegisterPermissionServer(s grpc.ServiceRegistrar, srv PermissionServer) {
	s.RegisterService(&Permission_ServiceDesc, srv)
}

func _Permission_GetCollaboratorUserIdsAndDeptIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaboratorUserIdsAndDeptIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetCollaboratorUserIdsAndDeptIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/getCollaboratorUserIdsAndDeptIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetCollaboratorUserIdsAndDeptIds(ctx, req.(*GetCollaboratorUserIdsAndDeptIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/getCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetCollaborators(ctx, req.(*GetCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetUserCollaboratorRoleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCollaboratorRoleIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetUserCollaboratorRoleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/getUserCollaboratorRoleIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetUserCollaboratorRoleIds(ctx, req.(*GetUserCollaboratorRoleIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_ChangeCollaboratorUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaboratorUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ChangeCollaboratorUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/changeCollaboratorUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ChangeCollaboratorUser(ctx, req.(*CollaboratorUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_AddCollaboratorUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaboratorUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).AddCollaboratorUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/addCollaboratorUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).AddCollaboratorUser(ctx, req.(*CollaboratorUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_RemoveCollaboratorUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaboratorUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).RemoveCollaboratorUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/removeCollaboratorUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).RemoveCollaboratorUser(ctx, req.(*CollaboratorUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_SyncCollaboratorUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaboratorUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).SyncCollaboratorUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/syncCollaboratorUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).SyncCollaboratorUsers(ctx, req.(*CollaboratorUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_BatchRemoveCollaboratorUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaboratorUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).BatchRemoveCollaboratorUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/batchRemoveCollaboratorUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).BatchRemoveCollaboratorUsers(ctx, req.(*CollaboratorUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_BatchRemoveMemberFieldCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).BatchRemoveMemberFieldCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/batchRemoveMemberFieldCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).BatchRemoveMemberFieldCollaborators(ctx, req.(*MemberFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_BatchMigrateCollaboratorUsersToPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).BatchMigrateCollaboratorUsersToPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/batchMigrateCollaboratorUsersToPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).BatchMigrateCollaboratorUsersToPermission(ctx, req.(*BatchMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CopyCollaboratorsFromColumnToOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CopyCollaboratorsFromColumnToOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/copyCollaboratorsFromColumnToOther",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CopyCollaboratorsFromColumnToOther(ctx, req.(*CopyColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetDataCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetDataCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/GetDataCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetDataCollaborators(ctx, req.(*GetDataCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetAppIdsByCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppIdsByCollaboratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetAppIdsByCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.Permission/GetAppIdsByCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetAppIdsByCollaborators(ctx, req.(*GetAppIdsByCollaboratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Permission_ServiceDesc is the grpc.ServiceDesc for Permission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permission.v1.Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCollaboratorUserIdsAndDeptIds",
			Handler:    _Permission_GetCollaboratorUserIdsAndDeptIds_Handler,
		},
		{
			MethodName: "getCollaborators",
			Handler:    _Permission_GetCollaborators_Handler,
		},
		{
			MethodName: "getUserCollaboratorRoleIds",
			Handler:    _Permission_GetUserCollaboratorRoleIds_Handler,
		},
		{
			MethodName: "changeCollaboratorUser",
			Handler:    _Permission_ChangeCollaboratorUser_Handler,
		},
		{
			MethodName: "addCollaboratorUser",
			Handler:    _Permission_AddCollaboratorUser_Handler,
		},
		{
			MethodName: "removeCollaboratorUser",
			Handler:    _Permission_RemoveCollaboratorUser_Handler,
		},
		{
			MethodName: "syncCollaboratorUsers",
			Handler:    _Permission_SyncCollaboratorUsers_Handler,
		},
		{
			MethodName: "batchRemoveCollaboratorUsers",
			Handler:    _Permission_BatchRemoveCollaboratorUsers_Handler,
		},
		{
			MethodName: "batchRemoveMemberFieldCollaborators",
			Handler:    _Permission_BatchRemoveMemberFieldCollaborators_Handler,
		},
		{
			MethodName: "batchMigrateCollaboratorUsersToPermission",
			Handler:    _Permission_BatchMigrateCollaboratorUsersToPermission_Handler,
		},
		{
			MethodName: "copyCollaboratorsFromColumnToOther",
			Handler:    _Permission_CopyCollaboratorsFromColumnToOther_Handler,
		},
		{
			MethodName: "GetDataCollaborators",
			Handler:    _Permission_GetDataCollaborators_Handler,
		},
		{
			MethodName: "GetAppIdsByCollaborators",
			Handler:    _Permission_GetAppIdsByCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission.proto",
}
